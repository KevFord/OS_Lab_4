
OS_Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a36c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000164c  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb04  0800bb04  0001bb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000004  0800bb08  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b544  2000007c  0800bb80  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000b5c0  0800bb80  0002b5c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000310c4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005528  00000000  00000000  00051170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029b8  00000000  00000000  00056698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00029cff  00000000  00000000  00059050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002aa23  00000000  00000000  00082d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001096de  00000000  00000000  000ad772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b6e50  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000027c8  00000000  00000000  001b6ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b5fc  00000000  00000000  001b9670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a494 	.word	0x0800a494

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800a494 	.word	0x0800a494

08000180 <__aeabi_d2uiz>:
 8000180:	004a      	lsls	r2, r1, #1
 8000182:	d211      	bcs.n	80001a8 <__aeabi_d2uiz+0x28>
 8000184:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000188:	d211      	bcs.n	80001ae <__aeabi_d2uiz+0x2e>
 800018a:	d50d      	bpl.n	80001a8 <__aeabi_d2uiz+0x28>
 800018c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000190:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000194:	d40e      	bmi.n	80001b4 <__aeabi_d2uiz+0x34>
 8000196:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800019a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800019e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80001a2:	fa23 f002 	lsr.w	r0, r3, r2
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80001b2:	d102      	bne.n	80001ba <__aeabi_d2uiz+0x3a>
 80001b4:	f04f 30ff 	mov.w	r0, #4294967295
 80001b8:	4770      	bx	lr
 80001ba:	f04f 0000 	mov.w	r0, #0
 80001be:	4770      	bx	lr

080001c0 <__aeabi_uldivmod>:
 80001c0:	b953      	cbnz	r3, 80001d8 <__aeabi_uldivmod+0x18>
 80001c2:	b94a      	cbnz	r2, 80001d8 <__aeabi_uldivmod+0x18>
 80001c4:	2900      	cmp	r1, #0
 80001c6:	bf08      	it	eq
 80001c8:	2800      	cmpeq	r0, #0
 80001ca:	bf1c      	itt	ne
 80001cc:	f04f 31ff 	movne.w	r1, #4294967295
 80001d0:	f04f 30ff 	movne.w	r0, #4294967295
 80001d4:	f000 b96e 	b.w	80004b4 <__aeabi_idiv0>
 80001d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e0:	f000 f806 	bl	80001f0 <__udivmoddi4>
 80001e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ec:	b004      	add	sp, #16
 80001ee:	4770      	bx	lr

080001f0 <__udivmoddi4>:
 80001f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f4:	9d08      	ldr	r5, [sp, #32]
 80001f6:	4604      	mov	r4, r0
 80001f8:	468c      	mov	ip, r1
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	f040 8083 	bne.w	8000306 <__udivmoddi4+0x116>
 8000200:	428a      	cmp	r2, r1
 8000202:	4617      	mov	r7, r2
 8000204:	d947      	bls.n	8000296 <__udivmoddi4+0xa6>
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	b142      	cbz	r2, 800021e <__udivmoddi4+0x2e>
 800020c:	f1c2 0020 	rsb	r0, r2, #32
 8000210:	fa24 f000 	lsr.w	r0, r4, r0
 8000214:	4091      	lsls	r1, r2
 8000216:	4097      	lsls	r7, r2
 8000218:	ea40 0c01 	orr.w	ip, r0, r1
 800021c:	4094      	lsls	r4, r2
 800021e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000222:	0c23      	lsrs	r3, r4, #16
 8000224:	fbbc f6f8 	udiv	r6, ip, r8
 8000228:	fa1f fe87 	uxth.w	lr, r7
 800022c:	fb08 c116 	mls	r1, r8, r6, ip
 8000230:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000234:	fb06 f10e 	mul.w	r1, r6, lr
 8000238:	4299      	cmp	r1, r3
 800023a:	d909      	bls.n	8000250 <__udivmoddi4+0x60>
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000242:	f080 8119 	bcs.w	8000478 <__udivmoddi4+0x288>
 8000246:	4299      	cmp	r1, r3
 8000248:	f240 8116 	bls.w	8000478 <__udivmoddi4+0x288>
 800024c:	3e02      	subs	r6, #2
 800024e:	443b      	add	r3, r7
 8000250:	1a5b      	subs	r3, r3, r1
 8000252:	b2a4      	uxth	r4, r4
 8000254:	fbb3 f0f8 	udiv	r0, r3, r8
 8000258:	fb08 3310 	mls	r3, r8, r0, r3
 800025c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000260:	fb00 fe0e 	mul.w	lr, r0, lr
 8000264:	45a6      	cmp	lr, r4
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x8c>
 8000268:	193c      	adds	r4, r7, r4
 800026a:	f100 33ff 	add.w	r3, r0, #4294967295
 800026e:	f080 8105 	bcs.w	800047c <__udivmoddi4+0x28c>
 8000272:	45a6      	cmp	lr, r4
 8000274:	f240 8102 	bls.w	800047c <__udivmoddi4+0x28c>
 8000278:	3802      	subs	r0, #2
 800027a:	443c      	add	r4, r7
 800027c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000280:	eba4 040e 	sub.w	r4, r4, lr
 8000284:	2600      	movs	r6, #0
 8000286:	b11d      	cbz	r5, 8000290 <__udivmoddi4+0xa0>
 8000288:	40d4      	lsrs	r4, r2
 800028a:	2300      	movs	r3, #0
 800028c:	e9c5 4300 	strd	r4, r3, [r5]
 8000290:	4631      	mov	r1, r6
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	b902      	cbnz	r2, 800029a <__udivmoddi4+0xaa>
 8000298:	deff      	udf	#255	; 0xff
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d150      	bne.n	8000344 <__udivmoddi4+0x154>
 80002a2:	1bcb      	subs	r3, r1, r7
 80002a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a8:	fa1f f887 	uxth.w	r8, r7
 80002ac:	2601      	movs	r6, #1
 80002ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b2:	0c21      	lsrs	r1, r4, #16
 80002b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002bc:	fb08 f30c 	mul.w	r3, r8, ip
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0xe4>
 80002c4:	1879      	adds	r1, r7, r1
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0xe2>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	f200 80e9 	bhi.w	80004a4 <__udivmoddi4+0x2b4>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1ac9      	subs	r1, r1, r3
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x10c>
 80002ec:	193c      	adds	r4, r7, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x10a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80d9 	bhi.w	80004ac <__udivmoddi4+0x2bc>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e7bf      	b.n	8000286 <__udivmoddi4+0x96>
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0x12e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	f000 80b1 	beq.w	8000472 <__udivmoddi4+0x282>
 8000310:	2600      	movs	r6, #0
 8000312:	e9c5 0100 	strd	r0, r1, [r5]
 8000316:	4630      	mov	r0, r6
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f683 	clz	r6, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d14a      	bne.n	80003bc <__udivmoddi4+0x1cc>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0x140>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80b8 	bhi.w	80004a0 <__udivmoddi4+0x2b0>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0103 	sbc.w	r1, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	468c      	mov	ip, r1
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0a8      	beq.n	8000290 <__udivmoddi4+0xa0>
 800033e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0xa0>
 8000344:	f1c2 0320 	rsb	r3, r2, #32
 8000348:	fa20 f603 	lsr.w	r6, r0, r3
 800034c:	4097      	lsls	r7, r2
 800034e:	fa01 f002 	lsl.w	r0, r1, r2
 8000352:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000356:	40d9      	lsrs	r1, r3
 8000358:	4330      	orrs	r0, r6
 800035a:	0c03      	lsrs	r3, r0, #16
 800035c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000360:	fa1f f887 	uxth.w	r8, r7
 8000364:	fb0e 1116 	mls	r1, lr, r6, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb06 f108 	mul.w	r1, r6, r8
 8000370:	4299      	cmp	r1, r3
 8000372:	fa04 f402 	lsl.w	r4, r4, r2
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x19c>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f106 3cff 	add.w	ip, r6, #4294967295
 800037e:	f080 808d 	bcs.w	800049c <__udivmoddi4+0x2ac>
 8000382:	4299      	cmp	r1, r3
 8000384:	f240 808a 	bls.w	800049c <__udivmoddi4+0x2ac>
 8000388:	3e02      	subs	r6, #2
 800038a:	443b      	add	r3, r7
 800038c:	1a5b      	subs	r3, r3, r1
 800038e:	b281      	uxth	r1, r0
 8000390:	fbb3 f0fe 	udiv	r0, r3, lr
 8000394:	fb0e 3310 	mls	r3, lr, r0, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb00 f308 	mul.w	r3, r0, r8
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x1c4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003aa:	d273      	bcs.n	8000494 <__udivmoddi4+0x2a4>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d971      	bls.n	8000494 <__udivmoddi4+0x2a4>
 80003b0:	3802      	subs	r0, #2
 80003b2:	4439      	add	r1, r7
 80003b4:	1acb      	subs	r3, r1, r3
 80003b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ba:	e778      	b.n	80002ae <__udivmoddi4+0xbe>
 80003bc:	f1c6 0c20 	rsb	ip, r6, #32
 80003c0:	fa03 f406 	lsl.w	r4, r3, r6
 80003c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003c8:	431c      	orrs	r4, r3
 80003ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ce:	fa01 f306 	lsl.w	r3, r1, r6
 80003d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003da:	431f      	orrs	r7, r3
 80003dc:	0c3b      	lsrs	r3, r7, #16
 80003de:	fbb1 f9fe 	udiv	r9, r1, lr
 80003e2:	fa1f f884 	uxth.w	r8, r4
 80003e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ee:	fb09 fa08 	mul.w	sl, r9, r8
 80003f2:	458a      	cmp	sl, r1
 80003f4:	fa02 f206 	lsl.w	r2, r2, r6
 80003f8:	fa00 f306 	lsl.w	r3, r0, r6
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x220>
 80003fe:	1861      	adds	r1, r4, r1
 8000400:	f109 30ff 	add.w	r0, r9, #4294967295
 8000404:	d248      	bcs.n	8000498 <__udivmoddi4+0x2a8>
 8000406:	458a      	cmp	sl, r1
 8000408:	d946      	bls.n	8000498 <__udivmoddi4+0x2a8>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4421      	add	r1, r4
 8000410:	eba1 010a 	sub.w	r1, r1, sl
 8000414:	b2bf      	uxth	r7, r7
 8000416:	fbb1 f0fe 	udiv	r0, r1, lr
 800041a:	fb0e 1110 	mls	r1, lr, r0, r1
 800041e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000422:	fb00 f808 	mul.w	r8, r0, r8
 8000426:	45b8      	cmp	r8, r7
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x24a>
 800042a:	19e7      	adds	r7, r4, r7
 800042c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000430:	d22e      	bcs.n	8000490 <__udivmoddi4+0x2a0>
 8000432:	45b8      	cmp	r8, r7
 8000434:	d92c      	bls.n	8000490 <__udivmoddi4+0x2a0>
 8000436:	3802      	subs	r0, #2
 8000438:	4427      	add	r7, r4
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	eba7 0708 	sub.w	r7, r7, r8
 8000442:	fba0 8902 	umull	r8, r9, r0, r2
 8000446:	454f      	cmp	r7, r9
 8000448:	46c6      	mov	lr, r8
 800044a:	4649      	mov	r1, r9
 800044c:	d31a      	bcc.n	8000484 <__udivmoddi4+0x294>
 800044e:	d017      	beq.n	8000480 <__udivmoddi4+0x290>
 8000450:	b15d      	cbz	r5, 800046a <__udivmoddi4+0x27a>
 8000452:	ebb3 020e 	subs.w	r2, r3, lr
 8000456:	eb67 0701 	sbc.w	r7, r7, r1
 800045a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800045e:	40f2      	lsrs	r2, r6
 8000460:	ea4c 0202 	orr.w	r2, ip, r2
 8000464:	40f7      	lsrs	r7, r6
 8000466:	e9c5 2700 	strd	r2, r7, [r5]
 800046a:	2600      	movs	r6, #0
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	462e      	mov	r6, r5
 8000474:	4628      	mov	r0, r5
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xa0>
 8000478:	4606      	mov	r6, r0
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0x60>
 800047c:	4618      	mov	r0, r3
 800047e:	e6fd      	b.n	800027c <__udivmoddi4+0x8c>
 8000480:	4543      	cmp	r3, r8
 8000482:	d2e5      	bcs.n	8000450 <__udivmoddi4+0x260>
 8000484:	ebb8 0e02 	subs.w	lr, r8, r2
 8000488:	eb69 0104 	sbc.w	r1, r9, r4
 800048c:	3801      	subs	r0, #1
 800048e:	e7df      	b.n	8000450 <__udivmoddi4+0x260>
 8000490:	4608      	mov	r0, r1
 8000492:	e7d2      	b.n	800043a <__udivmoddi4+0x24a>
 8000494:	4660      	mov	r0, ip
 8000496:	e78d      	b.n	80003b4 <__udivmoddi4+0x1c4>
 8000498:	4681      	mov	r9, r0
 800049a:	e7b9      	b.n	8000410 <__udivmoddi4+0x220>
 800049c:	4666      	mov	r6, ip
 800049e:	e775      	b.n	800038c <__udivmoddi4+0x19c>
 80004a0:	4630      	mov	r0, r6
 80004a2:	e74a      	b.n	800033a <__udivmoddi4+0x14a>
 80004a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004a8:	4439      	add	r1, r7
 80004aa:	e713      	b.n	80002d4 <__udivmoddi4+0xe4>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	e724      	b.n	80002fc <__udivmoddi4+0x10c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ustress>:
#define STROBE_DELAY_USEC 400


// Works because TIM1 runs at 1 MHz
void ustress(uint16_t delay_usec)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t curr;

	while (delay_usec > 0)
 80004c2:	e00e      	b.n	80004e2 <ustress+0x2a>
	{
		curr = TIM1->CNT;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <ustress+0x40>)
 80004c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	81fb      	strh	r3, [r7, #14]
		while (curr == TIM1->CNT) // be stuck here
 80004cc:	bf00      	nop
 80004ce:	89fb      	ldrh	r3, [r7, #14]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <ustress+0x40>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d8:	429a      	cmp	r2, r3
 80004da:	d0f8      	beq.n	80004ce <ustress+0x16>
		{

		}
		delay_usec--;
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	3b01      	subs	r3, #1
 80004e0:	80fb      	strh	r3, [r7, #6]
	while (delay_usec > 0)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1ed      	bne.n	80004c4 <ustress+0xc>
	}
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40012c00 	.word	0x40012c00

080004fc <TextLCD_Strobe>:


void TextLCD_Strobe(TextLCDType *lcd)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
	// 0x0E == b# 0000 1110

	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04; // b# 0000 0100
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	b2da      	uxtb	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	b299      	uxth	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	1d5a      	adds	r2, r3, #5
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	f005 f802 	bl	8005530 <HAL_I2C_Master_Transmit>
	ustress(STROBE_DELAY_USEC);
 800052c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000530:	f7ff ffc2 	bl	80004b8 <ustress>
//	 HAL_Delay(1);

	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;	// b# 1111 1011
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	f023 0304 	bic.w	r3, r3, #4
 800053c:	b2da      	uxtb	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	b299      	uxth	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1d5a      	adds	r2, r3, #5
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	f004 ffea 	bl	8005530 <HAL_I2C_Master_Transmit>
	ustress(STROBE_DELAY_USEC);
 800055c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000560:	f7ff ffaa 	bl	80004b8 <ustress>
//	 HAL_Delay(1);
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
	// cmd = 76543210
	// cmd & 0xF0 == cmd & (b# 1111 0000) == 7654____
	//       0x0C == b# 0000 1100

	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	b25b      	sxtb	r3, r3
 800057e:	f003 030c 	and.w	r3, r3, #12
 8000582:	b25a      	sxtb	r2, r3
 8000584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000588:	f023 030f 	bic.w	r3, r3, #15
 800058c:	b25b      	sxtb	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b25b      	sxtb	r3, r3
 8000592:	b2da      	uxtb	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	b299      	uxth	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	1d5a      	adds	r2, r3, #5
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	f004 ffbf 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f7ff ffa2 	bl	80004fc <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	b299      	uxth	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1d5a      	adds	r2, r3, #5
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	f004 ffa1 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff84 	bl	80004fc <TextLCD_Strobe>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	b25b      	sxtb	r3, r3
 800060e:	f003 030d 	and.w	r3, r3, #13
 8000612:	b25a      	sxtb	r2, r3
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	f023 030f 	bic.w	r3, r3, #15
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	b25b      	sxtb	r3, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	b299      	uxth	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	1d5a      	adds	r2, r3, #5
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	f004 ff74 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff57 	bl	80004fc <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	b25b      	sxtb	r3, r3
 8000654:	f003 030d 	and.w	r3, r3, #13
 8000658:	b25a      	sxtb	r2, r3
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	b25b      	sxtb	r3, r3
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	b299      	uxth	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1d5a      	adds	r2, r3, #5
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	f004 ff53 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff36 	bl	80004fc <TextLCD_Strobe>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <TextLCD_Init>:
/**
  *	Initialize the LCD to 4-bit mode.
  *	Set up 2 lines, 5x8 fonts and no cursor blinking.
  */
void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	4613      	mov	r3, r2
 80006a4:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38; // b# 0011 1000
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	b299      	uxth	r1, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1d5a      	adds	r2, r3, #5
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	f004 ff2f 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff ff12 	bl	80004fc <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	b299      	uxth	r1, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	1d5a      	adds	r2, r3, #5
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	f004 ff1f 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	f7ff ff02 	bl	80004fc <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	b299      	uxth	r1, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	1d5a      	adds	r2, r3, #5
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f004 ff0f 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff fef2 	bl	80004fc <TextLCD_Strobe>
	lcd->data = 0x28;	// b# 0010 1000
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2228      	movs	r2, #40	; 0x28
 800071c:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	b299      	uxth	r1, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	1d5a      	adds	r2, r3, #5
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	f004 fefc 	bl	8005530 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fedf 	bl	80004fc <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 800073e:	2128      	movs	r1, #40	; 0x28
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff ff13 	bl	800056c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 8000746:	2108      	movs	r1, #8
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f7ff ff0f 	bl	800056c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 800074e:	2101      	movs	r1, #1
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff ff0b 	bl	800056c <TextLCD_Cmd>

	HAL_Delay(5);
 8000756:	2005      	movs	r0, #5
 8000758:	f003 f832 	bl	80037c0 <HAL_Delay>

	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 800075c:	2106      	movs	r1, #6
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff ff04 	bl	800056c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 8000764:	210c      	movs	r1, #12
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff ff00 	bl	800056c <TextLCD_Cmd>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <TextLCD_Home>:
	TextLCD_Cmd(lcd, cmd);
}

// void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
void TextLCD_Home(TextLCDType *lcd)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	TextLCD_Cmd(lcd, 0x02);
 800077c:	2102      	movs	r1, #2
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fef4 	bl	800056c <TextLCD_Cmd>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <TextLCD_Position>:
{
	TextLCD_Cmd(lcd, 0x01);
}

void TextLCD_Position(TextLCDType *lcd, int x, int y)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 80007ac:	7dfa      	ldrb	r2, [r7, #23]
 80007ae:	7dbb      	ldrb	r3, [r7, #22]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	4619      	mov	r1, r3
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fed7 	bl	800056c <TextLCD_Cmd>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <TextLCD_Putchar>:
	}
}


void TextLCD_Putchar(TextLCDType *lcd, uint8_t ascii_char)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	70fb      	strb	r3, [r7, #3]
	TextLCD_Data(lcd, ascii_char);
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	4619      	mov	r1, r3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff10 	bl	80005fc <TextLCD_Data>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <TextLCD_Puts>:

void TextLCD_Puts(TextLCDType *lcd, char *string)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	int i = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
	while (string[i])
 80007f2:	e00a      	b.n	800080a <TextLCD_Puts+0x26>
	{
		TextLCD_Putchar(lcd, string[i]);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffe1 	bl	80007c6 <TextLCD_Putchar>
		i++;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
	while (string[i])
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ee      	bne.n	80007f4 <TextLCD_Puts+0x10>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f023 0218 	bic.w	r2, r3, #24
 8000834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800085a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000870:	68fb      	ldr	r3, [r7, #12]
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800088c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4313      	orrs	r3, r2
 8000894:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <setRGB>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setRGB(uint8_t r, uint8_t g, uint8_t b){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	460b      	mov	r3, r1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	717b      	strb	r3, [r7, #5]

	r = r ? GPIO_PIN_SET : GPIO_PIN_RESET; // ternary
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	71fb      	strb	r3, [r7, #7]
	g = g ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	71bb      	strb	r3, [r7, #6]
	b = b ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80008de:	797b      	ldrb	r3, [r7, #5]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	717b      	strb	r3, [r7, #5]
//	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, r);
//	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, g);
//	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, b);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, r);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2104      	movs	r1, #4
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <setRGB+0x6c>)
 80008f4:	f004 fd74 	bl	80053e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, g);
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	461a      	mov	r2, r3
 80008fc:	2108      	movs	r1, #8
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <setRGB+0x6c>)
 8000900:	f004 fd6e 	bl	80053e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, b);
 8000904:	797b      	ldrb	r3, [r7, #5]
 8000906:	461a      	mov	r2, r3
 8000908:	2101      	movs	r1, #1
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f004 fd67 	bl	80053e0 <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	48000800 	.word	0x48000800

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b5b0      	push	{r4, r5, r7, lr}
 8000922:	b09a      	sub	sp, #104	; 0x68
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f002 feff 	bl	8003728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f8a3 	bl	8000a74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 ff1a 	bl	8001768 <vTraceEnable>
  chn0 = xTraceRegisterString("chn0");
 8000934:	483e      	ldr	r0, [pc, #248]	; (8000a30 <main+0x110>)
 8000936:	f001 fc87 	bl	8002248 <xTraceRegisterString>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <main+0x114>)
 8000940:	801a      	strh	r2, [r3, #0]
  adc_ch = xTraceRegisterString("adc"); // 3.1.5
 8000942:	483d      	ldr	r0, [pc, #244]	; (8000a38 <main+0x118>)
 8000944:	f001 fc80 	bl	8002248 <xTraceRegisterString>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <main+0x11c>)
 800094e:	801a      	strh	r2, [r3, #0]
  vTracePrintF(chn0, "I am tracing channel %d", 0);
 8000950:	4b38      	ldr	r3, [pc, #224]	; (8000a34 <main+0x114>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	493a      	ldr	r1, [pc, #232]	; (8000a40 <main+0x120>)
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fb89 	bl	8002070 <vTracePrintF>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fa9f 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f000 fa8b 	bl	8000e7c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000966:	f000 fa13 	bl	8000d90 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800096a:	f000 fa5f 	bl	8000e2c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800096e:	f000 f92d 	bl	8000bcc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000972:	f000 f98f 	bl	8000c94 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000976:	f000 f9cd 	bl	8000d14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 800097a:	224e      	movs	r2, #78	; 0x4e
 800097c:	4931      	ldr	r1, [pc, #196]	; (8000a44 <main+0x124>)
 800097e:	4832      	ldr	r0, [pc, #200]	; (8000a48 <main+0x128>)
 8000980:	f7ff fe8a 	bl	8000698 <TextLCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <main+0x12c>)
 8000986:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800098a:	461d      	mov	r5, r3
 800098c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f008 f86f 	bl	8008a7e <osThreadCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a2b      	ldr	r2, [pc, #172]	; (8000a50 <main+0x130>)
 80009a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkyTask */
  osThreadDef(blinkyTask, StartBlinkyTask, osPriorityNormal, 0, 128);
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <main+0x134>)
 80009a8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	6023      	str	r3, [r4, #0]
  blinkyTaskHandle = osThreadCreate(osThread(blinkyTask), NULL);
 80009b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f008 f85e 	bl	8008a7e <osThreadCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <main+0x138>)
 80009c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadADC */
  osThreadDef(ReadADC, StartTaskADC, osPriorityNormal, 0, 128);
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <main+0x13c>)
 80009ca:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	6023      	str	r3, [r4, #0]
  ReadADCHandle = osThreadCreate(osThread(ReadADC), NULL);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f008 f84d 	bl	8008a7e <osThreadCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <main+0x140>)
 80009e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RGB_Led */
  osThreadDef(RGB_Led, StartTaskRGB, osPriorityNormal, 0, 128);
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <main+0x144>)
 80009ec:	f107 0418 	add.w	r4, r7, #24
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	6023      	str	r3, [r4, #0]
  RGB_LedHandle = osThreadCreate(osThread(RGB_Led), NULL);
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 f83c 	bl	8008a7e <osThreadCreate>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <main+0x148>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of WriteLCD */
  osThreadDef(WriteLCD, StartTaskWriteLCD, osPriorityLow, 0, 128);
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <main+0x14c>)
 8000a0e:	1d3c      	adds	r4, r7, #4
 8000a10:	461d      	mov	r5, r3
 8000a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	6023      	str	r3, [r4, #0]
  WriteLCDHandle = osThreadCreate(osThread(WriteLCD), NULL);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f008 f82d 	bl	8008a7e <osThreadCreate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <main+0x150>)
 8000a28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a2a:	f008 f821 	bl	8008a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <main+0x10e>
 8000a30:	0800a4e0 	.word	0x0800a4e0
 8000a34:	2000293c 	.word	0x2000293c
 8000a38:	0800a4e8 	.word	0x0800a4e8
 8000a3c:	20002ac8 	.word	0x20002ac8
 8000a40:	0800a4ec 	.word	0x0800a4ec
 8000a44:	200029b4 	.word	0x200029b4
 8000a48:	20002944 	.word	0x20002944
 8000a4c:	0800a504 	.word	0x0800a504
 8000a50:	20002940 	.word	0x20002940
 8000a54:	0800a518 	.word	0x0800a518
 8000a58:	20002b60 	.word	0x20002b60
 8000a5c:	0800a52c 	.word	0x0800a52c
 8000a60:	20002b5c 	.word	0x20002b5c
 8000a64:	0800a540 	.word	0x0800a540
 8000a68:	20002a00 	.word	0x20002a00
 8000a6c:	0800a554 	.word	0x0800a554
 8000a70:	200029b0 	.word	0x200029b0

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0ae      	sub	sp, #184	; 0xb8
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a7e:	2248      	movs	r2, #72	; 0x48
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fc26 	bl	800a2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2250      	movs	r2, #80	; 0x50
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f009 fc16 	bl	800a2d4 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ab6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f023 0303 	bic.w	r3, r3, #3
 8000ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000acc:	f005 f93e 	bl	8005d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fea5 	bl	8000820 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <SystemClock_Config+0x154>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ade:	4a3a      	ldr	r2, [pc, #232]	; (8000bc8 <SystemClock_Config+0x154>)
 8000ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <SystemClock_Config+0x154>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000af2:	2327      	movs	r3, #39	; 0x27
 8000af4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b04:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fcaf 	bl	800648c <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b34:	f000 fb26 	bl	8001184 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b38:	236f      	movs	r3, #111	; 0x6f
 8000b3a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f822 	bl	8006ba4 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b66:	f000 fb0d 	bl	8001184 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000b6a:	f242 5305 	movw	r3, #9477	; 0x2505
 8000b6e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b70:	2318      	movs	r3, #24
 8000b72:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b7e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b80:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000b86:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000b8a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b90:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fc7b 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000bb8:	f000 fae4 	bl	8001184 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bbc:	f006 fdea 	bl	8007794 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc0:	bf00      	nop
 8000bc2:	37b8      	adds	r7, #184	; 0xb8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58000400 	.word	0x58000400

08000bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <MX_ADC1_Init+0xc0>)
 8000be6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c44:	f002 fff6 	bl	8003c34 <HAL_ADC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c4e:	f000 fa99 	bl	8001184 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_ADC1_Init+0xc4>)
 8000c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c56:	2306      	movs	r3, #6
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5e:	237f      	movs	r3, #127	; 0x7f
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c62:	2304      	movs	r3, #4
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_ADC1_Init+0xbc>)
 8000c70:	f003 fa4e 	bl	8004110 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c7a:	f000 fa83 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20002a64 	.word	0x20002a64
 8000c8c:	50040000 	.word	0x50040000
 8000c90:	04300002 	.word	0x04300002

08000c94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <MX_I2C1_Init+0x78>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x7c>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cd0:	f004 fb9e 	bl	8005410 <HAL_I2C_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cda:	f000 fa53 	bl	8001184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ce2:	f004 fe8d 	bl	8005a00 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 fa4a 	bl	8001184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cf4:	f004 fecf 	bl	8005a96 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f000 fa41 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200029b4 	.word	0x200029b4
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	00707cbb 	.word	0x00707cbb

08000d14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <MX_SPI2_Init+0x78>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d2c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_SPI2_Init+0x74>)
 8000d76:	f006 fe24 	bl	80079c2 <HAL_SPI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000d80:	f000 fa00 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000294c 	.word	0x2000294c
 8000d8c:	40003800 	.word	0x40003800

08000d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <MX_USART1_UART_Init+0x98>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000db8:	220c      	movs	r2, #12
 8000dba:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dda:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000ddc:	f007 f92e 	bl	800803c <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000de6:	f000 f9cd 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000dee:	f007 fd21 	bl	8008834 <HAL_UARTEx_SetTxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000df8:	f000 f9c4 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000e00:	f007 fd56 	bl	80088b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000e0a:	f000 f9bb 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000e10:	f007 fcd7 	bl	80087c2 <HAL_UARTEx_DisableFifoMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000e1a:	f000 f9b3 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20002acc 	.word	0x20002acc
 8000e28:	40013800 	.word	0x40013800

08000e2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <MX_USB_PCD_Init+0x4c>)
 8000e34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e38:	2208      	movs	r2, #8
 8000e3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_USB_PCD_Init+0x48>)
 8000e62:	f004 fe64 	bl	8005b2e <HAL_PCD_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e6c:	f000 f98a 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20002b64 	.word	0x20002b64
 8000e78:	40006800 	.word	0x40006800

08000e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e80:	2004      	movs	r0, #4
 8000e82:	f7ff fce3 	bl	800084c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fce0 	bl	800084c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2105      	movs	r1, #5
 8000e90:	200b      	movs	r0, #11
 8000e92:	f003 ff51 	bl	8004d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e96:	200b      	movs	r0, #11
 8000e98:	f003 ff68 	bl	8004d6c <HAL_NVIC_EnableIRQ>

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff fce2 	bl	800087e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f7ff fcdf 	bl	800087e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fcdc 	bl	800087e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	2008      	movs	r0, #8
 8000ec8:	f7ff fcd9 	bl	800087e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	210c      	movs	r1, #12
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <MX_GPIO_Init+0xd0>)
 8000ed2:	f004 fa85 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f004 fa7f 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2123      	movs	r1, #35	; 0x23
 8000ee6:	4823      	ldr	r0, [pc, #140]	; (8000f74 <MX_GPIO_Init+0xd4>)
 8000ee8:	f004 fa7a 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000eec:	230c      	movs	r3, #12
 8000eee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	481b      	ldr	r0, [pc, #108]	; (8000f70 <MX_GPIO_Init+0xd0>)
 8000f02:	f004 f8fd 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f004 f8ef 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	2310      	movs	r3, #16
 8000f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <MX_GPIO_Init+0xd0>)
 8000f34:	f004 f8e4 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000f38:	2323      	movs	r3, #35	; 0x23
 8000f3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_GPIO_Init+0xd4>)
 8000f4e:	f004 f8d7 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000f52:	2303      	movs	r3, #3
 8000f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_GPIO_Init+0xd8>)
 8000f64:	f004 f8cc 	bl	8005100 <HAL_GPIO_Init>

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000c00 	.word	0x48000c00

08000f7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f007 fda1 	bl	8008acc <osDelay>
 8000f8a:	e7fb      	b.n	8000f84 <StartDefaultTask+0x8>

08000f8c <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void const * argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
//				 // Simply toggle the LED every 500ms, blocking between each toggle.
//				 vToggleLED();
//				 vTaskDelay( xDelay );
//			 }
//		 }
		vTaskDelay(500);
 8000f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f98:	f008 f8d0 	bl	800913c <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <StartBlinkyTask+0x30>)
 8000fa2:	f004 fa1d 	bl	80053e0 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 8000fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000faa:	f008 f8c7 	bl	800913c <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4802      	ldr	r0, [pc, #8]	; (8000fbc <StartBlinkyTask+0x30>)
 8000fb4:	f004 fa14 	bl	80053e0 <HAL_GPIO_WritePin>
		vTaskDelay(500);
 8000fb8:	e7ec      	b.n	8000f94 <StartBlinkyTask+0x8>
 8000fba:	bf00      	nop
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <StartTaskADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void const * argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskADC */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <StartTaskADC+0x40>)
 8000fca:	f002 ff7f 	bl	8003ecc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <StartTaskADC+0x40>)
 8000fd2:	f003 f802 	bl	8003fda <HAL_ADC_PollForConversion>
	  ADC_Data = HAL_ADC_GetValue(&hadc1); // Write data to the buffer.
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <StartTaskADC+0x40>)
 8000fd8:	f003 f88c 	bl	80040f4 <HAL_ADC_GetValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <StartTaskADC+0x44>)
 8000fe2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <StartTaskADC+0x40>)
 8000fe6:	f002 ffc5 	bl	8003f74 <HAL_ADC_Stop>
	  vTaskDelay(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f008 f8a6 	bl	800913c <vTaskDelay>

	  vTracePrintF(adc_ch, "ADC Trace", 0); // Tracing purposes.
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <StartTaskADC+0x48>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4905      	ldr	r1, [pc, #20]	; (800100c <StartTaskADC+0x4c>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f839 	bl	8002070 <vTracePrintF>
	  HAL_ADC_Start(&hadc1);
 8000ffe:	e7e3      	b.n	8000fc8 <StartTaskADC+0x8>
 8001000:	20002a64 	.word	0x20002a64
 8001004:	20002e58 	.word	0x20002e58
 8001008:	20002ac8 	.word	0x20002ac8
 800100c:	0800a568 	.word	0x0800a568

08001010 <StartTaskRGB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRGB */
void StartTaskRGB(void const * argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRGB */

	enum color_state{ RED, YELLOW, BLUE };

	TickType_t period;
	const TickType_t periodTime = 150;
 8001018:	2396      	movs	r3, #150	; 0x96
 800101a:	61fb      	str	r3, [r7, #28]

	TickType_t last_red_tick = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
	TickType_t last_blue_tick = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
	TickType_t now;

	period = xTaskGetTickCount();
 8001024:	f008 fa2a 	bl	800947c <xTaskGetTickCount>
 8001028:	4603      	mov	r3, r0
 800102a:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {

	  uint16_t ADC_DataLocal = ADC_Data; // Local copy of the global ADC value.
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <StartTaskRGB+0xc0>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	837b      	strh	r3, [r7, #26]

	  	  if(ADC_DataLocal > 3000){ // Red.
 8001032:	8b7b      	ldrh	r3, [r7, #26]
 8001034:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001038:	4293      	cmp	r3, r2
 800103a:	d929      	bls.n	8001090 <StartTaskRGB+0x80>

	  		  setRGB(1, 0, 0); // Set color.
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fc35 	bl	80008b0 <setRGB>

	  		  if(ADC_DataLocal < 3000){
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800104c:	4293      	cmp	r3, r2
 800104e:	d838      	bhi.n	80010c2 <StartTaskRGB+0xb2>

				  last_red_tick = xTaskGetTickCount(); // Start value. Begins at the time of vTaskStartScheduler being initialized.
 8001050:	f008 fa14 	bl	800947c <xTaskGetTickCount>
 8001054:	4603      	mov	r3, r0
 8001056:	60fb      	str	r3, [r7, #12]
				  now = 1400;
 8001058:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800105c:	617b      	str	r3, [r7, #20]

				  vTaskDelayUntil( &last_red_tick, now ); // Keep red light on for 1400 ticks.
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	6979      	ldr	r1, [r7, #20]
 8001064:	4618      	mov	r0, r3
 8001066:	f007 ffb3 	bl	8008fd0 <vTaskDelayUntil>

				  setRGB(0,1,0); // Set the blue led.
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fc1e 	bl	80008b0 <setRGB>

				  last_blue_tick = xTaskGetTickCount(); // Start value. Begins at the time of vTaskStartScheduler being initialized.
 8001074:	f008 fa02 	bl	800947c <xTaskGetTickCount>
 8001078:	4603      	mov	r3, r0
 800107a:	60bb      	str	r3, [r7, #8]
				  now = 600;
 800107c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001080:	617b      	str	r3, [r7, #20]

				  vTaskDelayUntil( &last_blue_tick, now ); // Keep blue light on for 600 ticks-
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	6979      	ldr	r1, [r7, #20]
 8001088:	4618      	mov	r0, r3
 800108a:	f007 ffa1 	bl	8008fd0 <vTaskDelayUntil>
 800108e:	e018      	b.n	80010c2 <StartTaskRGB+0xb2>
	  		  }
	  	  }

	  else if(ADC_DataLocal > 2000){ // Yellow.
 8001090:	8b7b      	ldrh	r3, [r7, #26]
 8001092:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001096:	d905      	bls.n	80010a4 <StartTaskRGB+0x94>

		  setRGB(1, 1, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fc07 	bl	80008b0 <setRGB>
 80010a2:	e00e      	b.n	80010c2 <StartTaskRGB+0xb2>
	  }

	  else if(ADC_DataLocal > 1000){ // Green.
 80010a4:	8b7b      	ldrh	r3, [r7, #26]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010aa:	d905      	bls.n	80010b8 <StartTaskRGB+0xa8>

		  setRGB(0, 1, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fbfd 	bl	80008b0 <setRGB>
 80010b6:	e004      	b.n	80010c2 <StartTaskRGB+0xb2>
	  }

	  else setRGB(0, 0, 0); // Off. Working as intended.
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fbf7 	bl	80008b0 <setRGB>

	  vTaskDelayUntil(&period, periodTime); // Set period to 150 ticks.
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	69f9      	ldr	r1, [r7, #28]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 ff81 	bl	8008fd0 <vTaskDelayUntil>
  {
 80010ce:	e7ad      	b.n	800102c <StartTaskRGB+0x1c>
 80010d0:	20002e58 	.word	0x20002e58

080010d4 <StartTaskWriteLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskWriteLCD */
void StartTaskWriteLCD(void const * argument) // OK.
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskWriteLCD */
	char *hello = "Hello";
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <StartTaskWriteLCD+0x80>)
 80010de:	617b      	str	r3, [r7, #20]
	char *world = "Word?";
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <StartTaskWriteLCD+0x84>)
 80010e2:	613b      	str	r3, [r7, #16]

	TickType_t delayLCD;
	const TickType_t periodTime = 700;
 80010e4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80010e8:	60fb      	str	r3, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  delayLCD = xTaskGetTickCount();
 80010ea:	f008 f9c7 	bl	800947c <xTaskGetTickCount>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60bb      	str	r3, [r7, #8]

	  TextLCD_Home(&lcd);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <StartTaskWriteLCD+0x88>)
 80010f4:	f7ff fb3e 	bl	8000774 <TextLCD_Home>
	  TextLCD_Puts(&lcd, hello);
 80010f8:	6979      	ldr	r1, [r7, #20]
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <StartTaskWriteLCD+0x88>)
 80010fc:	f7ff fb72 	bl	80007e4 <TextLCD_Puts>
	  TextLCD_Position(&lcd, 0, 1); // Second row, first character.
 8001100:	2201      	movs	r2, #1
 8001102:	2100      	movs	r1, #0
 8001104:	4815      	ldr	r0, [pc, #84]	; (800115c <StartTaskWriteLCD+0x88>)
 8001106:	f7ff fb41 	bl	800078c <TextLCD_Position>
	  TextLCD_Puts(&lcd, world);
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <StartTaskWriteLCD+0x88>)
 800110e:	f7ff fb69 	bl	80007e4 <TextLCD_Puts>

	  vTaskDelayUntil(&delayLCD, periodTime); // Swap string every 700 ticks.
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f007 ff59 	bl	8008fd0 <vTaskDelayUntil>

	  TextLCD_Home(&lcd);
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <StartTaskWriteLCD+0x88>)
 8001120:	f7ff fb28 	bl	8000774 <TextLCD_Home>
	  TextLCD_Puts(&lcd, world);
 8001124:	6939      	ldr	r1, [r7, #16]
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <StartTaskWriteLCD+0x88>)
 8001128:	f7ff fb5c 	bl	80007e4 <TextLCD_Puts>
	  TextLCD_Position(&lcd, 0, 1); // Second row, first character.
 800112c:	2201      	movs	r2, #1
 800112e:	2100      	movs	r1, #0
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <StartTaskWriteLCD+0x88>)
 8001132:	f7ff fb2b 	bl	800078c <TextLCD_Position>
	  TextLCD_Puts(&lcd, hello);
 8001136:	6979      	ldr	r1, [r7, #20]
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <StartTaskWriteLCD+0x88>)
 800113a:	f7ff fb53 	bl	80007e4 <TextLCD_Puts>

	  vTaskDelayUntil(&delayLCD, periodTime); // Swap string every 700 ticks.
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	4618      	mov	r0, r3
 8001146:	f007 ff43 	bl	8008fd0 <vTaskDelayUntil>

	  TextLCD_Home(&lcd);
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <StartTaskWriteLCD+0x88>)
 800114c:	f7ff fb12 	bl	8000774 <TextLCD_Home>
	  delayLCD = xTaskGetTickCount();
 8001150:	e7cb      	b.n	80010ea <StartTaskWriteLCD+0x16>
 8001152:	bf00      	nop
 8001154:	0800a574 	.word	0x0800a574
 8001158:	0800a57c 	.word	0x0800a57c
 800115c:	20002944 	.word	0x20002944

08001160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001172:	f002 faf9 	bl	8003768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>

0800118e <LL_AHB2_GRP1_EnableClock>:
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800119c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4313      	orrs	r3, r2
 8001208:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4013      	ands	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	210f      	movs	r1, #15
 800122c:	f06f 0001 	mvn.w	r0, #1
 8001230:	f003 fd82 	bl	8004d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x50>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d112      	bne.n	8001280 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800125a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800125e:	f7ff ff96 	bl	800118e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2004      	movs	r0, #4
 8001264:	f7ff ff93 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001268:	2301      	movs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126c:	2303      	movs	r3, #3
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <HAL_ADC_MspInit+0x54>)
 800127c:	f003 ff40 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	50040000 	.word	0x50040000
 800128c:	48000800 	.word	0x48000800

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_I2C_MspInit+0x5c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d117      	bne.n	80012e2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2002      	movs	r0, #2
 80012b4:	f7ff ff6b 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <HAL_I2C_MspInit+0x60>)
 80012d6:	f003 ff13 	bl	8005100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012de:	f7ff ff6f 	bl	80011c0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40005400 	.word	0x40005400
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_SPI_MspInit+0xd4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d154      	bne.n	80013c0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001316:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800131a:	f7ff ff51 	bl	80011c0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2004      	movs	r0, #4
 8001320:	f7ff ff35 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff ff32 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132a:	2302      	movs	r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800133a:	2303      	movs	r3, #3
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <HAL_SPI_MspInit+0xd8>)
 8001346:	f003 fedb 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f003 fec9 	bl	8005100 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_SPI_MspInit+0xe0>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 8001376:	2208      	movs	r2, #8
 8001378:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 800139a:	2220      	movs	r2, #32
 800139c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 80013a6:	f003 fcef 	bl	8004d88 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80013b0:	f7ff fee8 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 80013b8:	659a      	str	r2, [r3, #88]	; 0x58
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_SPI_MspInit+0xdc>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40003800 	.word	0x40003800
 80013cc:	48000800 	.word	0x48000800
 80013d0:	20002a04 	.word	0x20002a04
 80013d4:	40020008 	.word	0x40020008

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x58>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d116      	bne.n	8001428 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013fe:	f7ff fef8 	bl	80011f2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff fec3 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001408:	23c0      	movs	r3, #192	; 0xc0
 800140a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001418:	2307      	movs	r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <HAL_UART_MspInit+0x5c>)
 8001424:	f003 fe6c 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013800 	.word	0x40013800
 8001434:	48000400 	.word	0x48000400

08001438 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_PCD_MspInit+0x5c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d118      	bne.n	800148c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fe97 	bl	800118e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001460:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001464:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001472:	230a      	movs	r3, #10
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f003 fe3e 	bl	8005100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001484:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001488:	f7ff fe9a 	bl	80011c0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40006800 	.word	0x40006800

08001498 <LL_APB2_GRP1_EnableClock>:
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2019      	movs	r0, #25
 80014e2:	f003 fc29 	bl	8004d38 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014e6:	2019      	movs	r0, #25
 80014e8:	f003 fc40 	bl	8004d6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014f0:	f7ff ffd2 	bl	8001498 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f4:	f107 0208 	add.w	r2, r7, #8
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fd3c 	bl	8006f7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001504:	f005 fd24 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 8001508:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_InitTick+0x8c>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	3b01      	subs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_InitTick+0x90>)
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_InitTick+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_InitTick+0x90>)
 8001520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001524:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_InitTick+0x90>)
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_InitTick+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_InitTick+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <HAL_InitTick+0x90>)
 800153a:	f006 fae5 	bl	8007b08 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_InitTick+0x90>)
 8001546:	f006 fb41 	bl	8007bcc <HAL_TIM_Base_Start_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	431bde83 	.word	0x431bde83
 800155c:	20002e5c 	.word	0x20002e5c
 8001560:	40012c00 	.word	0x40012c00

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001596:	f003 fc9f 	bl	8004ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20002a04 	.word	0x20002a04

080015a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015aa:	f006 fb5d 	bl	8007c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20002e5c 	.word	0x20002e5c

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <SystemInit+0x98>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <SystemInit+0x98>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <SystemInit+0x9c>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001602:	f023 0305 	bic.w	r3, r3, #5
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <SystemInit+0xa0>)
 8001624:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <SystemInit+0xa0>)
 800162c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	faf6fefb 	.word	0xfaf6fefb
 8001658:	22041000 	.word	0x22041000

0800165c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800165c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001660:	3304      	adds	r3, #4

08001662 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001662:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001664:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001666:	d3f9      	bcc.n	800165c <CopyDataInit>
  bx lr
 8001668:	4770      	bx	lr

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800166a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800166c:	3004      	adds	r0, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800166e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>
  bx lr
 8001672:	4770      	bx	lr

08001674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001676:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001678:	f7ff ff9e 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopForever+0x8>)
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <LoopForever+0xc>)
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <LoopForever+0x10>)
 8001682:	2300      	movs	r3, #0
 8001684:	f7ff ffed 	bl	8001662 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <LoopForever+0x14>)
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <LoopForever+0x18>)
 800168c:	2300      	movs	r3, #0
 800168e:	f7ff ffee 	bl	800166e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopForever+0x1c>)
 8001694:	490b      	ldr	r1, [pc, #44]	; (80016c4 <LoopForever+0x20>)
 8001696:	2300      	movs	r3, #0
 8001698:	f7ff ffe9 	bl	800166e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800169c:	f008 fde6 	bl	800a26c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80016a0:	f7ff f93e 	bl	8000920 <main>

080016a4 <LoopForever>:

LoopForever:
  b LoopForever
 80016a4:	e7fe      	b.n	80016a4 <LoopForever>
 80016a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80016a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80016ac:	20000004 	.word	0x20000004
 80016b0:	2000007c 	.word	0x2000007c
 80016b4:	0800bb08 	.word	0x0800bb08
  INIT_BSS _sbss, _ebss
 80016b8:	2000007c 	.word	0x2000007c
 80016bc:	2000b5c0 	.word	0x2000b5c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016c0:	20030000 	.word	0x20030000
 80016c4:	20030000 	.word	0x20030000

080016c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_IRQHandler>

080016ca <prvTraceGetTaskNumberLow16>:
	return ucQueueGetQueueType(handle);
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f008 f850 	bl	8009778 <uxTaskGetTaskNumber>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29b      	uxth	r3, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f008 f843 	bl	8009778 <uxTaskGetTaskNumber>
 80016f2:	4603      	mov	r3, r0
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f008 f833 	bl	8009778 <uxTaskGetTaskNumber>
 8001712:	4603      	mov	r3, r0
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	887a      	ldrh	r2, [r7, #2]
 800171a:	4313      	orrs	r3, r2
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f008 f840 	bl	80097a4 <vTaskSetTaskNumber>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f008 f81d 	bl	8009778 <uxTaskGetTaskNumber>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	4313      	orrs	r3, r2
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f008 f82a 	bl	80097a4 <vTaskSetTaskNumber>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800175c:	f008 f8f2 	bl	8009944 <xTaskGetCurrentTaskHandle>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 8001770:	f000 fd8e 	bl	8002290 <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d104      	bne.n	8001784 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 800177a:	f000 fa49 	bl	8001c10 <prvTraceInitTimestamps>
		
		vTraceStart();
 800177e:	f000 fa29 	bl	8001bd4 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 8001782:	e00c      	b.n	800179e <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d103      	bne.n	8001792 <vTraceEnable+0x2a>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <vTraceEnable+0x40>)
 800178c:	f001 fc0a 	bl	8002fa4 <prvTraceError>
}
 8001790:	e005      	b.n	800179e <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <vTraceEnable+0x44>)
 800179a:	f001 fc03 	bl	8002fa4 <prvTraceError>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800a584 	.word	0x0800a584
 80017ac:	0800a5c4 	.word	0x0800a5c4

080017b0 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80017b4:	4b64      	ldr	r3, [pc, #400]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2209      	movs	r2, #9
 80017ba:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	220a      	movs	r2, #10
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	220a      	movs	r2, #10
 80017cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80017d0:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	220a      	movs	r2, #10
 80017d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80017da:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	220f      	movs	r2, #15
 80017e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80017e4:	4b58      	ldr	r3, [pc, #352]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2205      	movs	r2, #5
 80017f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2205      	movs	r2, #5
 80017fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2205      	movs	r2, #5
 8001808:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2205      	movs	r2, #5
 8001812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8001816:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	220f      	movs	r2, #15
 800181c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001820:	4b49      	ldr	r3, [pc, #292]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	220f      	movs	r2, #15
 8001826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	220f      	movs	r2, #15
 8001830:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	220f      	movs	r2, #15
 800183a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	220f      	movs	r2, #15
 8001844:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	220f      	movs	r2, #15
 800184e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	220f      	movs	r2, #15
 8001858:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	220f      	movs	r2, #15
 8001862:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	220f      	movs	r2, #15
 800186c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2210      	movs	r2, #16
 8001880:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2213      	movs	r2, #19
 8001894:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2211      	movs	r2, #17
 800189e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2210      	movs	r2, #16
 80018a8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2213      	movs	r2, #19
 80018b2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2213      	movs	r2, #19
 80018bc:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2213      	movs	r2, #19
 80018c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	22a0      	movs	r2, #160	; 0xa0
 80018da:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018e6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f240 22fd 	movw	r2, #765	; 0x2fd
 80018fe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f240 3252 	movw	r2, #850	; 0x352
 800190a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f240 32a2 	movw	r2, #930	; 0x3a2
 8001916:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f240 4201 	movw	r2, #1025	; 0x401
 8001922:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800192e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <vTraceInitObjectPropertyTable+0x198>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800193a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20002eac 	.word	0x20002eac

0800194c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001958:	2200      	movs	r2, #0
 800195a:	825a      	strh	r2, [r3, #18]
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800195e:	8a5a      	ldrh	r2, [r3, #18]
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001962:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001966:	220a      	movs	r2, #10
 8001968:	829a      	strh	r2, [r3, #20]
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800196c:	8a9a      	ldrh	r2, [r3, #20]
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001970:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001974:	2214      	movs	r2, #20
 8001976:	82da      	strh	r2, [r3, #22]
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800197a:	8ada      	ldrh	r2, [r3, #22]
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800197e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001982:	221e      	movs	r2, #30
 8001984:	831a      	strh	r2, [r3, #24]
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001988:	8b1a      	ldrh	r2, [r3, #24]
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800198c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001990:	222d      	movs	r2, #45	; 0x2d
 8001992:	835a      	strh	r2, [r3, #26]
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001996:	8b5a      	ldrh	r2, [r3, #26]
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800199a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 800199e:	2232      	movs	r2, #50	; 0x32
 80019a0:	839a      	strh	r2, [r3, #28]
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019a4:	8b9a      	ldrh	r2, [r3, #28]
 80019a6:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019a8:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019ac:	2237      	movs	r2, #55	; 0x37
 80019ae:	83da      	strh	r2, [r3, #30]
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019b2:	8bda      	ldrh	r2, [r3, #30]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019b6:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019ba:	223c      	movs	r2, #60	; 0x3c
 80019bc:	841a      	strh	r2, [r3, #32]
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019c0:	8c1a      	ldrh	r2, [r3, #32]
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019c4:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	845a      	strh	r2, [r3, #34]	; 0x22
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019ce:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019d2:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019d6:	2209      	movs	r2, #9
 80019d8:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019dc:	2213      	movs	r2, #19
 80019de:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019e2:	221d      	movs	r2, #29
 80019e4:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019e8:	222c      	movs	r2, #44	; 0x2c
 80019ea:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019ee:	2231      	movs	r2, #49	; 0x31
 80019f0:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019f4:	2236      	movs	r2, #54	; 0x36
 80019f6:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 80019fa:	223b      	movs	r2, #59	; 0x3b
 80019fc:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001a06:	2245      	movs	r2, #69	; 0x45
 8001a08:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	e009      	b.n	8001a24 <vTraceInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3318      	adds	r3, #24
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d9f2      	bls.n	8001a10 <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e008      	b.n	8001a42 <vTraceInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <vTraceInitObjectHandleStack+0x10c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	3348      	adds	r3, #72	; 0x48
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b45      	cmp	r3, #69	; 0x45
 8001a46:	d9f3      	bls.n	8001a30 <vTraceInitObjectHandleStack+0xe4>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000b520 	.word	0x2000b520

08001a5c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d827      	bhi.n	8001abc <pszTraceGetErrorNotEnoughHandles+0x60>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001aa9 	.word	0x08001aa9
 8001a78:	08001aa1 	.word	0x08001aa1
 8001a7c:	08001aa5 	.word	0x08001aa5
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001aad 	.word	0x08001aad
 8001a8c:	08001ab1 	.word	0x08001ab1
 8001a90:	08001ab5 	.word	0x08001ab5
 8001a94:	08001ab9 	.word	0x08001ab9
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001a9a:	e010      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001a9e:	e00e      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001aa2:	e00c      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001aa6:	e00a      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001aaa:	e008      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001aae:	e006      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001ab2:	e004      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001ab6:	e002      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001aba:	e000      	b.n	8001abe <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	0800a5f8 	.word	0x0800a5f8
 8001ad0:	0800a640 	.word	0x0800a640
 8001ad4:	0800a688 	.word	0x0800a688
 8001ad8:	0800a6dc 	.word	0x0800a6dc
 8001adc:	0800a728 	.word	0x0800a728
 8001ae0:	0800a774 	.word	0x0800a774
 8001ae4:	0800a7c0 	.word	0x0800a7c0
 8001ae8:	0800a814 	.word	0x0800a814
 8001aec:	0800a86c 	.word	0x0800a86c
 8001af0:	0800a8c8 	.word	0x0800a8c8

08001af4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <uiTraceStart+0xcc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10a      	bne.n	8001b1c <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <uiTraceStart+0xcc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <uiTraceStart+0x24>
 8001b0e:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <uiTraceStart+0xd0>)
 8001b10:	f001 fa48 	bl	8002fa4 <prvTraceError>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e04e      	b.n	8001bb6 <uiTraceStart+0xc2>
		return 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e04c      	b.n	8001bb6 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <uiTraceStart+0xcc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <uiTraceStart+0x36>
		return 1; /* Already running */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e045      	b.n	8001bb6 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <uiTraceStart+0xd4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d13e      	bne.n	8001bb0 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b32:	f3ef 8310 	mrs	r3, PRIMASK
 8001b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b38:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f383 8810 	msr	PRIMASK, r3
}
 8001b46:	bf00      	nop
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <uiTraceStart+0xd8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <uiTraceStart+0xd8>)
 8001b50:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <uiTraceStart+0xcc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001b5a:	f7ff fdfd 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fdb2 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d110      	bne.n	8001b92 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f001 f897 	bl	8002ca4 <prvTraceGetObjectHandle>
 8001b76:	4603      	mov	r3, r0
 8001b78:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <uiTraceStart+0xdc>)
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2003      	movs	r0, #3
 8001b82:	f001 f963 	bl	8002e4c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 ff2f 	bl	80029f0 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 feb9 	bl	800290c <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <uiTraceStart+0xd8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <uiTraceStart+0xd8>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f383 8810 	msr	PRIMASK, r3
}
 8001bae:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <uiTraceStart+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20002eac 	.word	0x20002eac
 8001bc4:	0800a8f8 	.word	0x0800a8f8
 8001bc8:	2000b518 	.word	0x2000b518
 8001bcc:	200000ac 	.word	0x200000ac
 8001bd0:	0800a93c 	.word	0x0800a93c

08001bd4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8001bd8:	f7ff ff8c 	bl	8001af4 <uiTraceStart>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <vTraceStop+0x28>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <vTraceStop+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <vTraceStop+0x2c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <vTraceStop+0x2c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4798      	blx	r3
	}
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20002eac 	.word	0x20002eac
 8001c0c:	200000b8 	.word	0x200000b8

08001c10 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <prvTraceInitTimestamps+0x18>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <prvTraceInitTimestamps+0x1c>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e0001004 	.word	0xe0001004
 8001c2c:	2000b51c 	.word	0x2000b51c

08001c30 <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	70bb      	strb	r3, [r7, #2]
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <writeInt8+0x20>
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <writeInt8+0x4c>)
 8001c48:	f001 f9ac 	bl	8002fa4 <prvTraceError>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e011      	b.n	8001c74 <writeInt8+0x44>

	if (i >= MAX_ARG_SIZE)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b23      	cmp	r3, #35	; 0x23
 8001c54:	d901      	bls.n	8001c5a <writeInt8+0x2a>
	{
		return 255;
 8001c56:	23ff      	movs	r3, #255	; 0xff
 8001c58:	e00c      	b.n	8001c74 <writeInt8+0x44>
	}

	((uint8_t*)buffer)[i] = value;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	78ba      	ldrb	r2, [r7, #2]
 8001c62:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b23      	cmp	r3, #35	; 0x23
 8001c68:	d901      	bls.n	8001c6e <writeInt8+0x3e>
	{
		return 255;
 8001c6a:	23ff      	movs	r3, #255	; 0xff
 8001c6c:	e002      	b.n	8001c74 <writeInt8+0x44>
	}

	return ((uint8_t) (i + 1));
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2db      	uxtb	r3, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800ab50 	.word	0x0800ab50

08001c80 <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	803b      	strh	r3, [r7, #0]
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d111      	bne.n	8001cba <writeInt16+0x3a>
 8001c96:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <writeInt16+0x70>)
 8001c98:	f001 f984 	bl	8002fa4 <prvTraceError>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e022      	b.n	8001ce6 <writeInt16+0x66>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	2b23      	cmp	r3, #35	; 0x23
 8001ca4:	d901      	bls.n	8001caa <writeInt16+0x2a>
		{
			return 255;
 8001ca6:	23ff      	movs	r3, #255	; 0xff
 8001ca8:	e01d      	b.n	8001ce6 <writeInt16+0x66>
		}

		((uint8_t*)buffer)[i] = 0;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
		i++;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	70fb      	strb	r3, [r7, #3]
	while ((i % 2) != 0)
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ec      	bne.n	8001ca0 <writeInt16+0x20>
	}

	if (i + 2 > MAX_ARG_SIZE)
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	2b22      	cmp	r3, #34	; 0x22
 8001cca:	d901      	bls.n	8001cd0 <writeInt16+0x50>
	{
		return 255;
 8001ccc:	23ff      	movs	r3, #255	; 0xff
 8001cce:	e00a      	b.n	8001ce6 <writeInt16+0x66>
	}

	((uint16_t*)buffer)[i/2] = value;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	883a      	ldrh	r2, [r7, #0]
 8001cde:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	b2db      	uxtb	r3, r3
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0800ab78 	.word	0x0800ab78

08001cf4 <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d111      	bne.n	8001d2c <writeInt32+0x38>
 8001d08:	4815      	ldr	r0, [pc, #84]	; (8001d60 <writeInt32+0x6c>)
 8001d0a:	f001 f94b 	bl	8002fa4 <prvTraceError>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e022      	b.n	8001d58 <writeInt32+0x64>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	2b23      	cmp	r3, #35	; 0x23
 8001d16:	d901      	bls.n	8001d1c <writeInt32+0x28>
		{
			return 255;
 8001d18:	23ff      	movs	r3, #255	; 0xff
 8001d1a:	e01d      	b.n	8001d58 <writeInt32+0x64>
		}

		((uint8_t*)buffer)[i] = 0;
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
		i++;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	72fb      	strb	r3, [r7, #11]
	while ((i % 4) != 0)
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ec      	bne.n	8001d12 <writeInt32+0x1e>
	}

	if (i + 4 > MAX_ARG_SIZE)
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d901      	bls.n	8001d42 <writeInt32+0x4e>
	{
		return 255;
 8001d3e:	23ff      	movs	r3, #255	; 0xff
 8001d40:	e00a      	b.n	8001d58 <writeInt32+0x64>
	}

	((uint32_t*)buffer)[i/4] = value;
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	3304      	adds	r3, #4
 8001d56:	b2db      	uxtb	r3, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800aba4 	.word	0x0800aba4

08001d64 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	70fb      	strb	r3, [r7, #3]
	uint16_t formatStrIndex = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	82fb      	strh	r3, [r7, #22]
	uint8_t argCounter = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	757b      	strb	r3, [r7, #21]
	uint8_t i = byteOffset;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	753b      	strb	r3, [r7, #20]

	while (formatStr[formatStrIndex] != '\0')
 8001d7e:	e161      	b.n	8002044 <prvTraceUserEventFormat+0x2e0>
	{
		if (formatStr[formatStrIndex] == '%')
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b25      	cmp	r3, #37	; 0x25
 8001d8a:	f040 8150 	bne.w	800202e <prvTraceUserEventFormat+0x2ca>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 8001d8e:	8afb      	ldrh	r3, [r7, #22]
 8001d90:	3301      	adds	r3, #1
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b25      	cmp	r3, #37	; 0x25
 8001d9a:	d103      	bne.n	8001da4 <prvTraceUserEventFormat+0x40>
			{
				formatStrIndex += 2;
 8001d9c:	8afb      	ldrh	r3, [r7, #22]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	82fb      	strh	r3, [r7, #22]
				continue;
 8001da2:	e14f      	b.n	8002044 <prvTraceUserEventFormat+0x2e0>
			}

			/* We found a possible argument */
			argCounter++;
 8001da4:	7d7b      	ldrb	r3, [r7, #21]
 8001da6:	3301      	adds	r3, #1
 8001da8:	757b      	strb	r3, [r7, #21]

			formatStrIndex++;
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	3301      	adds	r3, #1
 8001dae:	82fb      	strh	r3, [r7, #22]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 8001db0:	e002      	b.n	8001db8 <prvTraceUserEventFormat+0x54>
				formatStrIndex++;
 8001db2:	8afb      	ldrh	r3, [r7, #22]
 8001db4:	3301      	adds	r3, #1
 8001db6:	82fb      	strh	r3, [r7, #22]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 8001db8:	8afb      	ldrh	r3, [r7, #22]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8001dc2:	d905      	bls.n	8001dd0 <prvTraceUserEventFormat+0x6c>
 8001dc4:	8afb      	ldrh	r3, [r7, #22]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b39      	cmp	r3, #57	; 0x39
 8001dce:	d9f0      	bls.n	8001db2 <prvTraceUserEventFormat+0x4e>
 8001dd0:	8afb      	ldrh	r3, [r7, #22]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b23      	cmp	r3, #35	; 0x23
 8001dda:	d0ea      	beq.n	8001db2 <prvTraceUserEventFormat+0x4e>
 8001ddc:	8afb      	ldrh	r3, [r7, #22]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b2e      	cmp	r3, #46	; 0x2e
 8001de6:	d0e4      	beq.n	8001db2 <prvTraceUserEventFormat+0x4e>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 8001de8:	8afb      	ldrh	r3, [r7, #22]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 812f 	beq.w	8002054 <prvTraceUserEventFormat+0x2f0>
			{
				switch (formatStr[formatStrIndex])
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3b58      	subs	r3, #88	; 0x58
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	f200 8107 	bhi.w	8002014 <prvTraceUserEventFormat+0x2b0>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <prvTraceUserEventFormat+0xa8>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001ea9 	.word	0x08001ea9
 8001e10:	08002015 	.word	0x08002015
 8001e14:	08002015 	.word	0x08002015
 8001e18:	08002015 	.word	0x08002015
 8001e1c:	08002015 	.word	0x08002015
 8001e20:	08002015 	.word	0x08002015
 8001e24:	08002015 	.word	0x08002015
 8001e28:	08002015 	.word	0x08002015
 8001e2c:	08002015 	.word	0x08002015
 8001e30:	08002015 	.word	0x08002015
 8001e34:	08001fc7 	.word	0x08001fc7
 8001e38:	08002015 	.word	0x08002015
 8001e3c:	08001e91 	.word	0x08001e91
 8001e40:	08002015 	.word	0x08002015
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08002015 	.word	0x08002015
 8001e4c:	08001f79 	.word	0x08001f79
 8001e50:	08002015 	.word	0x08002015
 8001e54:	08002015 	.word	0x08002015
 8001e58:	08002015 	.word	0x08002015
 8001e5c:	08001f0f 	.word	0x08001f0f
 8001e60:	08002015 	.word	0x08002015
 8001e64:	08002015 	.word	0x08002015
 8001e68:	08002015 	.word	0x08002015
 8001e6c:	08002015 	.word	0x08002015
 8001e70:	08002015 	.word	0x08002015
 8001e74:	08002015 	.word	0x08002015
 8001e78:	08001ec1 	.word	0x08001ec1
 8001e7c:	08002015 	.word	0x08002015
 8001e80:	08001ea9 	.word	0x08001ea9
 8001e84:	08002015 	.word	0x08002015
 8001e88:	08002015 	.word	0x08002015
 8001e8c:	08001ea9 	.word	0x08001ea9
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1d1a      	adds	r2, r3, #4
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8001e98:	7d3b      	ldrb	r3, [r7, #20]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <writeInt32>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	753b      	strb	r3, [r7, #20]
						break;
 8001ea6:	e0ba      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1d1a      	adds	r2, r3, #4
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8001eb0:	7d3b      	ldrb	r3, [r7, #20]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff1d 	bl	8001cf4 <writeInt32>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	753b      	strb	r3, [r7, #20]
						break;
 8001ebe:	e0ae      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
					case 's':
						i = writeInt16(	buffer,
										i,
										xTraceRegisterString((char*)va_arg(vl, char*)));
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	681b      	ldr	r3, [r3, #0]
						i = writeInt16(	buffer,
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f9bd 	bl	8002248 <xTraceRegisterString>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	7d3b      	ldrb	r3, [r7, #20]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fed2 	bl	8001c80 <writeInt16>
 8001edc:	4603      	mov	r3, r0
 8001ede:	753b      	strb	r3, [r7, #20]
						break;
 8001ee0:	e09d      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3307      	adds	r3, #7
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	f103 0208 	add.w	r2, r3, #8
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
						i = writeInt32(	buffer,
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe f942 	bl	8000180 <__aeabi_d2uiz>
 8001efc:	4602      	mov	r2, r0
 8001efe:	7d3b      	ldrb	r3, [r7, #20]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fef6 	bl	8001cf4 <writeInt32>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	753b      	strb	r3, [r7, #20]
						break;
 8001f0c:	e087      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
#endif
					case 'l':
						formatStrIndex++;
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	3301      	adds	r3, #1
 8001f12:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b66      	cmp	r3, #102	; 0x66
 8001f1e:	d17d      	bne.n	800201c <prvTraceUserEventFormat+0x2b8>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3307      	adds	r3, #7
 8001f24:	f023 0307 	bic.w	r3, r3, #7
 8001f28:	f103 0208 	add.w	r2, r3, #8
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe f923 	bl	8000180 <__aeabi_d2uiz>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	7d3b      	ldrb	r3, [r7, #20]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fed7 	bl	8001cf4 <writeInt32>
 8001f46:	4603      	mov	r3, r0
 8001f48:	753b      	strb	r3, [r7, #20]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	f103 0208 	add.w	r2, r3, #8
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe f90e 	bl	8000180 <__aeabi_d2uiz>
 8001f64:	4602      	mov	r2, r0
 8001f66:	7d3b      	ldrb	r3, [r7, #20]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fec2 	bl	8001cf4 <writeInt32>
 8001f70:	4603      	mov	r3, r0
 8001f72:	753b      	strb	r3, [r7, #20]
								break;
 8001f74:	bf00      	nop
#endif
						}
						break;
 8001f76:	e051      	b.n	800201c <prvTraceUserEventFormat+0x2b8>
					case 'h':
						formatStrIndex++;
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 8001f7e:	8afb      	ldrh	r3, [r7, #22]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d002      	beq.n	8001f90 <prvTraceUserEventFormat+0x22c>
 8001f8a:	2b75      	cmp	r3, #117	; 0x75
 8001f8c:	d00d      	beq.n	8001faa <prvTraceUserEventFormat+0x246>
								i = writeInt16(	buffer,
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;
						}
						break;
 8001f8e:	e046      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
												(uint16_t)va_arg(vl, uint32_t));
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	7d3b      	ldrb	r3, [r7, #20]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fe6e 	bl	8001c80 <writeInt16>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	753b      	strb	r3, [r7, #20]
								break;
 8001fa8:	e00c      	b.n	8001fc4 <prvTraceUserEventFormat+0x260>
												(uint16_t)va_arg(vl, uint32_t));
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1d1a      	adds	r2, r3, #4
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	7d3b      	ldrb	r3, [r7, #20]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fe61 	bl	8001c80 <writeInt16>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	753b      	strb	r3, [r7, #20]
								break;
 8001fc2:	bf00      	nop
						break;
 8001fc4:	e02b      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
					case 'b':
						formatStrIndex++;
 8001fc6:	8afb      	ldrh	r3, [r7, #22]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d002      	beq.n	8001fde <prvTraceUserEventFormat+0x27a>
 8001fd8:	2b75      	cmp	r3, #117	; 0x75
 8001fda:	d00d      	beq.n	8001ff8 <prvTraceUserEventFormat+0x294>
								i = writeInt8(	buffer,
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;
						}
						break;
 8001fdc:	e01f      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
												(uint8_t)va_arg(vl, uint32_t));
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1d1a      	adds	r2, r3, #4
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	7d3b      	ldrb	r3, [r7, #20]
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fe1f 	bl	8001c30 <writeInt8>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	753b      	strb	r3, [r7, #20]
								break;
 8001ff6:	e00c      	b.n	8002012 <prvTraceUserEventFormat+0x2ae>
												(uint8_t)va_arg(vl, uint32_t));
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1d1a      	adds	r2, r3, #4
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8002000:	b2da      	uxtb	r2, r3
 8002002:	7d3b      	ldrb	r3, [r7, #20]
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fe12 	bl	8001c30 <writeInt8>
 800200c:	4603      	mov	r3, r0
 800200e:	753b      	strb	r3, [r7, #20]
								break;
 8002010:	bf00      	nop
						break;
 8002012:	e004      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 8002014:	7d7b      	ldrb	r3, [r7, #21]
 8002016:	3b01      	subs	r3, #1
 8002018:	757b      	strb	r3, [r7, #21]
						break;
 800201a:	e000      	b.n	800201e <prvTraceUserEventFormat+0x2ba>
						break;
 800201c:	bf00      	nop
				}

				if (argCounter > 15)
 800201e:	7d7b      	ldrb	r3, [r7, #21]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d904      	bls.n	800202e <prvTraceUserEventFormat+0x2ca>
				{
					prvTraceError("vTracePrintF - Too many arguments, max 15 allowed!");
 8002024:	4810      	ldr	r0, [pc, #64]	; (8002068 <prvTraceUserEventFormat+0x304>)
 8002026:	f000 ffbd 	bl	8002fa4 <prvTraceError>
					return 0;
 800202a:	2300      	movs	r3, #0
 800202c:	e018      	b.n	8002060 <prvTraceUserEventFormat+0x2fc>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 800202e:	8afb      	ldrh	r3, [r7, #22]
 8002030:	3301      	adds	r3, #1
 8002032:	82fb      	strh	r3, [r7, #22]
		if (i == 255)
 8002034:	7d3b      	ldrb	r3, [r7, #20]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d104      	bne.n	8002044 <prvTraceUserEventFormat+0x2e0>
		{
			prvTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
 800203a:	480c      	ldr	r0, [pc, #48]	; (800206c <prvTraceUserEventFormat+0x308>)
 800203c:	f000 ffb2 	bl	8002fa4 <prvTraceError>
			return 0;
 8002040:	2300      	movs	r3, #0
 8002042:	e00d      	b.n	8002060 <prvTraceUserEventFormat+0x2fc>
	while (formatStr[formatStrIndex] != '\0')
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f ae97 	bne.w	8001d80 <prvTraceUserEventFormat+0x1c>
 8002052:	e000      	b.n	8002056 <prvTraceUserEventFormat+0x2f2>
				break;
 8002054:	bf00      	nop
		}
	}
	return (uint8_t)(i+3)/4;
 8002056:	7d3b      	ldrb	r3, [r7, #20]
 8002058:	3303      	adds	r3, #3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	b2db      	uxtb	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	0800abd0 	.word	0x0800abd0
 800206c:	0800ac04 	.word	0x0800ac04

08002070 <vTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
void vTracePrintF(traceString eventLabel, const char* formatStr, ...)
{
 8002070:	b40e      	push	{r1, r2, r3}
 8002072:	b580      	push	{r7, lr}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	80fb      	strh	r3, [r7, #6]
	va_list vl;

	va_start(vl, formatStr);
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	60fb      	str	r3, [r7, #12]
	vTraceVPrintF(eventLabel, formatStr, vl);
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	69f9      	ldr	r1, [r7, #28]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f807 	bl	800209c <vTraceVPrintF>
	va_end(vl);
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002098:	b003      	add	sp, #12
 800209a:	4770      	bx	lr

0800209c <vTraceVPrintF>:
 * See vTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
void vTraceVPrintF(traceString eventLabel, const char* formatStr, va_list vl)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	; 0x50
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	81fb      	strh	r3, [r7, #14]
	uint32_t noOfSlots;
	UserEvent* ue1;
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != NULL, "vTraceVPrintF: formatStr == NULL", TRC_UNUSED);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <vTraceVPrintF+0x1c>
 80020b0:	4861      	ldr	r0, [pc, #388]	; (8002238 <vTraceVPrintF+0x19c>)
 80020b2:	f000 ff77 	bl	8002fa4 <prvTraceError>
 80020b6:	e0bb      	b.n	8002230 <vTraceVPrintF+0x194>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b8:	f3ef 8310 	mrs	r3, PRIMASK
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80020be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

	trcCRITICAL_SECTION_BEGIN();
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c2:	2301      	movs	r3, #1
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	f383 8810 	msr	PRIMASK, r3
}
 80020cc:	bf00      	nop
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <vTraceVPrintF+0x1a0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a59      	ldr	r2, [pc, #356]	; (800223c <vTraceVPrintF+0x1a0>)
 80020d6:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <vTraceVPrintF+0x1a4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 809b 	beq.w	800221a <vTraceVPrintF+0x17e>
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <vTraceVPrintF+0x1a8>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8096 	beq.w	800221a <vTraceVPrintF+0x17e>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 80020f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f6:	22aa      	movs	r2, #170	; 0xaa
 80020f8:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 80020fa:	f107 0214 	add.w	r2, r7, #20
 80020fe:	2304      	movs	r3, #4
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f7ff fe2e 	bl	8001d64 <prvTraceUserEventFormat>
 8002108:	4603      	mov	r3, r0
 800210a:	647b      	str	r3, [r7, #68]	; 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	4619      	mov	r1, r3
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f000 fef5 	bl	8002f00 <prvTraceOpenSymbol>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211c:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 800211e:	20ff      	movs	r0, #255	; 0xff
 8002120:	f001 f822 	bl	8003168 <prvTraceGetDTS>
 8002124:	4603      	mov	r3, r0
 8002126:	b2da      	uxtb	r2, r3
 8002128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212a:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <vTraceVPrintF+0x1a4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	2b00      	cmp	r3, #0
 8002134:	d071      	beq.n	800221a <vTraceVPrintF+0x17e>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	441a      	add	r2, r3
 8002140:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	429a      	cmp	r2, r3
 8002148:	d91d      	bls.n	8002186 <vTraceVPrintF+0xea>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <vTraceVPrintF+0x1a4>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800215a:	4413      	add	r3, r2
 800215c:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 800216e:	461a      	mov	r2, r3
 8002170:	2100      	movs	r1, #0
 8002172:	f008 f8af 	bl	800a2d4 <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 8002176:	4b32      	ldr	r3, [pc, #200]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 800217e:	4b30      	ldr	r3, [pc, #192]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	2b00      	cmp	r3, #0
 800218e:	d041      	beq.n	8002214 <vTraceVPrintF+0x178>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ff31 	bl	8002ffc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <vTraceVPrintF+0x1a4>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80021aa:	4413      	add	r3, r2
 80021ac:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 80021ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b0:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	f008 f87e 	bl	800a2b8 <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 80021bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021be:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 80021cc:	3969      	subs	r1, #105	; 0x69
 80021ce:	b2c9      	uxtb	r1, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 80021d0:	4413      	add	r3, r2
 80021d2:	460a      	mov	r2, r1
 80021d4:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69d9      	ldr	r1, [r3, #28]
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e4:	440a      	add	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6959      	ldr	r1, [r3, #20]
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021f4:	440a      	add	r2, r1
 80021f6:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <vTraceVPrintF+0x1a4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002202:	d307      	bcc.n	8002214 <vTraceVPrintF+0x178>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <vTraceVPrintF+0x1a4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <vTraceVPrintF+0x1a4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f000 fef1 	bl	8002ffc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <vTraceVPrintF+0x1a0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b01      	subs	r3, #1
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <vTraceVPrintF+0x1a0>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	f383 8810 	msr	PRIMASK, r3
}
 800222e:	bf00      	nop
		channel = xTraceRegisterUBChannel(eventLabel, formatLabel);

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif
}
 8002230:	3750      	adds	r7, #80	; 0x50
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	0800ac40 	.word	0x0800ac40
 800223c:	200000ac 	.word	0x200000ac
 8002240:	20002eac 	.word	0x20002eac
 8002244:	200000b4 	.word	0x200000b4

08002248 <xTraceRegisterString>:
 *	 ...
 *	 vTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceString xTraceRegisterString(const char* label)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	TRACE_ASSERT(label != NULL, "xTraceRegisterString: label == NULL", (traceString)0);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <xTraceRegisterString+0x18>
 8002256:	480b      	ldr	r0, [pc, #44]	; (8002284 <xTraceRegisterString+0x3c>)
 8002258:	f000 fea4 	bl	8002fa4 <prvTraceError>
 800225c:	2300      	movs	r3, #0
 800225e:	e00d      	b.n	800227c <xTraceRegisterString+0x34>
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <xTraceRegisterString+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <xTraceRegisterString+0x2a>
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <xTraceRegisterString+0x44>)
 800226a:	f000 fe9b 	bl	8002fa4 <prvTraceError>
 800226e:	2300      	movs	r3, #0
 8002270:	e004      	b.n	800227c <xTraceRegisterString+0x34>
	return prvTraceOpenSymbol(label, 0);
 8002272:	2100      	movs	r1, #0
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fe43 	bl	8002f00 <prvTraceOpenSymbol>
 800227a:	4603      	mov	r3, r0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	0800ac70 	.word	0x0800ac70
 8002288:	20002eac 	.word	0x20002eac
 800228c:	0800a948 	.word	0x0800a948

08002290 <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8002294:	4b86      	ldr	r3, [pc, #536]	; (80024b0 <vTraceInitialize+0x220>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8106 	bne.w	80024aa <vTraceInitialize+0x21a>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <vTraceInitialize+0x224>)
 80022a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a4:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80022a6:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <vTraceInitialize+0x228>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <vTraceInitialize+0x22c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80022b2:	4b83      	ldr	r3, [pc, #524]	; (80024c0 <vTraceInitialize+0x230>)
 80022b4:	4a83      	ldr	r2, [pc, #524]	; (80024c4 <vTraceInitialize+0x234>)
 80022b6:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80022b8:	4b83      	ldr	r3, [pc, #524]	; (80024c8 <vTraceInitialize+0x238>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a83      	ldr	r2, [pc, #524]	; (80024cc <vTraceInitialize+0x23c>)
 80022be:	6013      	str	r3, [r2, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <vTraceInitialize+0x230>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f248 6264 	movw	r2, #34404	; 0x8664
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f008 f802 	bl	800a2d4 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <vTraceInitialize+0x230>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 80022d8:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 80022da:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <vTraceInitialize+0x230>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2207      	movs	r2, #7
 80022e0:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80022e2:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <vTraceInitialize+0x230>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 80022ea:	4b75      	ldr	r3, [pc, #468]	; (80024c0 <vTraceInitialize+0x230>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f248 6264 	movw	r2, #34404	; 0x8664
 80022f2:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80022f4:	4b72      	ldr	r3, [pc, #456]	; (80024c0 <vTraceInitialize+0x230>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022fc:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80022fe:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <vTraceInitialize+0x230>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8002308:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <vTraceInitialize+0x230>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8002310:	4b6b      	ldr	r3, [pc, #428]	; (80024c0 <vTraceInitialize+0x230>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8002318:	f7ff fa4a 	bl	80017b0 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 800231c:	4b68      	ldr	r3, [pc, #416]	; (80024c0 <vTraceInitialize+0x230>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8002324:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <vTraceInitialize+0x230>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002330:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8002334:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <vTraceInitialize+0x230>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 800233e:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <vTraceInitialize+0x230>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8002346:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 800234a:	4b5d      	ldr	r3, [pc, #372]	; (80024c0 <vTraceInitialize+0x230>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002352:	2250      	movs	r2, #80	; 0x50
 8002354:	495e      	ldr	r1, [pc, #376]	; (80024d0 <vTraceInitialize+0x240>)
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd52 	bl	8002e00 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <vTraceInitialize+0x230>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8002364:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 8002368:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <vTraceInitialize+0x230>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 8002370:	3358      	adds	r3, #88	; 0x58
 8002372:	220a      	movs	r2, #10
 8002374:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 8002376:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <vTraceInitialize+0x230>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800237e:	3359      	adds	r3, #89	; 0x59
 8002380:	220b      	movs	r2, #11
 8002382:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <vTraceInitialize+0x230>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800238c:	335a      	adds	r3, #90	; 0x5a
 800238e:	220c      	movs	r2, #12
 8002390:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 8002392:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <vTraceInitialize+0x230>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800239a:	335b      	adds	r3, #91	; 0x5b
 800239c:	220d      	movs	r2, #13
 800239e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 80023a0:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <vTraceInitialize+0x230>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023a8:	335c      	adds	r3, #92	; 0x5c
 80023aa:	2271      	movs	r2, #113	; 0x71
 80023ac:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 80023ae:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <vTraceInitialize+0x230>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023b6:	335d      	adds	r3, #93	; 0x5d
 80023b8:	2272      	movs	r2, #114	; 0x72
 80023ba:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 80023bc:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <vTraceInitialize+0x230>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023c4:	335e      	adds	r3, #94	; 0x5e
 80023c6:	2273      	movs	r2, #115	; 0x73
 80023c8:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <vTraceInitialize+0x230>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023d2:	335f      	adds	r3, #95	; 0x5f
 80023d4:	2274      	movs	r2, #116	; 0x74
 80023d6:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <vTraceInitialize+0x230>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	22f1      	movs	r2, #241	; 0xf1
 80023e4:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <vTraceInitialize+0x230>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023ee:	3361      	adds	r3, #97	; 0x61
 80023f0:	22f2      	movs	r2, #242	; 0xf2
 80023f2:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 80023f4:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <vTraceInitialize+0x230>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80023fc:	3362      	adds	r3, #98	; 0x62
 80023fe:	22f3      	movs	r2, #243	; 0xf3
 8002400:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <vTraceInitialize+0x230>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800240a:	3363      	adds	r3, #99	; 0x63
 800240c:	22f4      	movs	r2, #244	; 0xf4
 800240e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8002410:	f7ff fa9c 	bl	800194c <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8002414:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <vTraceInitialize+0x230>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	22f4      	movs	r2, #244	; 0xf4
 800241a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <vTraceInitialize+0x230>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	22f3      	movs	r2, #243	; 0xf3
 8002422:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <vTraceInitialize+0x230>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	22f2      	movs	r2, #242	; 0xf2
 800242a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <vTraceInitialize+0x230>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	22f1      	movs	r2, #241	; 0xf1
 8002432:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <vTraceInitialize+0x230>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2274      	movs	r2, #116	; 0x74
 800243a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <vTraceInitialize+0x230>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2273      	movs	r2, #115	; 0x73
 8002442:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <vTraceInitialize+0x230>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2272      	movs	r2, #114	; 0x72
 800244a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <vTraceInitialize+0x230>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2271      	movs	r2, #113	; 0x71
 8002452:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <vTraceInitialize+0x230>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2204      	movs	r2, #4
 800245a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <vTraceInitialize+0x230>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2203      	movs	r2, #3
 8002462:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <vTraceInitialize+0x230>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <vTraceInitialize+0x230>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <vTraceInitialize+0x22c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <vTraceInitialize+0x20e>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <vTraceInitialize+0x230>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <vTraceInitialize+0x22c>)
 8002486:	6811      	ldr	r1, [r2, #0]
 8002488:	2250      	movs	r2, #80	; 0x50
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fcb8 	bl	8002e00 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <vTraceInitialize+0x230>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		vTraceStop();
 800249a:	f7ff fba1 	bl	8001be0 <vTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 800249e:	f001 f8c1 	bl	8003624 <prvTraceInitCortexM>
#endif

	RecorderInitialized = 1;
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <vTraceInitialize+0x220>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e000      	b.n	80024ac <vTraceInitialize+0x21c>
		return;
 80024aa:	bf00      	nop
}
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200000bc 	.word	0x200000bc
 80024b4:	20002ea8 	.word	0x20002ea8
 80024b8:	2000b514 	.word	0x2000b514
 80024bc:	2000b518 	.word	0x2000b518
 80024c0:	20002eac 	.word	0x20002eac
 80024c4:	20002eb0 	.word	0x20002eb0
 80024c8:	e0001004 	.word	0xe0001004
 80024cc:	2000b51c 	.word	0x2000b51c
 80024d0:	0800aca4 	.word	0x0800aca4

080024d4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d04b      	beq.n	800257c <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <prvTraceStoreTaskReady+0xb4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d049      	beq.n	8002580 <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	d903      	bls.n	80024fa <prvTraceStoreTaskReady+0x26>
 80024f2:	4826      	ldr	r0, [pc, #152]	; (800258c <prvTraceStoreTaskReady+0xb8>)
 80024f4:	f000 fd56 	bl	8002fa4 <prvTraceError>
 80024f8:	e043      	b.n	8002582 <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <prvTraceStoreTaskReady+0xbc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8002502:	4824      	ldr	r0, [pc, #144]	; (8002594 <prvTraceStoreTaskReady+0xc0>)
 8002504:	f000 fd4e 	bl	8002fa4 <prvTraceError>
		return;
 8002508:	e03b      	b.n	8002582 <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250a:	f3ef 8310 	mrs	r3, PRIMASK
 800250e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002510:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f383 8810 	msr	PRIMASK, r3
}
 800251e:	bf00      	nop
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <prvTraceStoreTaskReady+0xbc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <prvTraceStoreTaskReady+0xbc>)
 8002528:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <prvTraceStoreTaskReady+0xc4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002534:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002538:	f000 fe16 	bl	8003168 <prvTraceGetDTS>
 800253c:	4603      	mov	r3, r0
 800253e:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8002544:	f000 fb32 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 8002548:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	8b7a      	ldrh	r2, [r7, #26]
 800255a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	7e7a      	ldrb	r2, [r7, #25]
 8002560:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8002562:	f000 fdd9 	bl	8003118 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <prvTraceStoreTaskReady+0xbc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <prvTraceStoreTaskReady+0xbc>)
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f383 8810 	msr	PRIMASK, r3
}
 800257a:	e002      	b.n	8002582 <prvTraceStoreTaskReady+0xae>
		return;
 800257c:	bf00      	nop
 800257e:	e000      	b.n	8002582 <prvTraceStoreTaskReady+0xae>
		return;
 8002580:	bf00      	nop
}
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000008 	.word	0x20000008
 800258c:	0800acb8 	.word	0x0800acb8
 8002590:	200000ac 	.word	0x200000ac
 8002594:	0800acf8 	.word	0x0800acf8
 8002598:	20002eac 	.word	0x20002eac

0800259c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08e      	sub	sp, #56	; 0x38
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8084 	beq.w	80026ba <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da03      	bge.n	80025c0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	425b      	negs	r3, r3
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
 80025be:	e001      	b.n	80025c4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8310 	mrs	r3, PRIMASK
 80025c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80025ca:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f383 8810 	msr	PRIMASK, r3
}
 80025d8:	bf00      	nop
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <vTraceStoreMemMangEvent+0x12c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a39      	ldr	r2, [pc, #228]	; (80026c8 <vTraceStoreMemMangEvent+0x12c>)
 80025e2:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	440a      	add	r2, r1
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 80025fa:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	429a      	cmp	r2, r3
 8002608:	d905      	bls.n	8002616 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <vTraceStoreMemMangEvent+0x128>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d041      	beq.n	80026a4 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8002620:	20ff      	movs	r0, #255	; 0xff
 8002622:	f000 fda1 	bl	8003168 <prvTraceGetDTS>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 800262c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800262e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002632:	f000 f8c9 	bl	80027c8 <prvTraceGetParam>
 8002636:	4603      	mov	r3, r0
 8002638:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800263a:	f000 fab7 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 800263e:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02e      	beq.n	80026a4 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800264c:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002658:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800265a:	f000 fd5d 	bl	8003118 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002664:	f000 f8b0 	bl	80027c8 <prvTraceGetParam>
 8002668:	4603      	mov	r3, r0
 800266a:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8002672:	f000 fa9b 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 8002676:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002682:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800268a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80026a0:	f000 fd3a 	bl	8003118 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <vTraceStoreMemMangEvent+0x12c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <vTraceStoreMemMangEvent+0x12c>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	e000      	b.n	80026bc <vTraceStoreMemMangEvent+0x120>
		return;
 80026ba:	bf00      	nop
}
 80026bc:	3738      	adds	r7, #56	; 0x38
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20002eac 	.word	0x20002eac
 80026c8:	200000ac 	.word	0x200000ac

080026cc <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	460b      	mov	r3, r1
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2bfe      	cmp	r3, #254	; 0xfe
 80026de:	d903      	bls.n	80026e8 <prvTraceStoreKernelCall+0x1c>
 80026e0:	4832      	ldr	r0, [pc, #200]	; (80027ac <prvTraceStoreKernelCall+0xe0>)
 80026e2:	f000 fc5f 	bl	8002fa4 <prvTraceError>
 80026e6:	e05d      	b.n	80027a4 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d903      	bls.n	80026f6 <prvTraceStoreKernelCall+0x2a>
 80026ee:	4830      	ldr	r0, [pc, #192]	; (80027b0 <prvTraceStoreKernelCall+0xe4>)
 80026f0:	f000 fc58 	bl	8002fa4 <prvTraceError>
 80026f4:	e056      	b.n	80027a4 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <prvTraceStoreKernelCall+0xe8>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	7afb      	ldrb	r3, [r7, #11]
 80026fc:	4413      	add	r3, r2
 80026fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4293      	cmp	r3, r2
 8002708:	d903      	bls.n	8002712 <prvTraceStoreKernelCall+0x46>
 800270a:	482b      	ldr	r0, [pc, #172]	; (80027b8 <prvTraceStoreKernelCall+0xec>)
 800270c:	f000 fc4a 	bl	8002fa4 <prvTraceError>
 8002710:	e048      	b.n	80027a4 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <prvTraceStoreKernelCall+0xf0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800271a:	4829      	ldr	r0, [pc, #164]	; (80027c0 <prvTraceStoreKernelCall+0xf4>)
 800271c:	f000 fc42 	bl	8002fa4 <prvTraceError>
		return;
 8002720:	e040      	b.n	80027a4 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <prvTraceStoreKernelCall+0xf8>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03b      	beq.n	80027a2 <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272a:	f3ef 8310 	mrs	r3, PRIMASK
 800272e:	617b      	str	r3, [r7, #20]
  return(result);
 8002730:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	bf00      	nop
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <prvTraceStoreKernelCall+0xf0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <prvTraceStoreKernelCall+0xf0>)
 8002748:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <prvTraceStoreKernelCall+0xe8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002754:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002758:	f000 fd06 	bl	8003168 <prvTraceGetDTS>
 800275c:	4603      	mov	r3, r0
 800275e:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8002766:	f000 fa21 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 800276a:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00c      	beq.n	800278c <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002776:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002786:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8002788:	f000 fcc6 	bl	8003118 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <prvTraceStoreKernelCall+0xf0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <prvTraceStoreKernelCall+0xf0>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f383 8810 	msr	PRIMASK, r3
}
 80027a0:	e000      	b.n	80027a4 <prvTraceStoreKernelCall+0xd8>
		return;
 80027a2:	bf00      	nop
}
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800ad68 	.word	0x0800ad68
 80027b0:	0800ada0 	.word	0x0800ada0
 80027b4:	20002eac 	.word	0x20002eac
 80027b8:	0800ade8 	.word	0x0800ade8
 80027bc:	200000ac 	.word	0x200000ac
 80027c0:	0800ae30 	.word	0x0800ae30
 80027c4:	200000b4 	.word	0x200000b4

080027c8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2bff      	cmp	r3, #255	; 0xff
 80027d6:	d009      	beq.n	80027ec <prvTraceGetParam+0x24>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <prvTraceGetParam+0x24>
 80027e2:	4816      	ldr	r0, [pc, #88]	; (800283c <prvTraceGetParam+0x74>)
 80027e4:	f000 fbde 	bl	8002fa4 <prvTraceError>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	e023      	b.n	8002834 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d801      	bhi.n	80027f8 <prvTraceGetParam+0x30>
	{
		return param;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	e01d      	b.n	8002834 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80027f8:	f000 f9d8 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 80027fc:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	43da      	mvns	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	4013      	ands	r3, r2
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	43da      	mvns	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4013      	ands	r3, r2
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800282a:	f000 fc75 	bl	8003118 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4013      	ands	r3, r2
	}
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	0800af80 	.word	0x0800af80

08002840 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2bfe      	cmp	r3, #254	; 0xfe
 8002852:	d903      	bls.n	800285c <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8002854:	4828      	ldr	r0, [pc, #160]	; (80028f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8002856:	f000 fba5 	bl	8002fa4 <prvTraceError>
 800285a:	e049      	b.n	80028f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8002864:	4826      	ldr	r0, [pc, #152]	; (8002900 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8002866:	f000 fb9d 	bl	8002fa4 <prvTraceError>
		return;
 800286a:	e041      	b.n	80028f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286c:	f3ef 8310 	mrs	r3, PRIMASK
 8002870:	613b      	str	r3, [r7, #16]
  return(result);
 8002872:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	2301      	movs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f383 8810 	msr	PRIMASK, r3
}
 8002880:	bf00      	nop
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800288a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	2b00      	cmp	r3, #0
 8002894:	d021      	beq.n	80028da <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01d      	beq.n	80028da <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800289e:	20ff      	movs	r0, #255	; 0xff
 80028a0:	f000 fc62 	bl	8003168 <prvTraceGetDTS>
 80028a4:	4603      	mov	r3, r0
 80028a6:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028ae:	f7ff ff8b 	bl	80027c8 <prvTraceGetParam>
 80028b2:	4603      	mov	r3, r0
 80028b4:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 80028b6:	f000 f979 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 80028ba:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	7ffa      	ldrb	r2, [r7, #31]
 80028c6:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028d4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80028d6:	f000 fc1f 	bl	8003118 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3b01      	subs	r3, #1
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	bf00      	nop
}
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800afbc 	.word	0x0800afbc
 80028fc:	200000ac 	.word	0x200000ac
 8002900:	0800b014 	.word	0x0800b014
 8002904:	20002eac 	.word	0x20002eac
 8002908:	200000b4 	.word	0x200000b4

0800290c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	d903      	bls.n	8002924 <prvTraceStoreTaskswitch+0x18>
 800291c:	482f      	ldr	r0, [pc, #188]	; (80029dc <prvTraceStoreTaskswitch+0xd0>)
 800291e:	f000 fb41 	bl	8002fa4 <prvTraceError>
 8002922:	e058      	b.n	80029d6 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
 8002928:	60fb      	str	r3, [r7, #12]
  return(result);
 800292a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	2301      	movs	r3, #1
 8002930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	bf00      	nop
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <prvTraceStoreTaskswitch+0xd4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <prvTraceStoreTaskswitch+0xd4>)
 8002942:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <prvTraceStoreTaskswitch+0xd8>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	79fa      	ldrb	r2, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d038      	beq.n	80029c0 <prvTraceStoreTaskswitch+0xb4>
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <prvTraceStoreTaskswitch+0xdc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b00      	cmp	r3, #0
 8002956:	d033      	beq.n	80029c0 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <prvTraceStoreTaskswitch+0xe0>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800295e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002962:	f000 fc01 	bl	8003168 <prvTraceGetDTS>
 8002966:	4603      	mov	r3, r0
 8002968:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <prvTraceStoreTaskswitch+0xd8>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <prvTraceStoreTaskswitch+0xd8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8002976:	f000 f919 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 800297a:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01e      	beq.n	80029c0 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <prvTraceStoreTaskswitch+0xd8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f8a9 	bl	8002ae0 <prvTraceGetObjectState>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d103      	bne.n	800299c <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2207      	movs	r2, #7
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e002      	b.n	80029a2 <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2206      	movs	r2, #6
 80029a0:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	8b7a      	ldrh	r2, [r7, #26]
 80029a6:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	7e7a      	ldrb	r2, [r7, #25]
 80029ac:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <prvTraceStoreTaskswitch+0xd8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4619      	mov	r1, r3
 80029b6:	2003      	movs	r0, #3
 80029b8:	f000 f856 	bl	8002a68 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80029bc:	f000 fbac 	bl	8003118 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <prvTraceStoreTaskswitch+0xd4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <prvTraceStoreTaskswitch+0xd4>)
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	bf00      	nop
}
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	0800b04c 	.word	0x0800b04c
 80029e0:	200000ac 	.word	0x200000ac
 80029e4:	200000b4 	.word	0x200000b4
 80029e8:	20002eac 	.word	0x20002eac
 80029ec:	20000098 	.word	0x20000098

080029f0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	460b      	mov	r3, r1
 80029fc:	71bb      	strb	r3, [r7, #6]
 80029fe:	4613      	mov	r3, r2
 8002a00:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d903      	bls.n	8002a10 <prvTraceSetPriorityProperty+0x20>
 8002a08:	4814      	ldr	r0, [pc, #80]	; (8002a5c <prvTraceSetPriorityProperty+0x6c>)
 8002a0a:	f000 facb 	bl	8002fa4 <prvTraceError>
 8002a0e:	e022      	b.n	8002a56 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <prvTraceSetPriorityProperty+0x70>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4413      	add	r3, r2
 8002a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1c:	79ba      	ldrb	r2, [r7, #6]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d903      	bls.n	8002a2a <prvTraceSetPriorityProperty+0x3a>
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <prvTraceSetPriorityProperty+0x74>)
 8002a24:	f000 fabe 	bl	8002fa4 <prvTraceError>
 8002a28:	e015      	b.n	8002a56 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <prvTraceSetPriorityProperty+0x70>)
 8002a2c:	681c      	ldr	r4, [r3, #0]
 8002a2e:	79fa      	ldrb	r2, [r7, #7]
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f8dd 	bl	8002bf4 <uiIndexOfObject>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <prvTraceSetPriorityProperty+0x70>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4413      	add	r3, r2
 8002a46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4423      	add	r3, r4
 8002a50:	797a      	ldrb	r2, [r7, #5]
 8002a52:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	0800b1e0 	.word	0x0800b1e0
 8002a60:	20002eac 	.word	0x20002eac
 8002a64:	0800b22c 	.word	0x0800b22c

08002a68 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	460b      	mov	r3, r1
 8002a74:	71bb      	strb	r3, [r7, #6]
 8002a76:	4613      	mov	r3, r2
 8002a78:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d903      	bls.n	8002a88 <prvTraceSetObjectState+0x20>
 8002a80:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <prvTraceSetObjectState+0x6c>)
 8002a82:	f000 fa8f 	bl	8002fa4 <prvTraceError>
 8002a86:	e021      	b.n	8002acc <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <prvTraceSetObjectState+0x70>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a94:	79ba      	ldrb	r2, [r7, #6]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d903      	bls.n	8002aa2 <prvTraceSetObjectState+0x3a>
 8002a9a:	4810      	ldr	r0, [pc, #64]	; (8002adc <prvTraceSetObjectState+0x74>)
 8002a9c:	f000 fa82 	bl	8002fa4 <prvTraceError>
 8002aa0:	e014      	b.n	8002acc <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <prvTraceSetObjectState+0x70>)
 8002aa4:	681c      	ldr	r4, [r3, #0]
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	79bb      	ldrb	r3, [r7, #6]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f8a1 	bl	8002bf4 <uiIndexOfObject>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <prvTraceSetObjectState+0x70>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	4413      	add	r3, r2
 8002abe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ac2:	440b      	add	r3, r1
 8002ac4:	4423      	add	r3, r4
 8002ac6:	797a      	ldrb	r2, [r7, #5]
 8002ac8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	0800b2f8 	.word	0x0800b2f8
 8002ad8:	20002eac 	.word	0x20002eac
 8002adc:	0800b33c 	.word	0x0800b33c

08002ae0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d904      	bls.n	8002b00 <prvTraceGetObjectState+0x20>
 8002af6:	4815      	ldr	r0, [pc, #84]	; (8002b4c <prvTraceGetObjectState+0x6c>)
 8002af8:	f000 fa54 	bl	8002fa4 <prvTraceError>
 8002afc:	2300      	movs	r3, #0
 8002afe:	e021      	b.n	8002b44 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <prvTraceGetObjectState+0x70>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4413      	add	r3, r2
 8002b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0c:	79ba      	ldrb	r2, [r7, #6]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d904      	bls.n	8002b1c <prvTraceGetObjectState+0x3c>
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <prvTraceGetObjectState+0x74>)
 8002b14:	f000 fa46 	bl	8002fa4 <prvTraceError>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e013      	b.n	8002b44 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <prvTraceGetObjectState+0x70>)
 8002b1e:	681c      	ldr	r4, [r3, #0]
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	79bb      	ldrb	r3, [r7, #6]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f864 	bl	8002bf4 <uiIndexOfObject>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <prvTraceGetObjectState+0x70>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4413      	add	r3, r2
 8002b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b3c:	440b      	add	r3, r1
 8002b3e:	4423      	add	r3, r4
 8002b40:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	0800b378 	.word	0x0800b378
 8002b50:	20002eac 	.word	0x20002eac
 8002b54:	0800b3bc 	.word	0x0800b3bc

08002b58 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002b6a:	79fa      	ldrb	r2, [r7, #7]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d903      	bls.n	8002b78 <prvTraceSetTaskInstanceFinished+0x20>
 8002b70:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <prvTraceSetTaskInstanceFinished+0x50>)
 8002b72:	f000 fa17 	bl	8002fa4 <prvTraceError>
 8002b76:	e011      	b.n	8002b9c <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002b7a:	681c      	ldr	r4, [r3, #0]
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2103      	movs	r1, #3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f837 	bl	8002bf4 <uiIndexOfObject>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8002b92:	4413      	add	r3, r2
 8002b94:	4423      	add	r3, r4
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20002eac 	.word	0x20002eac
 8002ba8:	0800b3f8 	.word	0x0800b3f8

08002bac <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <prvTraceNextFreeEventBufferSlot+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e014      	b.n	8002be8 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <prvTraceNextFreeEventBufferSlot+0x40>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002bc8:	d304      	bcc.n	8002bd4 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8002bca:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <prvTraceNextFreeEventBufferSlot+0x44>)
 8002bcc:	f000 f9ea 	bl	8002fa4 <prvTraceError>
		return NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e009      	b.n	8002be8 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <prvTraceNextFreeEventBufferSlot+0x40>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <prvTraceNextFreeEventBufferSlot+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20002eac 	.word	0x20002eac
 8002bf0:	0800b440 	.word	0x0800b440

08002bf4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8002c04:	79bb      	ldrb	r3, [r7, #6]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d904      	bls.n	8002c14 <uiIndexOfObject+0x20>
 8002c0a:	4822      	ldr	r0, [pc, #136]	; (8002c94 <uiIndexOfObject+0xa0>)
 8002c0c:	f000 f9ca 	bl	8002fa4 <prvTraceError>
 8002c10:	2300      	movs	r3, #0
 8002c12:	e03a      	b.n	8002c8a <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <uiIndexOfObject+0x38>
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <uiIndexOfObject+0xa4>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	4413      	add	r3, r2
 8002c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c26:	79fa      	ldrb	r2, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d904      	bls.n	8002c36 <uiIndexOfObject+0x42>
 8002c2c:	481b      	ldr	r0, [pc, #108]	; (8002c9c <uiIndexOfObject+0xa8>)
 8002c2e:	f000 f9b9 	bl	8002fa4 <prvTraceError>
 8002c32:	2300      	movs	r3, #0
 8002c34:	e029      	b.n	8002c8a <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8002c36:	79bb      	ldrb	r3, [r7, #6]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d822      	bhi.n	8002c82 <uiIndexOfObject+0x8e>
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01f      	beq.n	8002c82 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <uiIndexOfObject+0xa4>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d816      	bhi.n	8002c82 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <uiIndexOfObject+0xa4>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	3338      	adds	r3, #56	; 0x38
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <uiIndexOfObject+0xa4>)
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	79bb      	ldrb	r3, [r7, #6]
 8002c68:	440b      	add	r3, r1
 8002c6a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002c6e:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	fb11 f303 	smulbb	r3, r1, r3
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	e003      	b.n	8002c8a <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <uiIndexOfObject+0xac>)
 8002c84:	f000 f98e 	bl	8002fa4 <prvTraceError>
	return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	0800b468 	.word	0x0800b468
 8002c98:	20002eac 	.word	0x20002eac
 8002c9c:	0800b4a8 	.word	0x0800b4a8
 8002ca0:	0800b4e8 	.word	0x0800b4e8

08002ca4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8002cae:	4b4e      	ldr	r3, [pc, #312]	; (8002de8 <prvTraceGetObjectHandle+0x144>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <prvTraceGetObjectHandle+0x1c>
 8002cb6:	484d      	ldr	r0, [pc, #308]	; (8002dec <prvTraceGetObjectHandle+0x148>)
 8002cb8:	f000 f974 	bl	8002fa4 <prvTraceError>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e08f      	b.n	8002de0 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d904      	bls.n	8002cd0 <prvTraceGetObjectHandle+0x2c>
 8002cc6:	484a      	ldr	r0, [pc, #296]	; (8002df0 <prvTraceGetObjectHandle+0x14c>)
 8002cc8:	f000 f96c 	bl	8002fa4 <prvTraceError>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e087      	b.n	8002de0 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	bf00      	nop
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <prvTraceGetObjectHandle+0x150>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <prvTraceGetObjectHandle+0x150>)
 8002cee:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <prvTraceGetObjectHandle+0x158>)
 8002cfc:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <prvTraceGetObjectHandle+0x158>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3d      	ldr	r2, [pc, #244]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d04:	4413      	add	r3, r2
 8002d06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d114      	bne.n	8002d38 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <prvTraceGetObjectHandle+0x158>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4938      	ldr	r1, [pc, #224]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d18:	3308      	adds	r3, #8
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8002d26:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <prvTraceGetObjectHandle+0x158>)
 8002d28:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8002d2a:	3201      	adds	r2, #1
 8002d2c:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8002d2e:	4a32      	ldr	r2, [pc, #200]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d30:	4413      	add	r3, r2
 8002d32:	460a      	mov	r2, r1
 8002d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8002d38:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <prvTraceGetObjectHandle+0x158>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d3e:	4413      	add	r3, r2
 8002d40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002d44:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4929      	ldr	r1, [pc, #164]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d52:	3310      	adds	r3, #16
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	440b      	add	r3, r1
 8002d58:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d90a      	bls.n	8002d74 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fe7b 	bl	8001a5c <pszTraceGetErrorNotEnoughHandles>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f91b 	bl	8002fa4 <prvTraceError>
		handle = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e029      	b.n	8002dc8 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d78:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d7c:	3201      	adds	r2, #1
 8002d7e:	b291      	uxth	r1, r2
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8e:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002d94:	3308      	adds	r3, #8
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002d9c:	1acb      	subs	r3, r1, r3
 8002d9e:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002da4:	3318      	adds	r3, #24
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	88db      	ldrh	r3, [r3, #6]
 8002dac:	461a      	mov	r2, r3
		if (hndCount >
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	dd09      	ble.n	8002dc8 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002db8:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8002dba:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <prvTraceGetObjectHandle+0x154>)
 8002dbe:	3318      	adds	r3, #24
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <prvTraceGetObjectHandle+0x150>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <prvTraceGetObjectHandle+0x150>)
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	bf00      	nop

	return handle;
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20002eac 	.word	0x20002eac
 8002dec:	0800a948 	.word	0x0800a948
 8002df0:	0800b528 	.word	0x0800b528
 8002df4:	200000ac 	.word	0x200000ac
 8002df8:	2000b520 	.word	0x2000b520
 8002dfc:	200000c0 	.word	0x200000c0

08002e00 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e010      	b.n	8002e34 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	441a      	add	r2, r3
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	440b      	add	r3, r1
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4413      	add	r3, r2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3ea      	bcc.n	8002e12 <prvStrncpy+0x12>
			break;
	}
}
 8002e3c:	e000      	b.n	8002e40 <prvStrncpy+0x40>
			break;
 8002e3e:	bf00      	nop
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	603a      	str	r2, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <prvTraceSetObjectName+0x1a>
	{
		name = "";
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <prvTraceSetObjectName+0x9c>)
 8002e64:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d903      	bls.n	8002e74 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8002e6c:	481f      	ldr	r0, [pc, #124]	; (8002eec <prvTraceSetObjectName+0xa0>)
 8002e6e:	f000 f899 	bl	8002fa4 <prvTraceError>
		return;
 8002e72:	e036      	b.n	8002ee2 <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 8002e74:	79bb      	ldrb	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8002e7a:	481d      	ldr	r0, [pc, #116]	; (8002ef0 <prvTraceSetObjectName+0xa4>)
 8002e7c:	f000 f892 	bl	8002fa4 <prvTraceError>
		return;
 8002e80:	e02f      	b.n	8002ee2 <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <prvTraceSetObjectName+0xa8>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e8e:	79ba      	ldrb	r2, [r7, #6]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d908      	bls.n	8002ea6 <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fde0 	bl	8001a5c <pszTraceGetErrorNotEnoughHandles>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f880 	bl	8002fa4 <prvTraceError>
 8002ea4:	e01d      	b.n	8002ee2 <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8002ea6:	79fa      	ldrb	r2, [r7, #7]
 8002ea8:	79bb      	ldrb	r3, [r7, #6]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fea1 	bl	8002bf4 <uiIndexOfObject>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <prvTraceSetObjectName+0xac>)
 8002eb8:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <prvTraceSetObjectName+0xb0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <prvTraceSetObjectName+0xa8>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <prvTraceSetObjectName+0xac>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	3388      	adds	r3, #136	; 0x88
 8002ecc:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <prvTraceSetObjectName+0xa8>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002eda:	461a      	mov	r2, r3
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	f7ff ff8f 	bl	8002e00 <prvStrncpy>
		}
	}
}
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	0800b62c 	.word	0x0800b62c
 8002eec:	0800b630 	.word	0x0800b630
 8002ef0:	0800b660 	.word	0x0800b660
 8002ef4:	20002eac 	.word	0x20002eac
 8002ef8:	200000c4 	.word	0x200000c4
 8002efc:	2000b518 	.word	0x2000b518

08002f00 <prvTraceOpenSymbol>:

traceString prvTraceOpenSymbol(const char* name, traceString userEventChannel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <prvTraceOpenSymbol+0x24>
 8002f1a:	4820      	ldr	r0, [pc, #128]	; (8002f9c <prvTraceOpenSymbol+0x9c>)
 8002f1c:	f000 f842 	bl	8002fa4 <prvTraceError>
 8002f20:	2300      	movs	r3, #0
 8002f22:	e036      	b.n	8002f92 <prvTraceOpenSymbol+0x92>

	prvTraceGetChecksum(name, &crc, &len);
 8002f24:	f107 020b 	add.w	r2, r7, #11
 8002f28:	f107 030a 	add.w	r3, r7, #10
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fb32 	bl	8003598 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	613b      	str	r3, [r7, #16]
  return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	bf00      	nop
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <prvTraceOpenSymbol+0xa0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <prvTraceOpenSymbol+0xa0>)
 8002f52:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8002f54:	7ab9      	ldrb	r1, [r7, #10]
 8002f56:	7afa      	ldrb	r2, [r7, #11]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9dc 	bl	8003318 <prvTraceLookupSymbolTableEntry>
 8002f60:	4603      	mov	r3, r0
 8002f62:	83fb      	strh	r3, [r7, #30]
	if (!result)
 8002f64:	8bfb      	ldrh	r3, [r7, #30]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <prvTraceOpenSymbol+0x7a>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8002f6a:	7ab9      	ldrb	r1, [r7, #10]
 8002f6c:	7afa      	ldrb	r2, [r7, #11]
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fa4f 	bl	8003414 <prvTraceCreateSymbolTableEntry>
 8002f76:	4603      	mov	r3, r0
 8002f78:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <prvTraceOpenSymbol+0xa0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <prvTraceOpenSymbol+0xa0>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	bf00      	nop

	return result;
 8002f90:	8bfb      	ldrh	r3, [r7, #30]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	0800b690 	.word	0x0800b690
 8002fa0:	200000ac 	.word	0x200000ac

08002fa4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <prvTraceError+0x50>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <prvTraceError+0x14>
	{
		vTraceStop();
 8002fb4:	f7fe fe14 	bl	8001be0 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <prvTraceError+0x54>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <prvTraceError+0x54>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <prvTraceError+0x50>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <prvTraceError+0x50>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <prvTraceError+0x54>)
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	2250      	movs	r2, #80	; 0x50
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff0f 	bl	8002e00 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <prvTraceError+0x50>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20002eac 	.word	0x20002eac
 8002ff8:	2000b518 	.word	0x2000b518

08002ffc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d175      	bne.n	8003100 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 8003014:	483e      	ldr	r0, [pc, #248]	; (8003110 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 8003016:	f7ff ffc5 	bl	8002fa4 <prvTraceError>
 800301a:	e075      	b.n	8003108 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 800301c:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4413      	add	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003036:	2b98      	cmp	r3, #152	; 0x98
 8003038:	d929      	bls.n	800308e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003048:	2ba7      	cmp	r3, #167	; 0xa7
 800304a:	d820      	bhi.n	800308e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800304c:	4b31      	ldr	r3, [pc, #196]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800305a:	3368      	adds	r3, #104	; 0x68
 800305c:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	441a      	add	r2, r3
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	429a      	cmp	r2, r3
 800306c:	d244      	bcs.n	80030f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800307a:	4413      	add	r3, r2
 800307c:	1d18      	adds	r0, r3, #4
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	3301      	adds	r3, #1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	461a      	mov	r2, r3
 8003086:	2100      	movs	r1, #0
 8003088:	f007 f924 	bl	800a2d4 <memset>
		{
 800308c:	e034      	b.n	80030f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800309c:	2b01      	cmp	r3, #1
 800309e:	d12c      	bne.n	80030fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20d      	bcs.n	80030ca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	2208      	movs	r2, #8
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f007 f906 	bl	800a2d4 <memset>
 80030c8:	e017      	b.n	80030fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f603 1354 	addw	r3, r3, #2388	; 0x954
 80030d2:	2204      	movs	r2, #4
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 f8fc 	bl	800a2d4 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	2204      	movs	r2, #4
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f007 f8ef 	bl	800a2d4 <memset>
 80030f6:	e000      	b.n	80030fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 80030f8:	bf00      	nop
			}
		}
		i++;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d389      	bcc.n	800301c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800b6c0 	.word	0x0800b6c0
 8003114:	20002eac 	.word	0x20002eac

08003118 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01b      	beq.n	800315e <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	3201      	adds	r2, #1
 800312e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	3201      	adds	r2, #1
 8003138:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003144:	d307      	bcc.n	8003156 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <prvTraceUpdateCounters+0x4c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f7ff ff50 	bl	8002ffc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800315c:	e000      	b.n	8003160 <prvTraceUpdateCounters+0x48>
		return;
 800315e:	bf00      	nop
#endif
}
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20002eac 	.word	0x20002eac

08003168 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2bff      	cmp	r3, #255	; 0xff
 8003182:	d009      	beq.n	8003198 <prvTraceGetDTS+0x30>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <prvTraceGetDTS+0x30>
 800318e:	485a      	ldr	r0, [pc, #360]	; (80032f8 <prvTraceGetDTS+0x190>)
 8003190:	f7ff ff08 	bl	8002fa4 <prvTraceError>
 8003194:	2300      	movs	r3, #0
 8003196:	e0ab      	b.n	80032f0 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8003198:	4b58      	ldr	r3, [pc, #352]	; (80032fc <prvTraceGetDTS+0x194>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <prvTraceGetDTS+0x198>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80031aa:	4b55      	ldr	r3, [pc, #340]	; (8003300 <prvTraceGetDTS+0x198>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <prvTraceGetDTS+0x194>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0892      	lsrs	r2, r2, #2
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
 80031b6:	e00b      	b.n	80031d0 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80031b8:	4b52      	ldr	r3, [pc, #328]	; (8003304 <prvTraceGetDTS+0x19c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b52      	ldr	r3, [pc, #328]	; (8003308 <prvTraceGetDTS+0x1a0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d005      	beq.n	80031d0 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80031c4:	4b51      	ldr	r3, [pc, #324]	; (800330c <prvTraceGetDTS+0x1a4>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <prvTraceGetDTS+0x194>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0892      	lsrs	r2, r2, #2
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fa5d 	bl	8003694 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <prvTraceGetDTS+0x1a8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <prvTraceGetDTS+0x1a8>)
 80031e8:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 80031ea:	4b44      	ldr	r3, [pc, #272]	; (80032fc <prvTraceGetDTS+0x194>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d043      	beq.n	800327c <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <prvTraceGetDTS+0x194>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d91d      	bls.n	800323c <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <prvTraceGetDTS+0x194>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <prvTraceGetDTS+0x194>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <prvTraceGetDTS+0x194>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	440a      	add	r2, r1
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <prvTraceGetDTS+0x194>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <prvTraceGetDTS+0x194>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	fbb3 f0f2 	udiv	r0, r3, r2
 800322c:	fb02 f200 	mul.w	r2, r2, r0
 8003230:	1a9a      	subs	r2, r3, r2
 8003232:	4b32      	ldr	r3, [pc, #200]	; (80032fc <prvTraceGetDTS+0x194>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	440a      	add	r2, r1
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
 800323a:	e007      	b.n	800324c <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <prvTraceGetDTS+0x194>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <prvTraceGetDTS+0x194>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	440a      	add	r2, r1
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <prvTraceGetDTS+0x194>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <prvTraceGetDTS+0x194>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	429a      	cmp	r2, r3
 800325a:	d313      	bcc.n	8003284 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <prvTraceGetDTS+0x194>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	3201      	adds	r2, #1
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <prvTraceGetDTS+0x194>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <prvTraceGetDTS+0x194>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <prvTraceGetDTS+0x194>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1a8a      	subs	r2, r1, r2
 8003278:	629a      	str	r2, [r3, #40]	; 0x28
 800327a:	e003      	b.n	8003284 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <prvTraceGetDTS+0x194>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d92c      	bls.n	80032e6 <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800328c:	f7ff fc8e 	bl	8002bac <prvTraceNextFreeEventBufferSlot>
 8003290:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d026      	beq.n	80032e6 <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10b      	bne.n	80032ba <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	22a9      	movs	r2, #169	; 0xa9
 80032a6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	0c1b      	lsrs	r3, r3, #16
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
 80032b8:	e013      	b.n	80032e2 <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2bff      	cmp	r3, #255	; 0xff
 80032be:	d10d      	bne.n	80032dc <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	22a8      	movs	r2, #168	; 0xa8
 80032c4:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	0e1b      	lsrs	r3, r3, #24
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	705a      	strb	r2, [r3, #1]
 80032da:	e002      	b.n	80032e2 <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80032dc:	480d      	ldr	r0, [pc, #52]	; (8003314 <prvTraceGetDTS+0x1ac>)
 80032de:	f7ff fe61 	bl	8002fa4 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80032e2:	f7ff ff19 	bl	8003118 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	0800b718 	.word	0x0800b718
 80032fc:	20002eac 	.word	0x20002eac
 8003300:	200000b0 	.word	0x200000b0
 8003304:	e0001004 	.word	0xe0001004
 8003308:	2000b51c 	.word	0x2000b51c
 800330c:	20000004 	.word	0x20000004
 8003310:	200000c8 	.word	0x200000c8
 8003314:	0800b758 	.word	0x0800b758

08003318 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceString prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceString chn)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	460b      	mov	r3, r1
 800332c:	70bb      	strb	r3, [r7, #2]
 800332e:	4613      	mov	r3, r2
 8003330:	803b      	strh	r3, [r7, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	889b      	ldrh	r3, [r3, #4]
 8003342:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceString)0);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <prvTraceLookupSymbolTableEntry+0x3c>
 800334a:	4830      	ldr	r0, [pc, #192]	; (800340c <prvTraceLookupSymbolTableEntry+0xf4>)
 800334c:	f7ff fe2a 	bl	8002fa4 <prvTraceError>
 8003350:	2300      	movs	r3, #0
 8003352:	e054      	b.n	80033fe <prvTraceLookupSymbolTableEntry+0xe6>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8003354:	78bb      	ldrb	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14b      	bne.n	80033f2 <prvTraceLookupSymbolTableEntry+0xda>
 800335a:	482d      	ldr	r0, [pc, #180]	; (8003410 <prvTraceLookupSymbolTableEntry+0xf8>)
 800335c:	f7ff fe22 	bl	8002fa4 <prvTraceError>
 8003360:	2300      	movs	r3, #0
 8003362:	e04c      	b.n	80033fe <prvTraceLookupSymbolTableEntry+0xe6>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	3302      	adds	r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8003372:	461a      	mov	r2, r3
 8003374:	883b      	ldrh	r3, [r7, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	429a      	cmp	r2, r3
 800337a:	d127      	bne.n	80033cc <prvTraceLookupSymbolTableEntry+0xb4>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	3303      	adds	r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800338a:	b29a      	uxth	r2, r3
 800338c:	883b      	ldrh	r3, [r7, #0]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b29b      	uxth	r3, r3
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <prvTraceLookupSymbolTableEntry+0xb4>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	1d19      	adds	r1, r3, #4
 800339e:	78bb      	ldrb	r3, [r7, #2]
 80033a0:	440b      	add	r3, r1
 80033a2:	4413      	add	r3, r2
 80033a4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10f      	bne.n	80033cc <prvTraceLookupSymbolTableEntry+0xb4>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	3304      	adds	r3, #4
 80033b4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	78ba      	ldrb	r2, [r7, #2]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f006 fff9 	bl	800a3b8 <strncmp>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <prvTraceLookupSymbolTableEntry+0xe2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	4413      	add	r3, r2
 80033d4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <prvTraceLookupSymbolTableEntry+0xf0>)
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	3301      	adds	r3, #1
 80033e2:	440b      	add	r3, r1
 80033e4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	81fb      	strh	r3, [r7, #14]
	while (i != 0)
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1b5      	bne.n	8003364 <prvTraceLookupSymbolTableEntry+0x4c>
 80033f8:	e000      	b.n	80033fc <prvTraceLookupSymbolTableEntry+0xe4>
						break; /* found */
 80033fa:	bf00      	nop
	}
	return i;
 80033fc:	89fb      	ldrh	r3, [r7, #14]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20002eac 	.word	0x20002eac
 800340c:	0800b77c 	.word	0x0800b77c
 8003410:	0800b7b8 	.word	0x0800b7b8

08003414 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceString channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	803b      	strh	r3, [r7, #0]
	uint16_t ret = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <prvTraceCreateSymbolTableEntry+0x2e>
 8003438:	4853      	ldr	r0, [pc, #332]	; (8003588 <prvTraceCreateSymbolTableEntry+0x174>)
 800343a:	f7ff fdb3 	bl	8002fa4 <prvTraceError>
 800343e:	2300      	movs	r3, #0
 8003440:	e09e      	b.n	8003580 <prvTraceCreateSymbolTableEntry+0x16c>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 8003442:	78bb      	ldrb	r3, [r7, #2]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <prvTraceCreateSymbolTableEntry+0x3e>
 8003448:	4850      	ldr	r0, [pc, #320]	; (800358c <prvTraceCreateSymbolTableEntry+0x178>)
 800344a:	f7ff fdab 	bl	8002fa4 <prvTraceError>
 800344e:	2300      	movs	r3, #0
 8003450:	e096      	b.n	8003580 <prvTraceCreateSymbolTableEntry+0x16c>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 800345a:	78bb      	ldrb	r3, [r7, #2]
 800345c:	4413      	add	r3, r2
 800345e:	3304      	adds	r3, #4
 8003460:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003464:	d305      	bcc.n	8003472 <prvTraceCreateSymbolTableEntry+0x5e>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8003466:	484b      	ldr	r0, [pc, #300]	; (8003594 <prvTraceCreateSymbolTableEntry+0x180>)
 8003468:	f7ff fd9c 	bl	8002fa4 <prvTraceError>
		ret = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	81fb      	strh	r3, [r7, #14]
 8003470:	e085      	b.n	800357e <prvTraceCreateSymbolTableEntry+0x16a>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	8899      	ldrh	r1, [r3, #4]
		RecorderDataPtr->SymbolTable.symbytes
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003484:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 800348e:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8003490:	4413      	add	r3, r2
 8003492:	460a      	mov	r2, r1
 8003494:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	889b      	ldrh	r3, [r3, #4]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034ae:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80034b8:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80034ba:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80034bc:	4413      	add	r3, r2
 80034be:	460a      	mov	r2, r1
 80034c0:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80034d0:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 80034d2:	8839      	ldrh	r1, [r7, #0]
 80034d4:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80034d6:	4413      	add	r3, r2
 80034d8:	460a      	mov	r2, r1
 80034da:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 80034de:	883b      	ldrh	r3, [r7, #0]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80034f0:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 80034f2:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80034f4:	4413      	add	r3, r2
 80034f6:	460a      	mov	r2, r1
 80034f8:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8003508:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800350a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	78ba      	ldrb	r2, [r7, #2]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fc72 	bl	8002e00 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 800351e:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
 8003528:	78bb      	ldrb	r3, [r7, #2]
 800352a:	440b      	add	r3, r1
 800352c:	3304      	adds	r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003540:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	b289      	uxth	r1, r1
 8003546:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	460a      	mov	r2, r1
 8003550:	809a      	strh	r2, [r3, #4]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 800355a:	78bb      	ldrb	r3, [r7, #2]
 800355c:	441a      	add	r2, r3
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3205      	adds	r2, #5
 8003564:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <prvTraceCreateSymbolTableEntry+0x17c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8003570:	b29a      	uxth	r2, r3
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	3305      	adds	r3, #5
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800357e:	89fb      	ldrh	r3, [r7, #14]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	0800b7f0 	.word	0x0800b7f0
 800358c:	0800b82c 	.word	0x0800b82c
 8003590:	20002eac 	.word	0x20002eac
 8003594:	0800b864 	.word	0x0800b864

08003598 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <prvTraceGetChecksum+0x22>
 80035b2:	4819      	ldr	r0, [pc, #100]	; (8003618 <prvTraceGetChecksum+0x80>)
 80035b4:	f7ff fcf6 	bl	8002fa4 <prvTraceError>
 80035b8:	e02b      	b.n	8003612 <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <prvTraceGetChecksum+0x30>
 80035c0:	4816      	ldr	r0, [pc, #88]	; (800361c <prvTraceGetChecksum+0x84>)
 80035c2:	f7ff fcef 	bl	8002fa4 <prvTraceError>
 80035c6:	e024      	b.n	8003612 <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <prvTraceGetChecksum+0x3e>
 80035ce:	4814      	ldr	r0, [pc, #80]	; (8003620 <prvTraceGetChecksum+0x88>)
 80035d0:	f7ff fce8 	bl	8002fa4 <prvTraceError>
 80035d4:	e01d      	b.n	8003612 <prvTraceGetChecksum+0x7a>

	if (pname != (const char *) 0)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <prvTraceGetChecksum+0x64>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 80035dc:	e006      	b.n	80035ec <prvTraceGetChecksum+0x54>
		{
			crc += c;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
			length++;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	75fb      	strb	r3, [r7, #23]
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <prvTraceGetChecksum+0x46>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	b2da      	uxtb	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	0800b8ac 	.word	0x0800b8ac
 800361c:	0800b8e0 	.word	0x0800b8e0
 8003620:	0800b910 	.word	0x0800b910

08003624 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <prvTraceInitCortexM+0x54>)
 800362a:	4a14      	ldr	r2, [pc, #80]	; (800367c <prvTraceInitCortexM+0x58>)
 800362c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <prvTraceInitCortexM+0x5c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <prvTraceInitCortexM+0x5c>)
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003638:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <prvTraceInitCortexM+0x5c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8003642:	4810      	ldr	r0, [pc, #64]	; (8003684 <prvTraceInitCortexM+0x60>)
 8003644:	f7ff fcae 	bl	8002fa4 <prvTraceError>
			break;
 8003648:	e013      	b.n	8003672 <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <prvTraceInitCortexM+0x64>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8003656:	480d      	ldr	r0, [pc, #52]	; (800368c <prvTraceInitCortexM+0x68>)
 8003658:	f7ff fca4 	bl	8002fa4 <prvTraceError>
			break;
 800365c:	e009      	b.n	8003672 <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <prvTraceInitCortexM+0x6c>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <prvTraceInitCortexM+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a07      	ldr	r2, [pc, #28]	; (8003688 <prvTraceInitCortexM+0x64>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e0001fb0 	.word	0xe0001fb0
 800367c:	c5acce55 	.word	0xc5acce55
 8003680:	e000edfc 	.word	0xe000edfc
 8003684:	0800b944 	.word	0x0800b944
 8003688:	e0001000 	.word	0xe0001000
 800368c:	0800b970 	.word	0x0800b970
 8003690:	e0001004 	.word	0xe0001004

08003694 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <prvTracePortGetTimeStamp+0x80>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d028      	beq.n	8003708 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <prvTracePortGetTimeStamp+0x84>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	601a      	str	r2, [r3, #0]
		return;
 80036be:	e023      	b.n	8003708 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <prvTracePortGetTimeStamp+0x88>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <prvTracePortGetTimeStamp+0x8c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	1ad2      	subs	r2, r2, r3
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <prvTracePortGetTimeStamp+0x90>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <prvTracePortGetTimeStamp+0x90>)
 80036e4:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <prvTracePortGetTimeStamp+0x84>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <prvTracePortGetTimeStamp+0x84>)
 80036f0:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <prvTracePortGetTimeStamp+0x84>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8003700:	4a07      	ldr	r2, [pc, #28]	; (8003720 <prvTracePortGetTimeStamp+0x8c>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e000      	b.n	800370a <prvTracePortGetTimeStamp+0x76>
		return;
 8003708:	bf00      	nop
}
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	200000a0 	.word	0x200000a0
 8003718:	200000a4 	.word	0x200000a4
 800371c:	e0001004 	.word	0xe0001004
 8003720:	200000cc 	.word	0x200000cc
 8003724:	200000d0 	.word	0x200000d0

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_Init+0x3c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <HAL_Init+0x3c>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373e:	2003      	movs	r0, #3
 8003740:	f001 faef 	bl	8004d22 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd fec1 	bl	80014cc <HAL_InitTick>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	e001      	b.n	800375a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003756:	f7fd fd65 	bl	8001224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800375a:	79fb      	ldrb	r3, [r7, #7]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58004000 	.word	0x58004000

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000010 	.word	0x20000010
 800378c:	2000b5b0 	.word	0x2000b5b0

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000b5b0 	.word	0x2000b5b0

080037a8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_GetTickPrio+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80037c8:	f7ff ffe2 	bl	8003790 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d005      	beq.n	80037e6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_Delay+0x44>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80037e6:	bf00      	nop
 80037e8:	f7ff ffd2 	bl	8003790 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d8f7      	bhi.n	80037e8 <HAL_Delay+0x28>
    {
    }
  }
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000010 	.word	0x20000010

08003808 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
#endif
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3360      	adds	r3, #96	; 0x60
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <LL_ADC_SetOffset+0x44>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	03fff000 	.word	0x03fff000

080038b8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3360      	adds	r3, #96	; 0x60
 80038c6:	461a      	mov	r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003932:	2300      	movs	r3, #0
#endif
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3330      	adds	r3, #48	; 0x30
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	211f      	movs	r1, #31
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0e9b      	lsrs	r3, r3, #26
 8003978:	f003 011f 	and.w	r1, r3, #31
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3314      	adds	r3, #20
 80039a8:	461a      	mov	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0e5b      	lsrs	r3, r3, #25
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	4413      	add	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0d1b      	lsrs	r3, r3, #20
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2107      	movs	r1, #7
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	401a      	ands	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	0d1b      	lsrs	r3, r3, #20
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	431a      	orrs	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0318 	and.w	r3, r3, #24
 8003a12:	4908      	ldr	r1, [pc, #32]	; (8003a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a14:	40d9      	lsrs	r1, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	400b      	ands	r3, r1
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	0007ffff 	.word	0x0007ffff

08003a38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6093      	str	r3, [r2, #8]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a70:	d101      	bne.n	8003a76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <LL_ADC_IsEnabled+0x18>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <LL_ADC_IsEnabled+0x1a>
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_IsDisableOngoing+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_IsDisableOngoing+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b84:	f043 0204 	orr.w	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d101      	bne.n	8003c26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e12e      	b.n	8003eb0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fd fae9 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff feef 	bl	8003a5c <LL_ADC_IsDeepPowerDownEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fed5 	bl	8003a38 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff0a 	bl	8003aac <LL_ADC_IsInternalRegulatorEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff feee 	bl	8003a84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ca8:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <HAL_ADC_Init+0x284>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <HAL_ADC_Init+0x288>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cbc:	e002      	b.n	8003cc4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f9      	bne.n	8003cbe <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff feec 	bl	8003aac <LL_ADC_IsInternalRegulatorEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff60 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8003d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80c7 	bne.w	8003e9e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80c3 	bne.w	8003e9e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d20:	f043 0202 	orr.w	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fef9 	bl	8003b24 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d38:	4861      	ldr	r0, [pc, #388]	; (8003ec0 <HAL_ADC_Init+0x28c>)
 8003d3a:	f7ff fef3 	bl	8003b24 <LL_ADC_IsEnabled>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	485e      	ldr	r0, [pc, #376]	; (8003ec4 <HAL_ADC_Init+0x290>)
 8003d4c:	f7ff fd5c 	bl	8003808 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7e5b      	ldrb	r3, [r3, #25]
 8003d54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d6e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003d70:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d106      	bne.n	8003d90 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	3b01      	subs	r3, #1
 8003d88:	045b      	lsls	r3, r3, #17
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b45      	ldr	r3, [pc, #276]	; (8003ec8 <HAL_ADC_Init+0x294>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fefb 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8003dca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff1c 	bl	8003c0e <LL_ADC_INJ_IsConversionOngoing>
 8003dd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d13d      	bne.n	8003e5a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d13a      	bne.n	8003e5a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003de8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003df0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e00:	f023 0302 	bic.w	r3, r3, #2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	69b9      	ldr	r1, [r7, #24]
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d118      	bne.n	8003e4a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	611a      	str	r2, [r3, #16]
 8003e48:	e007      	b.n	8003e5a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d10c      	bne.n	8003e7c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f023 010f 	bic.w	r1, r3, #15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7a:	e007      	b.n	8003e8c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020f 	bic.w	r2, r2, #15
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f023 0303 	bic.w	r3, r3, #3
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
 8003e9c:	e007      	b.n	8003eae <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f043 0210 	orr.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	053e2d63 	.word	0x053e2d63
 8003ec0:	50040000 	.word	0x50040000
 8003ec4:	50040300 	.word	0x50040300
 8003ec8:	fff0c007 	.word	0xfff0c007

08003ecc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fe71 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d140      	bne.n	8003f66 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Start+0x26>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e03c      	b.n	8003f6c <HAL_ADC_Start+0xa0>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fd8a 	bl	8004a14 <ADC_Enable>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d128      	bne.n	8003f5c <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d106      	bne.n	8003f3a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f023 0206 	bic.w	r2, r3, #6
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58
 8003f38:	e002      	b.n	8003f40 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	221c      	movs	r2, #28
 8003f46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fe0b 	bl	8003b70 <LL_ADC_REG_StartConversion>
 8003f5a:	e006      	b.n	8003f6a <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003f64:	e001      	b.n	8003f6a <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_Stop+0x16>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e023      	b.n	8003fd2 <HAL_ADC_Stop+0x5e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f92:	2103      	movs	r1, #3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fc81 	bl	800489c <ADC_ConversionStop>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fdaf 	bl	8004b08 <ADC_Disable>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_ADC_Stop+0x54>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f043 0201 	orr.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d102      	bne.n	8003ff2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003fec:	2308      	movs	r3, #8
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e010      	b.n	8004014 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_ADC_PollForConversion+0x36>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e06d      	b.n	80040ec <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004010:	2304      	movs	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004014:	f7ff fbbc 	bl	8003790 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800401a:	e021      	b.n	8004060 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d01d      	beq.n	8004060 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004024:	f7ff fbb4 	bl	8003790 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <HAL_ADC_PollForConversion+0x60>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d112      	bne.n	8004060 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e045      	b.n	80040ec <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0d6      	beq.n	800401c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fc4b 	bl	800391a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01c      	beq.n	80040c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7e5b      	ldrb	r3, [r3, #25]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d118      	bne.n	80040c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d111      	bne.n	80040c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d104      	bne.n	80040d4 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e00a      	b.n	80040ea <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <HAL_ADC_PollForConversion+0x110>
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	220c      	movs	r2, #12
 80040e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b0b6      	sub	sp, #216	; 0xd8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x22>
 800412e:	2302      	movs	r3, #2
 8004130:	e39f      	b.n	8004872 <HAL_ADC_ConfigChannel+0x762>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fd3e 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 8384 	bne.w	8004854 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	f7ff fbf1 	bl	8003940 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fd2c 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8004168:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fd4c 	bl	8003c0e <LL_ADC_INJ_IsConversionOngoing>
 8004176:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800417a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 81a6 	bne.w	80044d0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 81a1 	bne.w	80044d0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	461a      	mov	r2, r3
 800419c:	f7ff fbfc 	bl	8003998 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00a      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6919      	ldr	r1, [r3, #16]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041d2:	f7ff fb4d 	bl	8003870 <LL_ADC_SetOffset>
 80041d6:	e17b      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fb6a 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <HAL_ADC_ConfigChannel+0xf4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fb5f 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	f003 021f 	and.w	r2, r3, #31
 8004202:	e01e      	b.n	8004242 <HAL_ADC_ConfigChannel+0x132>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fb54 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800422a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8004232:	2320      	movs	r3, #32
 8004234:	e004      	b.n	8004240 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8004236:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <HAL_ADC_ConfigChannel+0x14a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0e9b      	lsrs	r3, r3, #26
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	e018      	b.n	800428c <HAL_ADC_ConfigChannel+0x17c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800426e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e004      	b.n	800428c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8004282:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fb23 	bl	80038e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fb07 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x1ba>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fafc 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80042c0:	4603      	mov	r3, r0
 80042c2:	0e9b      	lsrs	r3, r3, #26
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	e01e      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1f8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff faf1 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80042e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80042f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e004      	b.n	8004306 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80042fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x210>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	e018      	b.n	8004352 <HAL_ADC_ConfigChannel+0x242>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004334:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800433c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8004344:	2320      	movs	r3, #32
 8004346:	e004      	b.n	8004352 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	429a      	cmp	r2, r3
 8004354:	d106      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fac0 	bl	80038e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff faa4 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x280>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa99 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004386:	4603      	mov	r3, r0
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	f003 021f 	and.w	r2, r3, #31
 800438e:	e01e      	b.n	80043ce <HAL_ADC_ConfigChannel+0x2be>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fa8e 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80043ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80043b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e004      	b.n	80043cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80043c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x2d6>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0e9b      	lsrs	r3, r3, #26
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	e016      	b.n	8004414 <HAL_ADC_ConfigChannel+0x304>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80043f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80043fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8004406:	2320      	movs	r3, #32
 8004408:	e004      	b.n	8004414 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800440a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	429a      	cmp	r2, r3
 8004416:	d106      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	2102      	movs	r1, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fa5f 	bl	80038e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2103      	movs	r1, #3
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fa43 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x342>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2103      	movs	r1, #3
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fa38 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004448:	4603      	mov	r3, r0
 800444a:	0e9b      	lsrs	r3, r3, #26
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	e017      	b.n	8004482 <HAL_ADC_ConfigChannel+0x372>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2103      	movs	r1, #3
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fa2d 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800446a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800446c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800446e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004474:	2320      	movs	r3, #32
 8004476:	e003      	b.n	8004480 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_ADC_ConfigChannel+0x38a>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0e9b      	lsrs	r3, r3, #26
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	e011      	b.n	80044be <HAL_ADC_ConfigChannel+0x3ae>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80044a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80044ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e003      	b.n	80044be <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	429a      	cmp	r2, r3
 80044c0:	d106      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	2103      	movs	r1, #3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fa0a 	bl	80038e4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fb25 	bl	8003b24 <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 81c2 	bne.w	8004866 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7ff fa7e 	bl	80039f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a8e      	ldr	r2, [pc, #568]	; (8004734 <HAL_ADC_ConfigChannel+0x624>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	f040 8130 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x418>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	3301      	adds	r3, #1
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2b09      	cmp	r3, #9
 800451e:	bf94      	ite	ls
 8004520:	2301      	movls	r3, #1
 8004522:	2300      	movhi	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e019      	b.n	800455c <HAL_ADC_ConfigChannel+0x44c>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004540:	2320      	movs	r3, #32
 8004542:	e003      	b.n	800454c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3301      	adds	r3, #1
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2b09      	cmp	r3, #9
 8004554:	bf94      	ite	ls
 8004556:	2301      	movls	r3, #1
 8004558:	2300      	movhi	r3, #0
 800455a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800455c:	2b00      	cmp	r3, #0
 800455e:	d079      	beq.n	8004654 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_ADC_ConfigChannel+0x46c>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	3301      	adds	r3, #1
 8004574:	069b      	lsls	r3, r3, #26
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457a:	e015      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x498>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e003      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x4b8>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	3301      	adds	r3, #1
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	e017      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x4e8>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e003      	b.n	80045ec <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <HAL_ADC_ConfigChannel+0x50e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0e9b      	lsrs	r3, r3, #26
 800460e:	3301      	adds	r3, #1
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	051b      	lsls	r3, r3, #20
 800461c:	e018      	b.n	8004650 <HAL_ADC_ConfigChannel+0x540>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004636:	2320      	movs	r3, #32
 8004638:	e003      	b.n	8004642 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3301      	adds	r3, #1
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004650:	430b      	orrs	r3, r1
 8004652:	e080      	b.n	8004756 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x560>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e9b      	lsrs	r3, r3, #26
 8004666:	3301      	adds	r3, #1
 8004668:	069b      	lsls	r3, r3, #26
 800466a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800466e:	e015      	b.n	800469c <HAL_ADC_ConfigChannel+0x58c>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004688:	2320      	movs	r3, #32
 800468a:	e003      	b.n	8004694 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	3301      	adds	r3, #1
 8004696:	069b      	lsls	r3, r3, #26
 8004698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x5ac>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	3301      	adds	r3, #1
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	e017      	b.n	80046ec <HAL_ADC_ConfigChannel+0x5dc>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	61fb      	str	r3, [r7, #28]
  return result;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x608>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	3301      	adds	r3, #1
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	3b1e      	subs	r3, #30
 8004710:	051b      	lsls	r3, r3, #20
 8004712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004716:	e01d      	b.n	8004754 <HAL_ADC_ConfigChannel+0x644>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	613b      	str	r3, [r7, #16]
  return result;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004730:	2320      	movs	r3, #32
 8004732:	e005      	b.n	8004740 <HAL_ADC_ConfigChannel+0x630>
 8004734:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f003 021f 	and.w	r2, r3, #31
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	3b1e      	subs	r3, #30
 800474e:	051b      	lsls	r3, r3, #20
 8004750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004754:	430b      	orrs	r3, r1
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6892      	ldr	r2, [r2, #8]
 800475a:	4619      	mov	r1, r3
 800475c:	f7ff f91c 	bl	8003998 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b45      	ldr	r3, [pc, #276]	; (800487c <HAL_ADC_ConfigChannel+0x76c>)
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d07c      	beq.n	8004866 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800476c:	4844      	ldr	r0, [pc, #272]	; (8004880 <HAL_ADC_ConfigChannel+0x770>)
 800476e:	f7ff f871 	bl	8003854 <LL_ADC_GetCommonPathInternalCh>
 8004772:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004776:	4843      	ldr	r0, [pc, #268]	; (8004884 <HAL_ADC_ConfigChannel+0x774>)
 8004778:	f7ff f9d4 	bl	8003b24 <LL_ADC_IsEnabled>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d15e      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a40      	ldr	r2, [pc, #256]	; (8004888 <HAL_ADC_ConfigChannel+0x778>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d127      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x6cc>
 800478c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d121      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a39      	ldr	r2, [pc, #228]	; (8004884 <HAL_ADC_ConfigChannel+0x774>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d161      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80047a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047aa:	4619      	mov	r1, r3
 80047ac:	4834      	ldr	r0, [pc, #208]	; (8004880 <HAL_ADC_ConfigChannel+0x770>)
 80047ae:	f7ff f83e 	bl	800382e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047b2:	4b36      	ldr	r3, [pc, #216]	; (800488c <HAL_ADC_ConfigChannel+0x77c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a35      	ldr	r2, [pc, #212]	; (8004890 <HAL_ADC_ConfigChannel+0x780>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	099b      	lsrs	r3, r3, #6
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80047cc:	e002      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f9      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047da:	e044      	b.n	8004866 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <HAL_ADC_ConfigChannel+0x784>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d113      	bne.n	800480e <HAL_ADC_ConfigChannel+0x6fe>
 80047e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a23      	ldr	r2, [pc, #140]	; (8004884 <HAL_ADC_ConfigChannel+0x774>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d134      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80047fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004804:	4619      	mov	r1, r3
 8004806:	481e      	ldr	r0, [pc, #120]	; (8004880 <HAL_ADC_ConfigChannel+0x770>)
 8004808:	f7ff f811 	bl	800382e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800480c:	e02b      	b.n	8004866 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_ADC_ConfigChannel+0x788>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d126      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x756>
 8004818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800481c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d120      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <HAL_ADC_ConfigChannel+0x774>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d11b      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800482e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004832:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004836:	4619      	mov	r1, r3
 8004838:	4811      	ldr	r0, [pc, #68]	; (8004880 <HAL_ADC_ConfigChannel+0x770>)
 800483a:	f7fe fff8 	bl	800382e <LL_ADC_SetCommonPathInternalCh>
 800483e:	e012      	b.n	8004866 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004852:	e008      	b.n	8004866 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800486e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004872:	4618      	mov	r0, r3
 8004874:	37d8      	adds	r7, #216	; 0xd8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	80080000 	.word	0x80080000
 8004880:	50040300 	.word	0x50040300
 8004884:	50040000 	.word	0x50040000
 8004888:	c7520000 	.word	0xc7520000
 800488c:	20000004 	.word	0x20000004
 8004890:	053e2d63 	.word	0x053e2d63
 8004894:	cb840000 	.word	0xcb840000
 8004898:	80000001 	.word	0x80000001

0800489c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f984 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 80048b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff f9a5 	bl	8003c0e <LL_ADC_INJ_IsConversionOngoing>
 80048c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8098 	beq.w	8004a04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02a      	beq.n	8004938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7e5b      	ldrb	r3, [r3, #25]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d126      	bne.n	8004938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7e1b      	ldrb	r3, [r3, #24]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d122      	bne.n	8004938 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048f6:	e014      	b.n	8004922 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4a45      	ldr	r2, [pc, #276]	; (8004a10 <ADC_ConversionStop+0x174>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d90d      	bls.n	800491c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e074      	b.n	8004a06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d1e3      	bne.n	80048f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d014      	beq.n	8004968 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff f93c 	bl	8003bc0 <LL_ADC_REG_IsConversionOngoing>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f8f9 	bl	8003b4a <LL_ADC_IsDisableOngoing>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f918 	bl	8003b98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d014      	beq.n	8004998 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f94b 	bl	8003c0e <LL_ADC_INJ_IsConversionOngoing>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff f8e1 	bl	8003b4a <LL_ADC_IsDisableOngoing>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f927 	bl	8003be6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d005      	beq.n	80049aa <ADC_ConversionStop+0x10e>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d105      	bne.n	80049b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049a4:	230c      	movs	r3, #12
 80049a6:	617b      	str	r3, [r7, #20]
        break;
 80049a8:	e005      	b.n	80049b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049aa:	2308      	movs	r3, #8
 80049ac:	617b      	str	r3, [r7, #20]
        break;
 80049ae:	e002      	b.n	80049b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049b0:	2304      	movs	r3, #4
 80049b2:	617b      	str	r3, [r7, #20]
        break;
 80049b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049b6:	f7fe feeb 	bl	8003790 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049bc:	e01b      	b.n	80049f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049be:	f7fe fee7 	bl	8003790 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d914      	bls.n	80049f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e007      	b.n	8004a06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1dc      	bne.n	80049be <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	a33fffff 	.word	0xa33fffff

08004a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f87d 	bl	8003b24 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d15e      	bne.n	8004aee <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <ADC_Enable+0xe4>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f043 0210 	orr.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e04a      	b.n	8004af0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff f838 	bl	8003ad4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a64:	4825      	ldr	r0, [pc, #148]	; (8004afc <ADC_Enable+0xe8>)
 8004a66:	f7fe fef5 	bl	8003854 <LL_ADC_GetCommonPathInternalCh>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00f      	beq.n	8004a94 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <ADC_Enable+0xec>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	4a22      	ldr	r2, [pc, #136]	; (8004b04 <ADC_Enable+0xf0>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	3301      	adds	r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004a86:	e002      	b.n	8004a8e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f9      	bne.n	8004a88 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a94:	f7fe fe7c 	bl	8003790 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9a:	e021      	b.n	8004ae0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f83f 	bl	8003b24 <LL_ADC_IsEnabled>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f80f 	bl	8003ad4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ab6:	f7fe fe6b 	bl	8003790 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d90d      	bls.n	8004ae0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	f043 0210 	orr.w	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e007      	b.n	8004af0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d1d6      	bne.n	8004a9c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	8000003f 	.word	0x8000003f
 8004afc:	50040300 	.word	0x50040300
 8004b00:	20000004 	.word	0x20000004
 8004b04:	053e2d63 	.word	0x053e2d63

08004b08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f818 	bl	8003b4a <LL_ADC_IsDisableOngoing>
 8004b1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe ffff 	bl	8003b24 <LL_ADC_IsEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d047      	beq.n	8004bbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d144      	bne.n	8004bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030d 	and.w	r3, r3, #13
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10c      	bne.n	8004b5a <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe ffd9 	bl	8003afc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b52:	f7fe fe1d 	bl	8003790 <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b58:	e029      	b.n	8004bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f043 0210 	orr.w	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e023      	b.n	8004bbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b76:	f7fe fe0b 	bl	8003790 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d914      	bls.n	8004bae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e007      	b.n	8004bbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1dc      	bne.n	8004b76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <__NVIC_SetPriorityGrouping+0x44>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bfa:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <__NVIC_SetPriorityGrouping+0x44>)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	60d3      	str	r3, [r2, #12]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <__NVIC_GetPriorityGrouping+0x18>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 0307 	and.w	r3, r3, #7
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db0b      	blt.n	8004c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4907      	ldr	r1, [pc, #28]	; (8004c64 <__NVIC_EnableIRQ+0x38>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db0a      	blt.n	8004c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <__NVIC_SetPriority+0x4c>)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c90:	e00a      	b.n	8004ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <__NVIC_SetPriority+0x50>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	761a      	strb	r2, [r3, #24]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	; 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f1c3 0307 	rsb	r3, r3, #7
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	bf28      	it	cs
 8004cda:	2304      	movcs	r3, #4
 8004cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d902      	bls.n	8004cec <NVIC_EncodePriority+0x30>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3b03      	subs	r3, #3
 8004cea:	e000      	b.n	8004cee <NVIC_EncodePriority+0x32>
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	401a      	ands	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d04:	f04f 31ff 	mov.w	r1, #4294967295
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	43d9      	mvns	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	4313      	orrs	r3, r2
         );
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	; 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff4c 	bl	8004bc8 <__NVIC_SetPriorityGrouping>
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d46:	f7ff ff63 	bl	8004c10 <__NVIC_GetPriorityGrouping>
 8004d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	6978      	ldr	r0, [r7, #20]
 8004d52:	f7ff ffb3 	bl	8004cbc <NVIC_EncodePriority>
 8004d56:	4602      	mov	r2, r0
 8004d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff82 	bl	8004c68 <__NVIC_SetPriority>
}
 8004d64:	bf00      	nop
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff56 	bl	8004c2c <__NVIC_EnableIRQ>
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08e      	b.n	8004eb8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <HAL_DMA_Init+0x138>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d80f      	bhi.n	8004dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b45      	ldr	r3, [pc, #276]	; (8004ec4 <HAL_DMA_Init+0x13c>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a45      	ldr	r2, [pc, #276]	; (8004ec8 <HAL_DMA_Init+0x140>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	; (8004ecc <HAL_DMA_Init+0x144>)
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8004dc4:	e00e      	b.n	8004de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <HAL_DMA_Init+0x148>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a3d      	ldr	r2, [pc, #244]	; (8004ec8 <HAL_DMA_Init+0x140>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_DMA_Init+0x14c>)
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8fe 	bl	8005038 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e44:	d102      	bne.n	8004e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004e58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_DMA_Init+0x106>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d80c      	bhi.n	8004e8e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f91d 	bl	80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e008      	b.n	8004ea0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40020407 	.word	0x40020407
 8004ec4:	bffdfff8 	.word	0xbffdfff8
 8004ec8:	cccccccd 	.word	0xcccccccd
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	bffdfbf8 	.word	0xbffdfbf8
 8004ed4:	40020400 	.word	0x40020400

08004ed8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	f003 031c 	and.w	r3, r3, #28
 8004ef8:	2204      	movs	r2, #4
 8004efa:	409a      	lsls	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d026      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x7a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d021      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f003 021c 	and.w	r2, r3, #28
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2104      	movs	r1, #4
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d071      	beq.n	800502c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f50:	e06c      	b.n	800502c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f003 031c 	and.w	r3, r3, #28
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02e      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0xec>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d029      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 020a 	bic.w	r2, r2, #10
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f003 021c 	and.w	r2, r3, #28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d038      	beq.n	800502c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fc2:	e033      	b.n	800502c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	f003 031c 	and.w	r3, r3, #28
 8004fcc:	2208      	movs	r2, #8
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02a      	beq.n	800502e <HAL_DMA_IRQHandler+0x156>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d025      	beq.n	800502e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 020e 	bic.w	r2, r2, #14
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f003 021c 	and.w	r2, r3, #28
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f202 	lsl.w	r2, r1, r2
 8005004:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800502c:	bf00      	nop
 800502e:	bf00      	nop
}
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005048:	429a      	cmp	r2, r3
 800504a:	d80a      	bhi.n	8005062 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	089b      	lsrs	r3, r3, #2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005058:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6493      	str	r3, [r2, #72]	; 0x48
 8005060:	e007      	b.n	8005072 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	009a      	lsls	r2, r3, #2
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800506c:	4413      	add	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	3b08      	subs	r3, #8
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005088:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40020407 	.word	0x40020407
 80050a8:	4002081c 	.word	0x4002081c
 80050ac:	cccccccd 	.word	0xcccccccd
 80050b0:	40020880 	.word	0x40020880

080050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b01      	subs	r3, #1
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2201      	movs	r2, #1
 80050e4:	409a      	lsls	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	1000823f 	.word	0x1000823f
 80050fc:	40020940 	.word	0x40020940

08005100 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510e:	e14c      	b.n	80053aa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 813e 	beq.w	80053a4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d00b      	beq.n	8005148 <HAL_GPIO_Init+0x48>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d007      	beq.n	8005148 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800513c:	2b11      	cmp	r3, #17
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b12      	cmp	r3, #18
 8005146:	d130      	bne.n	80051aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2203      	movs	r2, #3
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4013      	ands	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800517e:	2201      	movs	r2, #1
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f003 0201 	and.w	r2, r3, #1
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	2203      	movs	r2, #3
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0xea>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b12      	cmp	r3, #18
 80051e8:	d123      	bne.n	8005232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	08da      	lsrs	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3208      	adds	r2, #8
 80051f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	220f      	movs	r2, #15
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	6939      	ldr	r1, [r7, #16]
 800522e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	2203      	movs	r2, #3
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4013      	ands	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 0203 	and.w	r2, r3, #3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8098 	beq.w	80053a4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005274:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_GPIO_Init+0x2c8>)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	3302      	adds	r3, #2
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	220f      	movs	r2, #15
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800529e:	d019      	beq.n	80052d4 <HAL_GPIO_Init+0x1d4>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a4a      	ldr	r2, [pc, #296]	; (80053cc <HAL_GPIO_Init+0x2cc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_GPIO_Init+0x1d0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a49      	ldr	r2, [pc, #292]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00d      	beq.n	80052cc <HAL_GPIO_Init+0x1cc>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a48      	ldr	r2, [pc, #288]	; (80053d4 <HAL_GPIO_Init+0x2d4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <HAL_GPIO_Init+0x1c8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a47      	ldr	r2, [pc, #284]	; (80053d8 <HAL_GPIO_Init+0x2d8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_GPIO_Init+0x1c4>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e008      	b.n	80052d6 <HAL_GPIO_Init+0x1d6>
 80052c4:	2307      	movs	r3, #7
 80052c6:	e006      	b.n	80052d6 <HAL_GPIO_Init+0x1d6>
 80052c8:	2303      	movs	r3, #3
 80052ca:	e004      	b.n	80052d6 <HAL_GPIO_Init+0x1d6>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e002      	b.n	80052d6 <HAL_GPIO_Init+0x1d6>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <HAL_GPIO_Init+0x1d6>
 80052d4:	2300      	movs	r3, #0
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	f002 0203 	and.w	r2, r2, #3
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	4093      	lsls	r3, r2
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052e6:	4938      	ldr	r1, [pc, #224]	; (80053c8 <HAL_GPIO_Init+0x2c8>)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	3302      	adds	r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052f4:	4b39      	ldr	r3, [pc, #228]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	43db      	mvns	r3, r3
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800531a:	4a30      	ldr	r2, [pc, #192]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	43db      	mvns	r3, r3
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4013      	ands	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005348:	4a24      	ldr	r2, [pc, #144]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	43db      	mvns	r3, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800537a:	4b18      	ldr	r3, [pc, #96]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	43db      	mvns	r3, r3
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800539e:	4a0f      	ldr	r2, [pc, #60]	; (80053dc <HAL_GPIO_Init+0x2dc>)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3301      	adds	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f aeab 	bne.w	8005110 <HAL_GPIO_Init+0x10>
  }
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000
 80053cc:	48000400 	.word	0x48000400
 80053d0:	48000800 	.word	0x48000800
 80053d4:	48000c00 	.word	0x48000c00
 80053d8:	48001000 	.word	0x48001000
 80053dc:	58000800 	.word	0x58000800

080053e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
 80053ec:	4613      	mov	r3, r2
 80053ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053f0:	787b      	ldrb	r3, [r7, #1]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053fc:	e002      	b.n	8005404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e081      	b.n	8005526 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb ff2a 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d107      	bne.n	800548a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	e006      	b.n	8005498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d104      	bne.n	80054aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	ea42 0103 	orr.w	r1, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	461a      	mov	r2, r3
 800553c:	460b      	mov	r3, r1
 800553e:	817b      	strh	r3, [r7, #10]
 8005540:	4613      	mov	r3, r2
 8005542:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b20      	cmp	r3, #32
 800554e:	f040 80da 	bne.w	8005706 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_I2C_Master_Transmit+0x30>
 800555c:	2302      	movs	r3, #2
 800555e:	e0d3      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005568:	f7fe f912 	bl	8003790 <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2319      	movs	r3, #25
 8005574:	2201      	movs	r2, #1
 8005576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f8f0 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0be      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	; 0x21
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2210      	movs	r2, #16
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	893a      	ldrh	r2, [r7, #8]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2bff      	cmp	r3, #255	; 0xff
 80055ba:	d90e      	bls.n	80055da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	22ff      	movs	r2, #255	; 0xff
 80055c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	4b51      	ldr	r3, [pc, #324]	; (8005710 <HAL_I2C_Master_Transmit+0x1e0>)
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f9e6 	bl	80059a4 <I2C_TransferConfig>
 80055d8:	e06c      	b.n	80056b4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	8979      	ldrh	r1, [r7, #10]
 80055ec:	4b48      	ldr	r3, [pc, #288]	; (8005710 <HAL_I2C_Master_Transmit+0x1e0>)
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f9d5 	bl	80059a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80055fa:	e05b      	b.n	80056b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	6a39      	ldr	r1, [r7, #32]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f8ed 	bl	80057e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e07b      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d034      	beq.n	80056b4 <HAL_I2C_Master_Transmit+0x184>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	2b00      	cmp	r3, #0
 8005650:	d130      	bne.n	80056b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f87f 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e04d      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	2bff      	cmp	r3, #255	; 0xff
 8005674:	d90e      	bls.n	8005694 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005680:	b2da      	uxtb	r2, r3
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	2300      	movs	r3, #0
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f989 	bl	80059a4 <I2C_TransferConfig>
 8005692:	e00f      	b.n	80056b4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	8979      	ldrh	r1, [r7, #10]
 80056a6:	2300      	movs	r3, #0
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f978 	bl	80059a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d19e      	bne.n	80055fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	6a39      	ldr	r1, [r7, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f8cc 	bl	8005860 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e01a      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_I2C_Master_Transmit+0x1e4>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	80002000 	.word	0x80002000
 8005714:	fe00e800 	.word	0xfe00e800

08005718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d007      	beq.n	8005754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	619a      	str	r2, [r3, #24]
  }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005770:	e022      	b.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d01e      	beq.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fe f809 	bl	8003790 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d113      	bne.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e00f      	b.n	80057d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0cd      	beq.n	8005772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057ec:	e02c      	b.n	8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f870 	bl	80058d8 <I2C_IsAcknowledgeFailed>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e02a      	b.n	8005858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d01e      	beq.n	8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fd ffc1 	bl	8003790 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d113      	bne.n	8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e007      	b.n	8005858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d1cb      	bne.n	80057ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800586c:	e028      	b.n	80058c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f830 	bl	80058d8 <I2C_IsAcknowledgeFailed>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e026      	b.n	80058d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005882:	f7fd ff85 	bl	8003790 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d113      	bne.n	80058c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e007      	b.n	80058d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d1cf      	bne.n	800586e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d151      	bne.n	8005996 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f2:	e022      	b.n	800593a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d01e      	beq.n	800593a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fc:	f7fd ff48 	bl	8003790 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <I2C_IsAcknowledgeFailed+0x3a>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d113      	bne.n	800593a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e02e      	b.n	8005998 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b20      	cmp	r3, #32
 8005946:	d1d5      	bne.n	80058f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2210      	movs	r2, #16
 800594e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2220      	movs	r2, #32
 8005956:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fedd 	bl	8005718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800596a:	400b      	ands	r3, r1
 800596c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f043 0204 	orr.w	r2, r3, #4
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	fe00e800 	.word	0xfe00e800

080059a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	817b      	strh	r3, [r7, #10]
 80059b2:	4613      	mov	r3, r2
 80059b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	0d5b      	lsrs	r3, r3, #21
 80059c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <I2C_TransferConfig+0x58>)
 80059c6:	430b      	orrs	r3, r1
 80059c8:	43db      	mvns	r3, r3
 80059ca:	ea02 0103 	and.w	r1, r2, r3
 80059ce:	897b      	ldrh	r3, [r7, #10]
 80059d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059d4:	7a7b      	ldrb	r3, [r7, #9]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	03ff63ff 	.word	0x03ff63ff

08005a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d138      	bne.n	8005a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e032      	b.n	8005a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	; 0x24
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d139      	bne.n	8005b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e033      	b.n	8005b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2224      	movs	r2, #36	; 0x24
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b30:	b08b      	sub	sp, #44	; 0x2c
 8005b32:	af06      	add	r7, sp, #24
 8005b34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0d7      	b.n	8005cf0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fb fc6f 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f002 ff2e 	bl	80089c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e04c      	b.n	8005c0c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	440b      	add	r3, r1
 8005b82:	3301      	adds	r3, #1
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	7bfa      	ldrb	r2, [r7, #15]
 8005b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b9c:	7bfa      	ldrb	r2, [r7, #15]
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	b298      	uxth	r0, r3
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	3336      	adds	r3, #54	; 0x36
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3338      	adds	r3, #56	; 0x38
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bde:	7bfa      	ldrb	r2, [r7, #15]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	333c      	adds	r3, #60	; 0x3c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bf2:	7bfa      	ldrb	r2, [r7, #15]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	440b      	add	r3, r1
 8005c00:	3340      	adds	r3, #64	; 0x40
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3ad      	bcc.n	8005b72 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
 8005c1a:	e044      	b.n	8005ca6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c1c:	7bfa      	ldrb	r2, [r7, #15]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c32:	7bfa      	ldrb	r2, [r7, #15]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	440b      	add	r3, r1
 8005c40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c48:	7bfa      	ldrb	r2, [r7, #15]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	440b      	add	r3, r1
 8005c56:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c5e:	7bfa      	ldrb	r2, [r7, #15]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c74:	7bfa      	ldrb	r2, [r7, #15]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	440b      	add	r3, r1
 8005c98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3b5      	bcc.n	8005c1c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	687e      	ldr	r6, [r7, #4]
 8005cb8:	466d      	mov	r5, sp
 8005cba:	f106 0410 	add.w	r4, r6, #16
 8005cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	1d33      	adds	r3, r6, #4
 8005cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f002 fe97 	bl	80089fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f805 	bl	8005cf8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5a:	6013      	str	r3, [r2, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	58000400 	.word	0x58000400

08005d6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	58000400 	.word	0x58000400

08005d88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9a:	d101      	bne.n	8005da0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <LL_RCC_HSE_Enable>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_HSE_Disable>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_HSE_IsReady>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dfa:	d101      	bne.n	8005e00 <LL_RCC_HSE_IsReady+0x18>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <LL_RCC_HSE_IsReady+0x1a>
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_RCC_HSI_Enable>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <LL_RCC_HSI_Disable>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_HSI_IsReady>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d101      	bne.n	8005e60 <LL_RCC_HSI_IsReady+0x18>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <LL_RCC_HSI_IsReady+0x1a>
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	061b      	lsls	r3, r3, #24
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e86:	4313      	orrs	r3, r2
 8005e88:	604b      	str	r3, [r1, #4]
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <LL_RCC_HSI48_Enable>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005eae:	bf00      	nop
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_RCC_HSI48_Disable>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_HSI48_IsReady>:
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d101      	bne.n	8005ef2 <LL_RCC_HSI48_IsReady+0x18>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <LL_RCC_HSI48_IsReady+0x1a>
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_RCC_LSE_Enable>:
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_RCC_LSE_Disable>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f38:	bf00      	nop
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_RCC_LSE_EnableBypass>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f52:	f043 0304 	orr.w	r3, r3, #4
 8005f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_RCC_LSE_DisableBypass>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f74:	f023 0304 	bic.w	r3, r3, #4
 8005f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d101      	bne.n	8005f9e <LL_RCC_LSE_IsReady+0x18>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <LL_RCC_LSE_IsReady+0x1a>
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8005faa:	b480      	push	{r7}
 8005fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d101      	bne.n	8006006 <LL_RCC_LSI1_IsReady+0x18>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <LL_RCC_LSI1_IsReady+0x1a>
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006022:	f043 0304 	orr.w	r3, r3, #4
 8006026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800602a:	bf00      	nop
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b08      	cmp	r3, #8
 8006068:	d101      	bne.n	800606e <LL_RCC_LSI2_IsReady+0x18>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <LL_RCC_LSI2_IsReady+0x1a>
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80060c6:	b480      	push	{r7}
 80060c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
}
 80060da:	bf00      	nop
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d101      	bne.n	80060fa <LL_RCC_MSI_IsReady+0x16>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <LL_RCC_MSI_IsReady+0x18>
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800610e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	600b      	str	r3, [r1, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800613e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2bb0      	cmp	r3, #176	; 0xb0
 8006144:	d901      	bls.n	800614a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006146:	23b0      	movs	r3, #176	; 0xb0
 8006148:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800614a:	687b      	ldr	r3, [r7, #4]
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006172:	4313      	orrs	r3, r2
 8006174:	604b      	str	r3, [r1, #4]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800618a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f023 0203 	bic.w	r2, r3, #3
 8006194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	608b      	str	r3, [r1, #8]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 030c 	and.w	r3, r3, #12
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006226:	f023 020f 	bic.w	r2, r3, #15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4313      	orrs	r3, r2
 800625e:	608b      	str	r3, [r1, #8]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800627e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4313      	orrs	r3, r2
 8006286:	608b      	str	r3, [r1, #8]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80062c6:	b480      	push	{r7}
 80062c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006324:	6013      	str	r3, [r2, #0]
}
 8006326:	bf00      	nop
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006360:	d101      	bne.n	8006366 <LL_RCC_PLL_IsReady+0x18>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <LL_RCC_PLL_IsReady+0x1a>
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006382:	4618      	mov	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800639a:	4618      	mov	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0303 	and.w	r3, r3, #3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e6:	d101      	bne.n	80063ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640c:	d101      	bne.n	8006412 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006426:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800642a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006432:	d101      	bne.n	8006438 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006456:	d101      	bne.n	800645c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800647a:	d101      	bne.n	8006480 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800648c:	b590      	push	{r4, r7, lr}
 800648e:	b08d      	sub	sp, #52	; 0x34
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e37e      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8092 	beq.w	80065d0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ac:	f7ff fe7d 	bl	80061aa <LL_RCC_GetSysClkSource>
 80064b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064b2:	f7ff ff83 	bl	80063bc <LL_RCC_PLL_GetMainSource>
 80064b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_RCC_OscConfig+0x3e>
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d14c      	bne.n	800655e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d149      	bne.n	800655e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064ca:	f7ff fe0b 	bl	80060e4 <LL_RCC_MSI_IsReady>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_OscConfig+0x54>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e35d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80064e4:	f7ff fe23 	bl	800612e <LL_RCC_MSI_GetRange>
 80064e8:	4603      	mov	r3, r0
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d914      	bls.n	8006518 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fd74 	bl	8006fe0 <RCC_SetFlashLatencyFromMSIRange>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e34c      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fdfd 	bl	8006106 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fe21 	bl	8006158 <LL_RCC_MSI_SetCalibTrimming>
 8006516:	e013      	b.n	8006540 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fdf2 	bl	8006106 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fe16 	bl	8006158 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fd55 	bl	8006fe0 <RCC_SetFlashLatencyFromMSIRange>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e32d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006540:	f000 fcdc 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006544:	4603      	mov	r3, r0
 8006546:	4ab3      	ldr	r2, [pc, #716]	; (8006814 <HAL_RCC_OscConfig+0x388>)
 8006548:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800654a:	4bb3      	ldr	r3, [pc, #716]	; (8006818 <HAL_RCC_OscConfig+0x38c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fa ffbc 	bl	80014cc <HAL_InitTick>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d039      	beq.n	80065ce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e31e      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01e      	beq.n	80065a4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006566:	f7ff fd9f 	bl	80060a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800656a:	f7fd f911 	bl	8003790 <HAL_GetTick>
 800656e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006572:	f7fd f90d 	bl	8003790 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e30b      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006584:	f7ff fdae 	bl	80060e4 <LL_RCC_MSI_IsReady>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f1      	beq.n	8006572 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fdb7 	bl	8006106 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fddb 	bl	8006158 <LL_RCC_MSI_SetCalibTrimming>
 80065a2:	e015      	b.n	80065d0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065a4:	f7ff fd8f 	bl	80060c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065a8:	f7fd f8f2 	bl	8003790 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065b0:	f7fd f8ee 	bl	8003790 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e2ec      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80065c2:	f7ff fd8f 	bl	80060e4 <LL_RCC_MSI_IsReady>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f1      	bne.n	80065b0 <HAL_RCC_OscConfig+0x124>
 80065cc:	e000      	b.n	80065d0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d04e      	beq.n	800667a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065dc:	f7ff fde5 	bl	80061aa <LL_RCC_GetSysClkSource>
 80065e0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e2:	f7ff feeb 	bl	80063bc <LL_RCC_PLL_GetMainSource>
 80065e6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d005      	beq.n	80065fa <HAL_RCC_OscConfig+0x16e>
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d10d      	bne.n	8006610 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d10a      	bne.n	8006610 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065fa:	f7ff fbf5 	bl	8005de8 <LL_RCC_HSE_IsReady>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d039      	beq.n	8006678 <HAL_RCC_OscConfig+0x1ec>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d135      	bne.n	8006678 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e2c5      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d102      	bne.n	8006620 <HAL_RCC_OscConfig+0x194>
 800661a:	f7ff fbc7 	bl	8005dac <LL_RCC_HSE_Enable>
 800661e:	e001      	b.n	8006624 <HAL_RCC_OscConfig+0x198>
 8006620:	f7ff fbd3 	bl	8005dca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662c:	f7fd f8b0 	bl	8003790 <HAL_GetTick>
 8006630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006634:	f7fd f8ac 	bl	8003790 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	; 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e2aa      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006646:	f7ff fbcf 	bl	8005de8 <LL_RCC_HSE_IsReady>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f1      	beq.n	8006634 <HAL_RCC_OscConfig+0x1a8>
 8006650:	e013      	b.n	800667a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006652:	f7fd f89d 	bl	8003790 <HAL_GetTick>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800665a:	f7fd f899 	bl	8003790 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e297      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800666c:	f7ff fbbc 	bl	8005de8 <LL_RCC_HSE_IsReady>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f1      	bne.n	800665a <HAL_RCC_OscConfig+0x1ce>
 8006676:	e000      	b.n	800667a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d051      	beq.n	800672a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006686:	f7ff fd90 	bl	80061aa <LL_RCC_GetSysClkSource>
 800668a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800668c:	f7ff fe96 	bl	80063bc <LL_RCC_PLL_GetMainSource>
 8006690:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_OscConfig+0x218>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b0c      	cmp	r3, #12
 800669c:	d113      	bne.n	80066c6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d110      	bne.n	80066c6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a4:	f7ff fbd0 	bl	8005e48 <LL_RCC_HSI_IsReady>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_RCC_OscConfig+0x22e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e270      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fbd4 	bl	8005e6c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c4:	e031      	b.n	800672a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d019      	beq.n	8006702 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ce:	f7ff fb9d 	bl	8005e0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fd f85d 	bl	8003790 <HAL_GetTick>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066da:	f7fd f859 	bl	8003790 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e257      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80066ec:	f7ff fbac 	bl	8005e48 <LL_RCC_HSI_IsReady>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f1      	beq.n	80066da <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff fbb6 	bl	8005e6c <LL_RCC_HSI_SetCalibTrimming>
 8006700:	e013      	b.n	800672a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006702:	f7ff fb92 	bl	8005e2a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fd f843 	bl	8003790 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670e:	f7fd f83f 	bl	8003790 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e23d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006720:	f7ff fb92 	bl	8005e48 <LL_RCC_HSI_IsReady>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f1      	bne.n	800670e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80a3 	beq.w	800688a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d076      	beq.n	800683a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	d046      	beq.n	80067e6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006758:	f7ff fc49 	bl	8005fee <LL_RCC_LSI1_IsReady>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d113      	bne.n	800678a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006762:	f7ff fc22 	bl	8005faa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006766:	f7fd f813 	bl	8003790 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800676e:	f7fd f80f 	bl	8003790 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e20d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006780:	f7ff fc35 	bl	8005fee <LL_RCC_LSI1_IsReady>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f1      	beq.n	800676e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800678a:	f7ff fc42 	bl	8006012 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678e:	f7fc ffff 	bl	8003790 <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006796:	f7fc fffb 	bl	8003790 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e1f9      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80067a8:	f7ff fc55 	bl	8006056 <LL_RCC_LSI2_IsReady>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f1      	beq.n	8006796 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fc5f 	bl	800607a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80067bc:	f7ff fc06 	bl	8005fcc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fc ffe6 	bl	8003790 <HAL_GetTick>
 80067c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067c8:	f7fc ffe2 	bl	8003790 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e1e0      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067da:	f7ff fc08 	bl	8005fee <LL_RCC_LSI1_IsReady>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f1      	bne.n	80067c8 <HAL_RCC_OscConfig+0x33c>
 80067e4:	e051      	b.n	800688a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80067e6:	f7ff fbe0 	bl	8005faa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fc ffd1 	bl	8003790 <HAL_GetTick>
 80067ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067f2:	f7fc ffcd 	bl	8003790 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e1cb      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006804:	f7ff fbf3 	bl	8005fee <LL_RCC_LSI1_IsReady>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f1      	beq.n	80067f2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800680e:	f7ff fc11 	bl	8006034 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006812:	e00c      	b.n	800682e <HAL_RCC_OscConfig+0x3a2>
 8006814:	20000004 	.word	0x20000004
 8006818:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800681c:	f7fc ffb8 	bl	8003790 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e1b6      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800682e:	f7ff fc12 	bl	8006056 <LL_RCC_LSI2_IsReady>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f1      	bne.n	800681c <HAL_RCC_OscConfig+0x390>
 8006838:	e027      	b.n	800688a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800683a:	f7ff fbfb 	bl	8006034 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683e:	f7fc ffa7 	bl	8003790 <HAL_GetTick>
 8006842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006846:	f7fc ffa3 	bl	8003790 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b03      	cmp	r3, #3
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1a1      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006858:	f7ff fbfd 	bl	8006056 <LL_RCC_LSI2_IsReady>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f1      	bne.n	8006846 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006862:	f7ff fbb3 	bl	8005fcc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006866:	f7fc ff93 	bl	8003790 <HAL_GetTick>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800686e:	f7fc ff8f 	bl	8003790 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e18d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006880:	f7ff fbb5 	bl	8005fee <LL_RCC_LSI1_IsReady>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f1      	bne.n	800686e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d05b      	beq.n	800694e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006896:	4bb5      	ldr	r3, [pc, #724]	; (8006b6c <HAL_RCC_OscConfig+0x6e0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d114      	bne.n	80068cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80068a2:	f7ff fa53 	bl	8005d4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068a6:	f7fc ff73 	bl	8003790 <HAL_GetTick>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ae:	f7fc ff6f 	bl	8003790 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e16d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c0:	4baa      	ldr	r3, [pc, #680]	; (8006b6c <HAL_RCC_OscConfig+0x6e0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d102      	bne.n	80068da <HAL_RCC_OscConfig+0x44e>
 80068d4:	f7ff fb13 	bl	8005efe <LL_RCC_LSE_Enable>
 80068d8:	e00c      	b.n	80068f4 <HAL_RCC_OscConfig+0x468>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b05      	cmp	r3, #5
 80068e0:	d104      	bne.n	80068ec <HAL_RCC_OscConfig+0x460>
 80068e2:	f7ff fb2e 	bl	8005f42 <LL_RCC_LSE_EnableBypass>
 80068e6:	f7ff fb0a 	bl	8005efe <LL_RCC_LSE_Enable>
 80068ea:	e003      	b.n	80068f4 <HAL_RCC_OscConfig+0x468>
 80068ec:	f7ff fb18 	bl	8005f20 <LL_RCC_LSE_Disable>
 80068f0:	f7ff fb38 	bl	8005f64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d014      	beq.n	8006926 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fc:	f7fc ff48 	bl	8003790 <HAL_GetTick>
 8006900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006902:	e00a      	b.n	800691a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fc ff44 	bl	8003790 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e140      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800691a:	f7ff fb34 	bl	8005f86 <LL_RCC_LSE_IsReady>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0ef      	beq.n	8006904 <HAL_RCC_OscConfig+0x478>
 8006924:	e013      	b.n	800694e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006926:	f7fc ff33 	bl	8003790 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800692c:	e00a      	b.n	8006944 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fc ff2f 	bl	8003790 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	f241 3288 	movw	r2, #5000	; 0x1388
 800693c:	4293      	cmp	r3, r2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e12b      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006944:	f7ff fb1f 	bl	8005f86 <LL_RCC_LSE_IsReady>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ef      	bne.n	800692e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d02c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d014      	beq.n	800698c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006962:	f7ff fa98 	bl	8005e96 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fc ff13 	bl	8003790 <HAL_GetTick>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800696e:	f7fc ff0f 	bl	8003790 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e10d      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006980:	f7ff faab 	bl	8005eda <LL_RCC_HSI48_IsReady>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f1      	beq.n	800696e <HAL_RCC_OscConfig+0x4e2>
 800698a:	e013      	b.n	80069b4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800698c:	f7ff fa94 	bl	8005eb8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fc fefe 	bl	8003790 <HAL_GetTick>
 8006994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006998:	f7fc fefa 	bl	8003790 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e0f8      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80069aa:	f7ff fa96 	bl	8005eda <LL_RCC_HSI48_IsReady>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f1      	bne.n	8006998 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80ee 	beq.w	8006b9a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069be:	f7ff fbf4 	bl	80061aa <LL_RCC_GetSysClkSource>
 80069c2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	f040 80af 	bne.w	8006b34 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0203 	and.w	r2, r3, #3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d123      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d11c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d114      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d10d      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d106      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d05d      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d058      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0ab      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a44:	f7ff fc74 	bl	8006330 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a48:	f7fc fea2 	bl	8003790 <HAL_GetTick>
 8006a4c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a50:	f7fc fe9e 	bl	8003790 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e09c      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ef      	bne.n	8006a50 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <HAL_RCC_OscConfig+0x6e4>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a82:	4311      	orrs	r1, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a88:	0212      	lsls	r2, r2, #8
 8006a8a:	4311      	orrs	r1, r2
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a90:	4311      	orrs	r1, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a96:	4311      	orrs	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006aa6:	f7ff fc34 	bl	8006312 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aba:	f7fc fe69 	bl	8003790 <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fc fe65 	bl	8003790 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e063      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ef      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ae2:	e05a      	b.n	8006b9a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e059      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d151      	bne.n	8006b9a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006af6:	f7ff fc0c 	bl	8006312 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b0a:	f7fc fe41 	bl	8003790 <HAL_GetTick>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b12:	f7fc fe3d 	bl	8003790 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e03b      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ef      	beq.n	8006b12 <HAL_RCC_OscConfig+0x686>
 8006b32:	e032      	b.n	8006b9a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d02d      	beq.n	8006b96 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3a:	f7ff fbf9 	bl	8006330 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b58:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b62:	f7fc fe15 	bl	8003790 <HAL_GetTick>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b68:	e00d      	b.n	8006b86 <HAL_RCC_OscConfig+0x6fa>
 8006b6a:	bf00      	nop
 8006b6c:	58000400 	.word	0x58000400
 8006b70:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fc fe0c 	bl	8003790 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ef      	bne.n	8006b74 <HAL_RCC_OscConfig+0x6e8>
 8006b94:	e001      	b.n	8006b9a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3734      	adds	r7, #52	; 0x34
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}

08006ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e12d      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb8:	4b98      	ldr	r3, [pc, #608]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d91b      	bls.n	8006bfe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc6:	4b95      	ldr	r3, [pc, #596]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 0207 	bic.w	r2, r3, #7
 8006bce:	4993      	ldr	r1, [pc, #588]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fc fddb 	bl	8003790 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bde:	f7fc fdd7 	bl	8003790 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e111      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf0:	4b8a      	ldr	r3, [pc, #552]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d1ef      	bne.n	8006bde <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fad7 	bl	80061c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c14:	f7fc fdbc 	bl	8003790 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c1c:	f7fc fdb8 	bl	8003790 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e0f2      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c2e:	f7ff fbd1 	bl	80063d4 <LL_RCC_IsActiveFlag_HPRE>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f1      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d016      	beq.n	8006c72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff face 	bl	80061ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c4e:	f7fc fd9f 	bl	8003790 <HAL_GetTick>
 8006c52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c56:	f7fc fd9b 	bl	8003790 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e0d5      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c68:	f7ff fbc6 	bl	80063f8 <LL_RCC_IsActiveFlag_C2HPRE>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f1      	beq.n	8006c56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fac7 	bl	8006216 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c88:	f7fc fd82 	bl	8003790 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c90:	f7fc fd7e 	bl	8003790 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e0b8      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ca2:	f7ff fbbc 	bl	800641e <LL_RCC_IsActiveFlag_SHDHPRE>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f1      	beq.n	8006c90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fac1 	bl	8006244 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cc2:	f7fc fd65 	bl	8003790 <HAL_GetTick>
 8006cc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cca:	f7fc fd61 	bl	8003790 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e09b      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cdc:	f7ff fbb2 	bl	8006444 <LL_RCC_IsActiveFlag_PPRE1>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f1      	beq.n	8006cca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d017      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fab7 	bl	800626c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cfe:	f7fc fd47 	bl	8003790 <HAL_GetTick>
 8006d02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d06:	f7fc fd43 	bl	8003790 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e07d      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d18:	f7ff fba6 	bl	8006468 <LL_RCC_IsActiveFlag_PPRE2>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f1      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d043      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d106      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006d36:	f7ff f857 	bl	8005de8 <LL_RCC_HSE_IsReady>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11e      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e067      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006d4c:	f7ff faff 	bl	800634e <LL_RCC_PLL_IsReady>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d113      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e05c      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006d62:	f7ff f9bf 	bl	80060e4 <LL_RCC_MSI_IsReady>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e051      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006d70:	f7ff f86a 	bl	8005e48 <LL_RCC_HSI_IsReady>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e04a      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff f9fd 	bl	8006182 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d88:	f7fc fd02 	bl	8003790 <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d90:	f7fc fcfe 	bl	8003790 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e036      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da6:	f7ff fa00 	bl	80061aa <LL_RCC_GetSysClkSource>
 8006daa:	4602      	mov	r2, r0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d1ec      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d21b      	bcs.n	8006dfc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f023 0207 	bic.w	r2, r3, #7
 8006dcc:	4913      	ldr	r1, [pc, #76]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd4:	f7fc fcdc 	bl	8003790 <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ddc:	f7fc fcd8 	bl	8003790 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e012      	b.n	8006e14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <HAL_RCC_ClockConfig+0x278>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1ef      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006dfc:	f000 f87e 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <HAL_RCC_ClockConfig+0x27c>)
 8006e04:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006e06:	f7fc fccf 	bl	80037a8 <HAL_GetTickPrio>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fa fb5d 	bl	80014cc <HAL_InitTick>
 8006e12:	4603      	mov	r3, r0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	58004000 	.word	0x58004000
 8006e20:	20000004 	.word	0x20000004

08006e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e2a:	f7ff f9be 	bl	80061aa <LL_RCC_GetSysClkSource>
 8006e2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e36:	f7ff f97a 	bl	800612e <LL_RCC_MSI_GetRange>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	e04b      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d102      	bne.n	8006e58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e52:	4b28      	ldr	r3, [pc, #160]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e045      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d10a      	bne.n	8006e74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e5e:	f7fe ff93 	bl	8005d88 <LL_RCC_HSE_IsEnabledDiv2>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006e68:	4b22      	ldr	r3, [pc, #136]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e03a      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006e6e:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e037      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006e74:	f7ff faa2 	bl	80063bc <LL_RCC_PLL_GetMainSource>
 8006e78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x64>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0x6a>
 8006e86:	e00d      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e8a:	60bb      	str	r3, [r7, #8]
        break;
 8006e8c:	e015      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e8e:	f7fe ff7b 	bl	8005d88 <LL_RCC_HSE_IsEnabledDiv2>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d102      	bne.n	8006e9e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e9a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006e9c:	e00d      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006e9e:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ea0:	60bb      	str	r3, [r7, #8]
        break;
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ea4:	f7ff f943 	bl	800612e <LL_RCC_MSI_GetRange>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	60bb      	str	r3, [r7, #8]
        break;
 8006eb8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006eba:	f7ff fa5a 	bl	8006372 <LL_RCC_PLL_GetN>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	fb03 f402 	mul.w	r4, r3, r2
 8006ec6:	f7ff fa6d 	bl	80063a4 <LL_RCC_PLL_GetDivider>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	3301      	adds	r3, #1
 8006ed0:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ed4:	f7ff fa5a 	bl	800638c <LL_RCC_PLL_GetR>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	0f5b      	lsrs	r3, r3, #29
 8006edc:	3301      	adds	r3, #1
 8006ede:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ee2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0800ba30 	.word	0x0800ba30
 8006ef4:	00f42400 	.word	0x00f42400
 8006ef8:	01e84800 	.word	0x01e84800

08006efc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006efc:	b598      	push	{r3, r4, r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006f00:	f7ff ff90 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8006f04:	4604      	mov	r4, r0
 8006f06:	f7ff f9c5 	bl	8006294 <LL_RCC_GetAHBPrescaler>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	4a03      	ldr	r2, [pc, #12]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x24>)
 8006f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd98      	pop	{r3, r4, r7, pc}
 8006f20:	0800b9d0 	.word	0x0800b9d0

08006f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f24:	b598      	push	{r3, r4, r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006f28:	f7ff ffe8 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f7ff f9d8 	bl	80062e2 <LL_RCC_GetAPB1Prescaler>
 8006f32:	4603      	mov	r3, r0
 8006f34:	0a1b      	lsrs	r3, r3, #8
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd98      	pop	{r3, r4, r7, pc}
 8006f4c:	0800ba10 	.word	0x0800ba10

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b598      	push	{r3, r4, r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006f54:	f7ff ffd2 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	f7ff f9ce 	bl	80062fa <LL_RCC_GetAPB2Prescaler>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	0adb      	lsrs	r3, r3, #11
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd98      	pop	{r3, r4, r7, pc}
 8006f78:	0800ba10 	.word	0x0800ba10

08006f7c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	226f      	movs	r2, #111	; 0x6f
 8006f8a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006f8c:	f7ff f90d 	bl	80061aa <LL_RCC_GetSysClkSource>
 8006f90:	4602      	mov	r2, r0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006f96:	f7ff f97d 	bl	8006294 <LL_RCC_GetAHBPrescaler>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006fa0:	f7ff f99f 	bl	80062e2 <LL_RCC_GetAPB1Prescaler>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006faa:	f7ff f9a6 	bl	80062fa <LL_RCC_GetAPB2Prescaler>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006fb4:	f7ff f97a 	bl	80062ac <LL_C2_RCC_GetAHBPrescaler>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006fbe:	f7ff f982 	bl	80062c6 <LL_RCC_GetAHB4Prescaler>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <HAL_RCC_GetClockConfig+0x60>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0207 	and.w	r2, r3, #7
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	58004000 	.word	0x58004000

08006fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2bb0      	cmp	r3, #176	; 0xb0
 8006fec:	d903      	bls.n	8006ff6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e007      	b.n	8007006 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a11      	ldr	r2, [pc, #68]	; (8007044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007006:	f7ff f95e 	bl	80062c6 <LL_RCC_GetAHB4Prescaler>
 800700a:	4603      	mov	r3, r0
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	4a0d      	ldr	r2, [pc, #52]	; (8007048 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a0a      	ldr	r2, [pc, #40]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	0c9c      	lsrs	r4, r3, #18
 800702a:	f7fe fe9f 	bl	8005d6c <HAL_PWREx_GetVoltageRange>
 800702e:	4603      	mov	r3, r0
 8007030:	4619      	mov	r1, r3
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f80c 	bl	8007050 <RCC_SetFlashLatency>
 8007038:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bd90      	pop	{r4, r7, pc}
 8007042:	bf00      	nop
 8007044:	0800ba30 	.word	0x0800ba30
 8007048:	0800b9d0 	.word	0x0800b9d0
 800704c:	431bde83 	.word	0x431bde83

08007050 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b093      	sub	sp, #76	; 0x4c
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <RCC_SetFlashLatency+0xf0>)
 800705c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007066:	4a37      	ldr	r2, [pc, #220]	; (8007144 <RCC_SetFlashLatency+0xf4>)
 8007068:	f107 031c 	add.w	r3, r7, #28
 800706c:	ca07      	ldmia	r2, {r0, r1, r2}
 800706e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007072:	4b35      	ldr	r3, [pc, #212]	; (8007148 <RCC_SetFlashLatency+0xf8>)
 8007074:	f107 040c 	add.w	r4, r7, #12
 8007078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800707a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800707e:	2300      	movs	r3, #0
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007088:	d11c      	bne.n	80070c4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800708a:	2300      	movs	r3, #0
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
 800708e:	e015      	b.n	80070bc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007098:	4413      	add	r3, r2
 800709a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d808      	bhi.n	80070b6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070ac:	4413      	add	r3, r2
 80070ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070b4:	e022      	b.n	80070fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80070b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b8:	3301      	adds	r3, #1
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
 80070bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d9e6      	bls.n	8007090 <RCC_SetFlashLatency+0x40>
 80070c2:	e01b      	b.n	80070fc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c8:	e015      	b.n	80070f6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070d2:	4413      	add	r3, r2
 80070d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d808      	bhi.n	80070f0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070e6:	4413      	add	r3, r2
 80070e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070ee:	e005      	b.n	80070fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f2:	3301      	adds	r3, #1
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d9e6      	bls.n	80070ca <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <RCC_SetFlashLatency+0xfc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 0207 	bic.w	r2, r3, #7
 8007104:	4911      	ldr	r1, [pc, #68]	; (800714c <RCC_SetFlashLatency+0xfc>)
 8007106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800710c:	f7fc fb40 	bl	8003790 <HAL_GetTick>
 8007110:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007112:	e008      	b.n	8007126 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007114:	f7fc fb3c 	bl	8003790 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e007      	b.n	8007136 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <RCC_SetFlashLatency+0xfc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007130:	429a      	cmp	r2, r3
 8007132:	d1ef      	bne.n	8007114 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	374c      	adds	r7, #76	; 0x4c
 800713a:	46bd      	mov	sp, r7
 800713c:	bd90      	pop	{r4, r7, pc}
 800713e:	bf00      	nop
 8007140:	0800b99c 	.word	0x0800b99c
 8007144:	0800b9ac 	.word	0x0800b9ac
 8007148:	0800b9b8 	.word	0x0800b9b8
 800714c:	58004000 	.word	0x58004000

08007150 <LL_RCC_LSE_IsEnabled>:
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <LL_RCC_LSE_IsEnabled+0x18>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <LL_RCC_LSE_IsEnabled+0x1a>
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <LL_RCC_LSE_IsReady>:
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b02      	cmp	r3, #2
 8007186:	d101      	bne.n	800718c <LL_RCC_LSE_IsReady+0x18>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <LL_RCC_LSE_IsReady+0x1a>
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_RCC_MSI_EnablePLLMode>:
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800719c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a6:	f043 0304 	orr.w	r3, r3, #4
 80071aa:	6013      	str	r3, [r2, #0]
}
 80071ac:	bf00      	nop
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <LL_RCC_SetRFWKPClockSource>:
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80071be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <LL_RCC_SetSMPSClockSource>:
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	f023 0203 	bic.w	r2, r3, #3
 80071f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <LL_RCC_SetSMPSPrescaler>:
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800721c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4313      	orrs	r3, r2
 8007224:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <LL_RCC_SetUSARTClockSource>:
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800723a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f023 0203 	bic.w	r2, r3, #3
 8007246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <LL_RCC_SetLPUARTClockSource>:
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <LL_RCC_SetI2CClockSource>:
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007296:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80072a2:	43db      	mvns	r3, r3
 80072a4:	401a      	ands	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80072ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <LL_RCC_SetLPTIMClockSource>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80072cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	43db      	mvns	r3, r3
 80072dc:	401a      	ands	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <LL_RCC_SetSAIClockSource>:
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800730c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <LL_RCC_SetRNGClockSource>:
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800732c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <LL_RCC_SetCLK48ClockSource>:
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <LL_RCC_SetUSBClockSource>:
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ffe3 	bl	8007350 <LL_RCC_SetCLK48ClockSource>
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <LL_RCC_SetADCClockSource>:
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <LL_RCC_SetRTCClockSource>:
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80073c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <LL_RCC_GetRTCClockSource>:
{
 80073ea:	b480      	push	{r7}
 80073ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80073ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <LL_RCC_ForceBackupDomainReset>:
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800741c:	bf00      	nop
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007426:	b480      	push	{r7}
 8007428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800742a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800743e:	bf00      	nop
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_RCC_PLLSAI1_Enable>:
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745a:	6013      	str	r3, [r2, #0]
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_RCC_PLLSAI1_Disable>:
{
 8007466:	b480      	push	{r7}
 8007468:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800746a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007478:	6013      	str	r3, [r2, #0]
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <LL_RCC_PLLSAI1_IsReady>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007496:	d101      	bne.n	800749c <LL_RCC_PLLSAI1_IsReady+0x18>
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80074b0:	2300      	movs	r3, #0
 80074b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80074b4:	2300      	movs	r3, #0
 80074b6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d034      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074cc:	d021      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80074ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074d2:	d81b      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074d8:	d01d      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80074da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074de:	d815      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80074e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e8:	d110      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80074ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80074fa:	e00d      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f94d 	bl	80077a0 <RCCEx_PLLSAI1_ConfigNP>
 8007506:	4603      	mov	r3, r0
 8007508:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800750a:	e005      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	77fb      	strb	r3, [r7, #31]
        break;
 8007510:	e002      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007518:	7ffb      	ldrb	r3, [r7, #31]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fee8 	bl	80072f8 <LL_RCC_SetSAIClockSource>
 8007528:	e001      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	7ffb      	ldrb	r3, [r7, #31]
 800752c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007536:	2b00      	cmp	r3, #0
 8007538:	d046      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800753a:	f7ff ff56 	bl	80073ea <LL_RCC_GetRTCClockSource>
 800753e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d03c      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800754a:	f7fe fbff 	bl	8005d4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d105      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff ff30 	bl	80073be <LL_RCC_SetRTCClockSource>
 800755e:	e02e      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800756a:	f7ff ff4b 	bl	8007404 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800756e:	f7ff ff5a 	bl	8007426 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800758a:	f7ff fde1 	bl	8007150 <LL_RCC_LSE_IsEnabled>
 800758e:	4603      	mov	r3, r0
 8007590:	2b01      	cmp	r3, #1
 8007592:	d114      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007594:	f7fc f8fc 	bl	8003790 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800759a:	e00b      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759c:	f7fc f8f8 	bl	8003790 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d902      	bls.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	77fb      	strb	r3, [r7, #31]
              break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80075b4:	f7ff fdde 	bl	8007174 <LL_RCC_LSE_IsReady>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d1ee      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80075be:	7ffb      	ldrb	r3, [r7, #31]
 80075c0:	77bb      	strb	r3, [r7, #30]
 80075c2:	e001      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	7ffb      	ldrb	r3, [r7, #31]
 80075c6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff fe2a 	bl	8007232 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fe35 	bl	800725e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fe5d 	bl	80072c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fe52 	bl	80072c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fe2a 	bl	800728a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fe1f 	bl	800728a <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	2b00      	cmp	r3, #0
 8007656:	d022      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fe8d 	bl	800737c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800766a:	d107      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800766c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800767a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007684:	d10b      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f8e3 	bl	8007856 <RCCEx_PLLSAI1_ConfigNQ>
 8007690:	4603      	mov	r3, r0
 8007692:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007694:	7ffb      	ldrb	r3, [r7, #31]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800769a:	7ffb      	ldrb	r3, [r7, #31]
 800769c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02b      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b2:	d008      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076bc:	d003      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fe2a 	bl	8007324 <LL_RCC_SetRNGClockSource>
 80076d0:	e00a      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	2000      	movs	r0, #0
 80076de:	f7ff fe21 	bl	8007324 <LL_RCC_SetRNGClockSource>
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff fe34 	bl	8007350 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076f0:	d107      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80076f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007700:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800770a:	2b00      	cmp	r3, #0
 800770c:	d022      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fe3d 	bl	8007392 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007720:	d107      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800772c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007730:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773a:	d10b      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8e3 	bl	800790c <RCCEx_PLLSAI1_ConfigNR>
 8007746:	4603      	mov	r3, r0
 8007748:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800774a:	7ffb      	ldrb	r3, [r7, #31]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fd26 	bl	80071b6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fd45 	bl	800720a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fd2c 	bl	80071e2 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800778a:	7fbb      	ldrb	r3, [r7, #30]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007798:	f7ff fcfe 	bl	8007198 <LL_RCC_MSI_EnablePLLMode>
}
 800779c:	bf00      	nop
 800779e:	bd80      	pop	{r7, pc}

080077a0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80077ac:	f7ff fe5b 	bl	8007466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077b0:	f7fb ffee 	bl	8003790 <HAL_GetTick>
 80077b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077b6:	e009      	b.n	80077cc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077b8:	f7fb ffea 	bl	8003790 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d902      	bls.n	80077cc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ca:	e004      	b.n	80077d6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077cc:	f7ff fe5a 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f0      	bne.n	80077b8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d137      	bne.n	800784c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80077dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077f0:	4313      	orrs	r3, r2
 80077f2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007806:	4313      	orrs	r3, r2
 8007808:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800780a:	f7ff fe1d 	bl	8007448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7fb ffbf 	bl	8003790 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007814:	e009      	b.n	800782a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007816:	f7fb ffbb 	bl	8003790 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d902      	bls.n	800782a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	73fb      	strb	r3, [r7, #15]
        break;
 8007828:	e004      	b.n	8007834 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800782a:	f7ff fe2b 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 800782e:	4603      	mov	r3, r0
 8007830:	2b01      	cmp	r3, #1
 8007832:	d1f0      	bne.n	8007816 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d108      	bne.n	800784c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800783a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007848:	4313      	orrs	r3, r2
 800784a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007862:	f7ff fe00 	bl	8007466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007866:	f7fb ff93 	bl	8003790 <HAL_GetTick>
 800786a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800786c:	e009      	b.n	8007882 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800786e:	f7fb ff8f 	bl	8003790 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d902      	bls.n	8007882 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e004      	b.n	800788c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007882:	f7ff fdff 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d137      	bne.n	8007902 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a6:	4313      	orrs	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078bc:	4313      	orrs	r3, r2
 80078be:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80078c0:	f7ff fdc2 	bl	8007448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c4:	f7fb ff64 	bl	8003790 <HAL_GetTick>
 80078c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078ca:	e009      	b.n	80078e0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078cc:	f7fb ff60 	bl	8003790 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d902      	bls.n	80078e0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
        break;
 80078de:	e004      	b.n	80078ea <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078e0:	f7ff fdd0 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d1f0      	bne.n	80078cc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007918:	f7ff fda5 	bl	8007466 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800791c:	f7fb ff38 	bl	8003790 <HAL_GetTick>
 8007920:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007922:	e009      	b.n	8007938 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007924:	f7fb ff34 	bl	8003790 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d902      	bls.n	8007938 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	e004      	b.n	8007942 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007938:	f7ff fda4 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d137      	bne.n	80079b8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007972:	4313      	orrs	r3, r2
 8007974:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007976:	f7ff fd67 	bl	8007448 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797a:	f7fb ff09 	bl	8003790 <HAL_GetTick>
 800797e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007980:	e009      	b.n	8007996 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007982:	f7fb ff05 	bl	8003790 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d902      	bls.n	8007996 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	73fb      	strb	r3, [r7, #15]
        break;
 8007994:	e004      	b.n	80079a0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007996:	f7ff fd75 	bl	8007484 <LL_RCC_PLLSAI1_IsReady>
 800799a:	4603      	mov	r3, r0
 800799c:	2b01      	cmp	r3, #1
 800799e:	d1f0      	bne.n	8007982 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d108      	bne.n	80079b8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80079a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079b4:	4313      	orrs	r3, r2
 80079b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e095      	b.n	8007b00 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d108      	bne.n	80079ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e4:	d009      	beq.n	80079fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	61da      	str	r2, [r3, #28]
 80079ec:	e005      	b.n	80079fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7f9 fc6d 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a3a:	d902      	bls.n	8007a42 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e002      	b.n	8007a48 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a50:	d007      	beq.n	8007a62 <HAL_SPI_Init+0xa0>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a5a:	d002      	beq.n	8007a62 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	ea42 0103 	orr.w	r1, r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	0c1b      	lsrs	r3, r3, #16
 8007abe:	f003 0204 	and.w	r2, r3, #4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ade:	ea42 0103 	orr.w	r1, r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e049      	b.n	8007bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f841 	bl	8007bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f000 f9d6 	bl	8007ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d001      	beq.n	8007be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e036      	b.n	8007c52 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <HAL_TIM_Base_Start_IT+0x94>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0x44>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d115      	bne.n	8007c3c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_TIM_Base_Start_IT+0x98>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d015      	beq.n	8007c4e <HAL_TIM_Base_Start_IT+0x82>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c28:	d011      	beq.n	8007c4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0201 	orr.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3a:	e008      	b.n	8007c4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e000      	b.n	8007c50 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40012c00 	.word	0x40012c00
 8007c64:	00010007 	.word	0x00010007

08007c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d122      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0202 	mvn.w	r2, #2
 8007c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f905 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007cb0:	e005      	b.n	8007cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8f7 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f908 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d122      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d11b      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0204 	mvn.w	r2, #4
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f8db 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8cd 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8de 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d122      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d11b      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0208 	mvn.w	r2, #8
 8007d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8b1 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f8a3 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8b4 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d122      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d11b      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0210 	mvn.w	r2, #16
 8007d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2208      	movs	r2, #8
 8007d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f887 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f879 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f88a 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10e      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0201 	mvn.w	r2, #1
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7f9 f9ba 	bl	8001160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d10e      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e04:	2b80      	cmp	r3, #128	; 0x80
 8007e06:	d107      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8de 	bl	8007fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	d10e      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f8d1 	bl	8007fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d10e      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d107      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f838 	bl	8007ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d10e      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d107      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f06f 0220 	mvn.w	r2, #32
 8007e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f891 	bl	8007fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x20>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f38:	d007      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <TIM_Base_SetConfig+0xc0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1d      	ldr	r2, [pc, #116]	; (8007fbc <TIM_Base_SetConfig+0xc4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d108      	bne.n	8007f5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0xa0>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a0b      	ldr	r2, [pc, #44]	; (8007fb8 <TIM_Base_SetConfig+0xc0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0xa0>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <TIM_Base_SetConfig+0xc4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d103      	bne.n	8007fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	615a      	str	r2, [r3, #20]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40014400 	.word	0x40014400
 8007fbc:	40014800 	.word	0x40014800

08007fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <LL_RCC_GetUSARTClockSource>:
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008008:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4013      	ands	r3, r2
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_RCC_GetLPUARTClockSource>:
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008028:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4013      	ands	r3, r2
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e042      	b.n	80080d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7f9 f9b9 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f82c 	bl	80080dc <UART_SetConfig>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d101      	bne.n	800808e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e022      	b.n	80080d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa26 	bl	80084e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 faad 	bl	800862c <UART_CheckIdleState>
 80080d2:	4603      	mov	r3, r0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080dc:	b5b0      	push	{r4, r5, r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4ba3      	ldr	r3, [pc, #652]	; (8008394 <UART_SetConfig+0x2b8>)
 8008108:	4013      	ands	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	69f9      	ldr	r1, [r7, #28]
 8008110:	430b      	orrs	r3, r1
 8008112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a98      	ldr	r2, [pc, #608]	; (8008398 <UART_SetConfig+0x2bc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	4313      	orrs	r3, r2
 8008142:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800814e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	430b      	orrs	r3, r1
 800815a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	f023 010f 	bic.w	r1, r3, #15
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a89      	ldr	r2, [pc, #548]	; (800839c <UART_SetConfig+0x2c0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d120      	bne.n	80081be <UART_SetConfig+0xe2>
 800817c:	2003      	movs	r0, #3
 800817e:	f7ff ff3d 	bl	8007ffc <LL_RCC_GetUSARTClockSource>
 8008182:	4603      	mov	r3, r0
 8008184:	2b03      	cmp	r3, #3
 8008186:	d817      	bhi.n	80081b8 <UART_SetConfig+0xdc>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0xb4>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081a7 	.word	0x080081a7
 800819c:	080081b3 	.word	0x080081b3
 80081a0:	2301      	movs	r3, #1
 80081a2:	76fb      	strb	r3, [r7, #27]
 80081a4:	e038      	b.n	8008218 <UART_SetConfig+0x13c>
 80081a6:	2302      	movs	r3, #2
 80081a8:	76fb      	strb	r3, [r7, #27]
 80081aa:	e035      	b.n	8008218 <UART_SetConfig+0x13c>
 80081ac:	2304      	movs	r3, #4
 80081ae:	76fb      	strb	r3, [r7, #27]
 80081b0:	e032      	b.n	8008218 <UART_SetConfig+0x13c>
 80081b2:	2308      	movs	r3, #8
 80081b4:	76fb      	strb	r3, [r7, #27]
 80081b6:	e02f      	b.n	8008218 <UART_SetConfig+0x13c>
 80081b8:	2310      	movs	r3, #16
 80081ba:	76fb      	strb	r3, [r7, #27]
 80081bc:	e02c      	b.n	8008218 <UART_SetConfig+0x13c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a75      	ldr	r2, [pc, #468]	; (8008398 <UART_SetConfig+0x2bc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d125      	bne.n	8008214 <UART_SetConfig+0x138>
 80081c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80081cc:	f7ff ff26 	bl	800801c <LL_RCC_GetLPUARTClockSource>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d6:	d017      	beq.n	8008208 <UART_SetConfig+0x12c>
 80081d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081dc:	d817      	bhi.n	800820e <UART_SetConfig+0x132>
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e2:	d00b      	beq.n	80081fc <UART_SetConfig+0x120>
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e8:	d811      	bhi.n	800820e <UART_SetConfig+0x132>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <UART_SetConfig+0x11a>
 80081ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f2:	d006      	beq.n	8008202 <UART_SetConfig+0x126>
 80081f4:	e00b      	b.n	800820e <UART_SetConfig+0x132>
 80081f6:	2300      	movs	r3, #0
 80081f8:	76fb      	strb	r3, [r7, #27]
 80081fa:	e00d      	b.n	8008218 <UART_SetConfig+0x13c>
 80081fc:	2302      	movs	r3, #2
 80081fe:	76fb      	strb	r3, [r7, #27]
 8008200:	e00a      	b.n	8008218 <UART_SetConfig+0x13c>
 8008202:	2304      	movs	r3, #4
 8008204:	76fb      	strb	r3, [r7, #27]
 8008206:	e007      	b.n	8008218 <UART_SetConfig+0x13c>
 8008208:	2308      	movs	r3, #8
 800820a:	76fb      	strb	r3, [r7, #27]
 800820c:	e004      	b.n	8008218 <UART_SetConfig+0x13c>
 800820e:	2310      	movs	r3, #16
 8008210:	76fb      	strb	r3, [r7, #27]
 8008212:	e001      	b.n	8008218 <UART_SetConfig+0x13c>
 8008214:	2310      	movs	r3, #16
 8008216:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a5e      	ldr	r2, [pc, #376]	; (8008398 <UART_SetConfig+0x2bc>)
 800821e:	4293      	cmp	r3, r2
 8008220:	f040 808b 	bne.w	800833a <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008224:	7efb      	ldrb	r3, [r7, #27]
 8008226:	2b08      	cmp	r3, #8
 8008228:	d823      	bhi.n	8008272 <UART_SetConfig+0x196>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0x154>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008255 	.word	0x08008255
 8008234:	08008273 	.word	0x08008273
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008273 	.word	0x08008273
 8008240:	08008263 	.word	0x08008263
 8008244:	08008273 	.word	0x08008273
 8008248:	08008273 	.word	0x08008273
 800824c:	08008273 	.word	0x08008273
 8008250:	0800826b 	.word	0x0800826b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008254:	f7fe fe66 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 8008258:	6178      	str	r0, [r7, #20]
        break;
 800825a:	e00f      	b.n	800827c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800825c:	4b50      	ldr	r3, [pc, #320]	; (80083a0 <UART_SetConfig+0x2c4>)
 800825e:	617b      	str	r3, [r7, #20]
        break;
 8008260:	e00c      	b.n	800827c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008262:	f7fe fddf 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8008266:	6178      	str	r0, [r7, #20]
        break;
 8008268:	e008      	b.n	800827c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826e:	617b      	str	r3, [r7, #20]
        break;
 8008270:	e004      	b.n	800827c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	76bb      	strb	r3, [r7, #26]
        break;
 800827a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 811a 	beq.w	80084b8 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	4a46      	ldr	r2, [pc, #280]	; (80083a4 <UART_SetConfig+0x2c8>)
 800828a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828e:	461a      	mov	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	fbb3 f3f2 	udiv	r3, r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d305      	bcc.n	80082b4 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d902      	bls.n	80082ba <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	76bb      	strb	r3, [r7, #26]
 80082b8:	e0fe      	b.n	80084b8 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	4618      	mov	r0, r3
 80082be:	f04f 0100 	mov.w	r1, #0
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	4a37      	ldr	r2, [pc, #220]	; (80083a4 <UART_SetConfig+0x2c8>)
 80082c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	f04f 0300 	mov.w	r3, #0
 80082d2:	f7f7 ff75 	bl	80001c0 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4610      	mov	r0, r2
 80082dc:	4619      	mov	r1, r3
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	020b      	lsls	r3, r1, #8
 80082e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ec:	0202      	lsls	r2, r0, #8
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	6849      	ldr	r1, [r1, #4]
 80082f2:	0849      	lsrs	r1, r1, #1
 80082f4:	4608      	mov	r0, r1
 80082f6:	f04f 0100 	mov.w	r1, #0
 80082fa:	1814      	adds	r4, r2, r0
 80082fc:	eb43 0501 	adc.w	r5, r3, r1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	461a      	mov	r2, r3
 8008306:	f04f 0300 	mov.w	r3, #0
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f7 ff57 	bl	80001c0 <__aeabi_uldivmod>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4613      	mov	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008320:	d308      	bcc.n	8008334 <UART_SetConfig+0x258>
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008328:	d204      	bcs.n	8008334 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	e0c1      	b.n	80084b8 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	76bb      	strb	r3, [r7, #26]
 8008338:	e0be      	b.n	80084b8 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008342:	d16a      	bne.n	800841a <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008344:	7efb      	ldrb	r3, [r7, #27]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b07      	cmp	r3, #7
 800834a:	d82d      	bhi.n	80083a8 <UART_SetConfig+0x2cc>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <UART_SetConfig+0x278>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008375 	.word	0x08008375
 8008358:	0800837d 	.word	0x0800837d
 800835c:	080083a9 	.word	0x080083a9
 8008360:	08008383 	.word	0x08008383
 8008364:	080083a9 	.word	0x080083a9
 8008368:	080083a9 	.word	0x080083a9
 800836c:	080083a9 	.word	0x080083a9
 8008370:	0800838b 	.word	0x0800838b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008374:	f7fe fdec 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 8008378:	6178      	str	r0, [r7, #20]
        break;
 800837a:	e01a      	b.n	80083b2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800837c:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <UART_SetConfig+0x2c4>)
 800837e:	617b      	str	r3, [r7, #20]
        break;
 8008380:	e017      	b.n	80083b2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008382:	f7fe fd4f 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8008386:	6178      	str	r0, [r7, #20]
        break;
 8008388:	e013      	b.n	80083b2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800838e:	617b      	str	r3, [r7, #20]
        break;
 8008390:	e00f      	b.n	80083b2 <UART_SetConfig+0x2d6>
 8008392:	bf00      	nop
 8008394:	cfff69f3 	.word	0xcfff69f3
 8008398:	40008000 	.word	0x40008000
 800839c:	40013800 	.word	0x40013800
 80083a0:	00f42400 	.word	0x00f42400
 80083a4:	0800ba70 	.word	0x0800ba70
      default:
        pclk = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	76bb      	strb	r3, [r7, #26]
        break;
 80083b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d07f      	beq.n	80084b8 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	4a48      	ldr	r2, [pc, #288]	; (80084e0 <UART_SetConfig+0x404>)
 80083be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c2:	461a      	mov	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ca:	005a      	lsls	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	085b      	lsrs	r3, r3, #1
 80083d2:	441a      	add	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083dc:	b29b      	uxth	r3, r3
 80083de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2b0f      	cmp	r3, #15
 80083e4:	d916      	bls.n	8008414 <UART_SetConfig+0x338>
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ec:	d212      	bcs.n	8008414 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f023 030f 	bic.w	r3, r3, #15
 80083f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	b29a      	uxth	r2, r3
 8008404:	89fb      	ldrh	r3, [r7, #14]
 8008406:	4313      	orrs	r3, r2
 8008408:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	89fa      	ldrh	r2, [r7, #14]
 8008410:	60da      	str	r2, [r3, #12]
 8008412:	e051      	b.n	80084b8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	76bb      	strb	r3, [r7, #26]
 8008418:	e04e      	b.n	80084b8 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800841a:	7efb      	ldrb	r3, [r7, #27]
 800841c:	3b01      	subs	r3, #1
 800841e:	2b07      	cmp	r3, #7
 8008420:	d821      	bhi.n	8008466 <UART_SetConfig+0x38a>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <UART_SetConfig+0x34c>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008449 	.word	0x08008449
 800842c:	08008451 	.word	0x08008451
 8008430:	08008467 	.word	0x08008467
 8008434:	08008457 	.word	0x08008457
 8008438:	08008467 	.word	0x08008467
 800843c:	08008467 	.word	0x08008467
 8008440:	08008467 	.word	0x08008467
 8008444:	0800845f 	.word	0x0800845f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008448:	f7fe fd82 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 800844c:	6178      	str	r0, [r7, #20]
        break;
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008450:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <UART_SetConfig+0x408>)
 8008452:	617b      	str	r3, [r7, #20]
        break;
 8008454:	e00c      	b.n	8008470 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008456:	f7fe fce5 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 800845a:	6178      	str	r0, [r7, #20]
        break;
 800845c:	e008      	b.n	8008470 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	617b      	str	r3, [r7, #20]
        break;
 8008464:	e004      	b.n	8008470 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	76bb      	strb	r3, [r7, #26]
        break;
 800846e:	bf00      	nop
    }

    if (pclk != 0U)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d020      	beq.n	80084b8 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	4a19      	ldr	r2, [pc, #100]	; (80084e0 <UART_SetConfig+0x404>)
 800847c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008480:	461a      	mov	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	fbb3 f2f2 	udiv	r2, r3, r2
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	441a      	add	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	b29b      	uxth	r3, r3
 800849a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b0f      	cmp	r3, #15
 80084a0:	d908      	bls.n	80084b4 <UART_SetConfig+0x3d8>
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a8:	d204      	bcs.n	80084b4 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	e001      	b.n	80084b8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80084d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3720      	adds	r7, #32
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}
 80084de:	bf00      	nop
 80084e0:	0800ba70 	.word	0x0800ba70
 80084e4:	00f42400 	.word	0x00f42400

080084e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01a      	beq.n	80085fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e6:	d10a      	bne.n	80085fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	605a      	str	r2, [r3, #4]
  }
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af02      	add	r7, sp, #8
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800863c:	f7fb f8a8 	bl	8003790 <HAL_GetTick>
 8008640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b08      	cmp	r3, #8
 800864e:	d10e      	bne.n	800866e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f82f 	bl	80086c2 <UART_WaitOnFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e025      	b.n	80086ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b04      	cmp	r3, #4
 800867a:	d10e      	bne.n	800869a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f819 	bl	80086c2 <UART_WaitOnFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e00f      	b.n	80086ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d2:	e062      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d05e      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086dc:	f7fb f858 	bl	8003790 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d302      	bcc.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11d      	bne.n	800872e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008700:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e045      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d02e      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800874a:	d126      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008754:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008764:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0201 	bic.w	r2, r2, #1
 8008774:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e00f      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d08d      	beq.n	80086d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e027      	b.n	8008828 <HAL_UARTEx_DisableFifoMode+0x66>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2224      	movs	r2, #36	; 0x24
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008806:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008848:	2302      	movs	r3, #2
 800884a:	e02d      	b.n	80088a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f84f 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e02d      	b.n	8008924 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f811 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800894c:	e031      	b.n	80089b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800894e:	2308      	movs	r3, #8
 8008950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008952:	2308      	movs	r3, #8
 8008954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0e5b      	lsrs	r3, r3, #25
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0f5b      	lsrs	r3, r3, #29
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	7b3a      	ldrb	r2, [r7, #12]
 800897a:	4911      	ldr	r1, [pc, #68]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800897c:	5c8a      	ldrb	r2, [r1, r2]
 800897e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008982:	7b3a      	ldrb	r2, [r7, #12]
 8008984:	490f      	ldr	r1, [pc, #60]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008988:	fb93 f3f2 	sdiv	r3, r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	7b7a      	ldrb	r2, [r7, #13]
 8008998:	4909      	ldr	r1, [pc, #36]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800899a:	5c8a      	ldrb	r2, [r1, r2]
 800899c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089a0:	7b7a      	ldrb	r2, [r7, #13]
 80089a2:	4908      	ldr	r1, [pc, #32]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 80089a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	0800ba88 	.word	0x0800ba88
 80089c4:	0800ba90 	.word	0x0800ba90

080089c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80089d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	43db      	mvns	r3, r3
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4013      	ands	r3, r2
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089fe:	b084      	sub	sp, #16
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	f107 0014 	add.w	r0, r7, #20
 8008a0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	b004      	add	sp, #16
 8008a3e:	4770      	bx	lr

08008a40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a52:	2b84      	cmp	r3, #132	; 0x84
 8008a54:	d005      	beq.n	8008a62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3303      	adds	r3, #3
 8008a60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a74:	f000 fbce 	bl	8009214 <vTaskStartScheduler>
  
  return osOK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af02      	add	r7, sp, #8
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685c      	ldr	r4, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a94:	b29e      	uxth	r6, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff ffcf 	bl	8008a40 <makeFreeRtosPriority>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	9200      	str	r2, [sp, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	4632      	mov	r2, r6
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f8d2 	bl	8008c5c <xTaskCreate>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d001      	beq.n	8008ac2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e000      	b.n	8008ac4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008acc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <osDelay+0x16>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	e000      	b.n	8008ae4 <osDelay+0x18>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fb29 	bl	800913c <vTaskDelay>
  
  return osOK;
 8008aea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f103 0208 	add.w	r2, r3, #8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f103 0208 	add.w	r2, r3, #8
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f103 0208 	add.w	r2, r3, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
}
 8008b8a:	bf00      	nop
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b96:	b480      	push	{r7}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d103      	bne.n	8008bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	e00c      	b.n	8008bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	e002      	b.n	8008bc4 <vListInsert+0x2e>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d2f6      	bcs.n	8008bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	601a      	str	r2, [r3, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6892      	ldr	r2, [r2, #8]
 8008c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6852      	ldr	r2, [r2, #4]
 8008c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d103      	bne.n	8008c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1e5a      	subs	r2, r3, #1
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08c      	sub	sp, #48	; 0x30
 8008c60:	af04      	add	r7, sp, #16
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 f8f9 	bl	8009e68 <pvPortMalloc>
 8008c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c7e:	20bc      	movs	r0, #188	; 0xbc
 8008c80:	f001 f8f2 	bl	8009e68 <pvPortMalloc>
 8008c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
 8008c92:	e005      	b.n	8008ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c94:	6978      	ldr	r0, [r7, #20]
 8008c96:	f001 f9c3 	bl	800a020 <vPortFree>
 8008c9a:	e001      	b.n	8008ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d013      	beq.n	8008cce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f80f 	bl	8008ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cc2:	69f8      	ldr	r0, [r7, #28]
 8008cc4:	f000 f8b2 	bl	8008e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	e002      	b.n	8008cd4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cce:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
	}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	21a5      	movs	r1, #165	; 0xa5
 8008cfa:	f001 faeb 	bl	800a2d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f023 0307 	bic.w	r3, r3, #7
 8008d16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01f      	beq.n	8008d7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	e012      	b.n	8008d6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	7819      	ldrb	r1, [r3, #0]
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	3334      	adds	r3, #52	; 0x34
 8008d54:	460a      	mov	r2, r1
 8008d56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	3301      	adds	r3, #1
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	2b0f      	cmp	r3, #15
 8008d6e:	d9e9      	bls.n	8008d44 <prvInitialiseNewTask+0x64>
 8008d70:	e000      	b.n	8008d74 <prvInitialiseNewTask+0x94>
			{
				break;
 8008d72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d7c:	e003      	b.n	8008d86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	2b06      	cmp	r3, #6
 8008d8a:	d901      	bls.n	8008d90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d8c:	2306      	movs	r3, #6
 8008d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	2200      	movs	r2, #0
 8008da0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fec4 	bl	8008b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	3318      	adds	r3, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff febf 	bl	8008b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	f1c3 0207 	rsb	r2, r3, #7
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	3354      	adds	r3, #84	; 0x54
 8008de0:	2260      	movs	r2, #96	; 0x60
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f001 fa75 	bl	800a2d4 <memset>
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	4a0c      	ldr	r2, [pc, #48]	; (8008e20 <prvInitialiseNewTask+0x140>)
 8008dee:	659a      	str	r2, [r3, #88]	; 0x58
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <prvInitialiseNewTask+0x144>)
 8008df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	4a0b      	ldr	r2, [pc, #44]	; (8008e28 <prvInitialiseNewTask+0x148>)
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	69b8      	ldr	r0, [r7, #24]
 8008e02:	f000 fe15 	bl	8009a30 <pxPortInitialiseStack>
 8008e06:	4602      	mov	r2, r0
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e18:	bf00      	nop
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0800bab8 	.word	0x0800bab8
 8008e24:	0800bad8 	.word	0x0800bad8
 8008e28:	0800ba98 	.word	0x0800ba98

08008e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e34:	f000 ff36 	bl	8009ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e38:	4b5c      	ldr	r3, [pc, #368]	; (8008fac <prvAddNewTaskToReadyList+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	4a5b      	ldr	r2, [pc, #364]	; (8008fac <prvAddNewTaskToReadyList+0x180>)
 8008e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e42:	4b5b      	ldr	r3, [pc, #364]	; (8008fb0 <prvAddNewTaskToReadyList+0x184>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d109      	bne.n	8008e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e4a:	4a59      	ldr	r2, [pc, #356]	; (8008fb0 <prvAddNewTaskToReadyList+0x184>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e50:	4b56      	ldr	r3, [pc, #344]	; (8008fac <prvAddNewTaskToReadyList+0x180>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d110      	bne.n	8008e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e58:	f000 fcd0 	bl	80097fc <prvInitialiseTaskLists>
 8008e5c:	e00d      	b.n	8008e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e5e:	4b55      	ldr	r3, [pc, #340]	; (8008fb4 <prvAddNewTaskToReadyList+0x188>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e66:	4b52      	ldr	r3, [pc, #328]	; (8008fb0 <prvAddNewTaskToReadyList+0x184>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d802      	bhi.n	8008e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e74:	4a4e      	ldr	r2, [pc, #312]	; (8008fb0 <prvAddNewTaskToReadyList+0x184>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e7a:	4b4f      	ldr	r3, [pc, #316]	; (8008fb8 <prvAddNewTaskToReadyList+0x18c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	4a4d      	ldr	r2, [pc, #308]	; (8008fb8 <prvAddNewTaskToReadyList+0x18c>)
 8008e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e84:	4b4c      	ldr	r3, [pc, #304]	; (8008fb8 <prvAddNewTaskToReadyList+0x18c>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d048      	beq.n	8008f24 <prvAddNewTaskToReadyList+0xf8>
 8008e92:	2003      	movs	r0, #3
 8008e94:	f7f9 ff06 	bl	8002ca4 <prvTraceGetObjectHandle>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7f8 fc2e 	bl	8001700 <prvTraceSetTaskNumberLow16>
 8008ea4:	4b45      	ldr	r3, [pc, #276]	; (8008fbc <prvAddNewTaskToReadyList+0x190>)
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f8 fc3e 	bl	800172c <prvTraceSetTaskNumberHigh16>
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7f8 fc0a 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	b2d9      	uxtb	r1, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3334      	adds	r3, #52	; 0x34
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2003      	movs	r0, #3
 8008ec2:	f7f9 ffc3 	bl	8002e4c <prvTraceSetObjectName>
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7f8 fbff 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	b2d9      	uxtb	r1, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2003      	movs	r0, #3
 8008eda:	f7f9 fd89 	bl	80029f0 <prvTraceSetPriorityProperty>
 8008ede:	f7f8 fc3b 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f8 fbfd 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	4b34      	ldr	r3, [pc, #208]	; (8008fc0 <prvAddNewTaskToReadyList+0x194>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d014      	beq.n	8008f24 <prvAddNewTaskToReadyList+0xf8>
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7f8 fbf2 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8008f00:	4603      	mov	r3, r0
 8008f02:	461a      	mov	r2, r3
 8008f04:	4b2e      	ldr	r3, [pc, #184]	; (8008fc0 <prvAddNewTaskToReadyList+0x194>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <prvAddNewTaskToReadyList+0xf8>
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7f8 fbda 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8008f16:	4603      	mov	r3, r0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2103      	movs	r1, #3
 8008f1e:	201b      	movs	r0, #27
 8008f20:	f7f9 fbd4 	bl	80026cc <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7f8 fbdd 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <prvAddNewTaskToReadyList+0x194>)
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	4013      	ands	r3, r2
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <prvAddNewTaskToReadyList+0x11e>
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7f8 fbc5 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8008f40:	4603      	mov	r3, r0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f9 fac5 	bl	80024d4 <prvTraceStoreTaskReady>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	2201      	movs	r2, #1
 8008f50:	409a      	lsls	r2, r3
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <prvAddNewTaskToReadyList+0x198>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	4a1a      	ldr	r2, [pc, #104]	; (8008fc4 <prvAddNewTaskToReadyList+0x198>)
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <prvAddNewTaskToReadyList+0x19c>)
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7ff fdeb 	bl	8008b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f78:	f000 fec4 	bl	8009d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f7c:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <prvAddNewTaskToReadyList+0x188>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00e      	beq.n	8008fa2 <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f84:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <prvAddNewTaskToReadyList+0x184>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d207      	bcs.n	8008fa2 <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f92:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <prvAddNewTaskToReadyList+0x1a0>)
 8008f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	200001d4 	.word	0x200001d4
 8008fb0:	200000d4 	.word	0x200000d4
 8008fb4:	200001e0 	.word	0x200001e0
 8008fb8:	200001f0 	.word	0x200001f0
 8008fbc:	2000b514 	.word	0x2000b514
 8008fc0:	20002ea8 	.word	0x20002ea8
 8008fc4:	200001dc 	.word	0x200001dc
 8008fc8:	200000d8 	.word	0x200000d8
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <vTaskDelayUntil+0x2a>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	617b      	str	r3, [r7, #20]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <vTaskDelayUntil+0x46>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009016:	4b44      	ldr	r3, [pc, #272]	; (8009128 <vTaskDelayUntil+0x158>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <vTaskDelayUntil+0x64>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009034:	f000 f962 	bl	80092fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009038:	4b3c      	ldr	r3, [pc, #240]	; (800912c <vTaskDelayUntil+0x15c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4413      	add	r3, r2
 8009046:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6a3a      	ldr	r2, [r7, #32]
 800904e:	429a      	cmp	r2, r3
 8009050:	d20b      	bcs.n	800906a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	429a      	cmp	r2, r3
 800905a:	d211      	bcs.n	8009080 <vTaskDelayUntil+0xb0>
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	429a      	cmp	r2, r3
 8009062:	d90d      	bls.n	8009080 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009064:	2301      	movs	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
 8009068:	e00a      	b.n	8009080 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	429a      	cmp	r2, r3
 8009072:	d303      	bcc.n	800907c <vTaskDelayUntil+0xac>
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	429a      	cmp	r2, r3
 800907a:	d901      	bls.n	8009080 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d03a      	beq.n	8009102 <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800908c:	4b28      	ldr	r3, [pc, #160]	; (8009130 <vTaskDelayUntil+0x160>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7f8 fb27 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <vTaskDelayUntil+0x164>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	4013      	ands	r3, r2
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <vTaskDelayUntil+0xf2>
 80090a6:	69f9      	ldr	r1, [r7, #28]
 80090a8:	2088      	movs	r0, #136	; 0x88
 80090aa:	f7f9 fbc9 	bl	8002840 <prvTraceStoreKernelCallWithNumericParamOnly>
 80090ae:	4b20      	ldr	r3, [pc, #128]	; (8009130 <vTaskDelayUntil+0x160>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f8 fb09 	bl	80016ca <prvTraceGetTaskNumberLow16>
 80090b8:	4603      	mov	r3, r0
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f9 fd4b 	bl	8002b58 <prvTraceSetTaskInstanceFinished>
 80090c2:	f7f8 fb49 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 80090c6:	4603      	mov	r3, r0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f8 fb0b 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 80090ce:	4603      	mov	r3, r0
 80090d0:	461a      	mov	r2, r3
 80090d2:	4b18      	ldr	r3, [pc, #96]	; (8009134 <vTaskDelayUntil+0x164>)
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	4013      	ands	r3, r2
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <vTaskDelayUntil+0x124>
 80090de:	f7f8 fb3b 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f8 faf0 	bl	80016ca <prvTraceGetTaskNumberLow16>
 80090ea:	4603      	mov	r3, r0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f9 fd32 	bl	8002b58 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80090f4:	69fa      	ldr	r2, [r7, #28]
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fc31 	bl	8009964 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009102:	f000 f909 	bl	8009318 <xTaskResumeAll>
 8009106:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <vTaskDelayUntil+0x168>)
 8009110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800911e:	bf00      	nop
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	200001fc 	.word	0x200001fc
 800912c:	200001d8 	.word	0x200001d8
 8009130:	200000d4 	.word	0x200000d4
 8009134:	20002ea8 	.word	0x20002ea8
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d04b      	beq.n	80091e6 <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800914e:	4b2d      	ldr	r3, [pc, #180]	; (8009204 <vTaskDelay+0xc8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <vTaskDelay+0x30>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	60bb      	str	r3, [r7, #8]
}
 8009168:	bf00      	nop
 800916a:	e7fe      	b.n	800916a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800916c:	f000 f8c6 	bl	80092fc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <vTaskDelay+0xcc>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7f8 fab5 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 800917a:	4603      	mov	r3, r0
 800917c:	461a      	mov	r2, r3
 800917e:	4b23      	ldr	r3, [pc, #140]	; (800920c <vTaskDelay+0xd0>)
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	4013      	ands	r3, r2
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00d      	beq.n	80091a6 <vTaskDelay+0x6a>
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	2089      	movs	r0, #137	; 0x89
 800918e:	f7f9 fb57 	bl	8002840 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <vTaskDelay+0xcc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f8 fa97 	bl	80016ca <prvTraceGetTaskNumberLow16>
 800919c:	4603      	mov	r3, r0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f9 fcd9 	bl	8002b58 <prvTraceSetTaskInstanceFinished>
 80091a6:	f7f8 fad7 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 80091aa:	4603      	mov	r3, r0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f8 fa99 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b15      	ldr	r3, [pc, #84]	; (800920c <vTaskDelay+0xd0>)
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	4013      	ands	r3, r2
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <vTaskDelay+0x9c>
 80091c2:	f7f8 fac9 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 80091c6:	4603      	mov	r3, r0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f8 fa7e 	bl	80016ca <prvTraceGetTaskNumberLow16>
 80091ce:	4603      	mov	r3, r0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f9 fcc0 	bl	8002b58 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fbc2 	bl	8009964 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091e0:	f000 f89a 	bl	8009318 <xTaskResumeAll>
 80091e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d107      	bne.n	80091fc <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <vTaskDelay+0xd4>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	200001fc 	.word	0x200001fc
 8009208:	200000d4 	.word	0x200000d4
 800920c:	20002ea8 	.word	0x20002ea8
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800921a:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <vTaskStartScheduler+0xc0>)
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	2300      	movs	r3, #0
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	2280      	movs	r2, #128	; 0x80
 8009226:	492c      	ldr	r1, [pc, #176]	; (80092d8 <vTaskStartScheduler+0xc4>)
 8009228:	482c      	ldr	r0, [pc, #176]	; (80092dc <vTaskStartScheduler+0xc8>)
 800922a:	f7ff fd17 	bl	8008c5c <xTaskCreate>
 800922e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d13a      	bne.n	80092ac <vTaskStartScheduler+0x98>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800924a:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <vTaskStartScheduler+0xcc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3354      	adds	r3, #84	; 0x54
 8009250:	4a24      	ldr	r2, [pc, #144]	; (80092e4 <vTaskStartScheduler+0xd0>)
 8009252:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009254:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <vTaskStartScheduler+0xd4>)
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800925c:	4b23      	ldr	r3, [pc, #140]	; (80092ec <vTaskStartScheduler+0xd8>)
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009262:	4b23      	ldr	r3, [pc, #140]	; (80092f0 <vTaskStartScheduler+0xdc>)
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8009268:	4b22      	ldr	r3, [pc, #136]	; (80092f4 <vTaskStartScheduler+0xe0>)
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f7f8 fa73 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 8009272:	4603      	mov	r3, r0
 8009274:	4618      	mov	r0, r3
 8009276:	f7f8 fa35 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
 800927e:	4b1e      	ldr	r3, [pc, #120]	; (80092f8 <vTaskStartScheduler+0xe4>)
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	4013      	ands	r3, r2
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <vTaskStartScheduler+0x8c>
 800928a:	f7f8 fa65 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 800928e:	4603      	mov	r3, r0
 8009290:	4618      	mov	r0, r3
 8009292:	f7f8 fa1a 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8009296:	4603      	mov	r3, r0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	4618      	mov	r0, r3
 800929c:	f7f9 fb36 	bl	800290c <prvTraceStoreTaskswitch>
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <vTaskStartScheduler+0xe0>)
 80092a2:	2202      	movs	r2, #2
 80092a4:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092a6:	f000 fc4b 	bl	8009b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092aa:	e00e      	b.n	80092ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d10a      	bne.n	80092ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	607b      	str	r3, [r7, #4]
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <vTaskStartScheduler+0xb4>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200001f8 	.word	0x200001f8
 80092d8:	0800b9c8 	.word	0x0800b9c8
 80092dc:	080097cd 	.word	0x080097cd
 80092e0:	200000d4 	.word	0x200000d4
 80092e4:	20000018 	.word	0x20000018
 80092e8:	200001f4 	.word	0x200001f4
 80092ec:	200001e0 	.word	0x200001e0
 80092f0:	200001d8 	.word	0x200001d8
 80092f4:	200000a8 	.word	0x200000a8
 80092f8:	20002ea8 	.word	0x20002ea8

080092fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <vTaskSuspendAll+0x18>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3301      	adds	r3, #1
 8009306:	4a03      	ldr	r2, [pc, #12]	; (8009314 <vTaskSuspendAll+0x18>)
 8009308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800930a:	bf00      	nop
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	200001fc 	.word	0x200001fc

08009318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009326:	4b4b      	ldr	r3, [pc, #300]	; (8009454 <xTaskResumeAll+0x13c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <xTaskResumeAll+0x2c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009344:	f000 fcae 	bl	8009ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <xTaskResumeAll+0x13c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3b01      	subs	r3, #1
 800934e:	4a41      	ldr	r2, [pc, #260]	; (8009454 <xTaskResumeAll+0x13c>)
 8009350:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009352:	4b40      	ldr	r3, [pc, #256]	; (8009454 <xTaskResumeAll+0x13c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d174      	bne.n	8009444 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800935a:	4b3f      	ldr	r3, [pc, #252]	; (8009458 <xTaskResumeAll+0x140>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d070      	beq.n	8009444 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009362:	e041      	b.n	80093e8 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009364:	4b3d      	ldr	r3, [pc, #244]	; (800945c <xTaskResumeAll+0x144>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3318      	adds	r3, #24
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fc49 	bl	8008c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3304      	adds	r3, #4
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fc44 	bl	8008c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7f8 f9af 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	4b35      	ldr	r3, [pc, #212]	; (8009460 <xTaskResumeAll+0x148>)
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	4013      	ands	r3, r2
 8009390:	b29b      	uxth	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <xTaskResumeAll+0x8e>
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7f8 f997 	bl	80016ca <prvTraceGetTaskNumberLow16>
 800939c:	4603      	mov	r3, r0
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7f9 f897 	bl	80024d4 <prvTraceStoreTaskReady>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	2201      	movs	r2, #1
 80093ac:	409a      	lsls	r2, r3
 80093ae:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <xTaskResumeAll+0x14c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	4a2b      	ldr	r2, [pc, #172]	; (8009464 <xTaskResumeAll+0x14c>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4a28      	ldr	r2, [pc, #160]	; (8009468 <xTaskResumeAll+0x150>)
 80093c6:	441a      	add	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7ff fbbd 	bl	8008b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	4b24      	ldr	r3, [pc, #144]	; (800946c <xTaskResumeAll+0x154>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	429a      	cmp	r2, r3
 80093e0:	d302      	bcc.n	80093e8 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 80093e2:	4b23      	ldr	r3, [pc, #140]	; (8009470 <xTaskResumeAll+0x158>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093e8:	4b1c      	ldr	r3, [pc, #112]	; (800945c <xTaskResumeAll+0x144>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1b9      	bne.n	8009364 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093f6:	f000 fa85 	bl	8009904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093fa:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <xTaskResumeAll+0x15c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d010      	beq.n	8009428 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009406:	f000 f849 	bl	800949c <xTaskIncrementTick>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <xTaskResumeAll+0x158>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3b01      	subs	r3, #1
 800941a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1f1      	bne.n	8009406 <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 8009422:	4b14      	ldr	r3, [pc, #80]	; (8009474 <xTaskResumeAll+0x15c>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009428:	4b11      	ldr	r3, [pc, #68]	; (8009470 <xTaskResumeAll+0x158>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d009      	beq.n	8009444 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009434:	4b10      	ldr	r3, [pc, #64]	; (8009478 <xTaskResumeAll+0x160>)
 8009436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009444:	f000 fc5e 	bl	8009d04 <vPortExitCritical>

	return xAlreadyYielded;
 8009448:	68bb      	ldr	r3, [r7, #8]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200001fc 	.word	0x200001fc
 8009458:	200001d4 	.word	0x200001d4
 800945c:	20000194 	.word	0x20000194
 8009460:	20002ea8 	.word	0x20002ea8
 8009464:	200001dc 	.word	0x200001dc
 8009468:	200000d8 	.word	0x200000d8
 800946c:	200000d4 	.word	0x200000d4
 8009470:	200001e8 	.word	0x200001e8
 8009474:	200001e4 	.word	0x200001e4
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <xTaskGetTickCount+0x1c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009488:	687b      	ldr	r3, [r7, #4]
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	200001d8 	.word	0x200001d8

0800949c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80094a6:	4b65      	ldr	r3, [pc, #404]	; (800963c <xTaskIncrementTick+0x1a0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d003      	beq.n	80094b6 <xTaskIncrementTick+0x1a>
 80094ae:	4b64      	ldr	r3, [pc, #400]	; (8009640 <xTaskIncrementTick+0x1a4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <xTaskIncrementTick+0x2a>
 80094b6:	4b63      	ldr	r3, [pc, #396]	; (8009644 <xTaskIncrementTick+0x1a8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	4a61      	ldr	r2, [pc, #388]	; (8009644 <xTaskIncrementTick+0x1a8>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	f7fa f8e7 	bl	8003694 <prvTracePortGetTimeStamp>
 80094c6:	4b5d      	ldr	r3, [pc, #372]	; (800963c <xTaskIncrementTick+0x1a0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <xTaskIncrementTick+0x40>
 80094ce:	4b5e      	ldr	r3, [pc, #376]	; (8009648 <xTaskIncrementTick+0x1ac>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	4619      	mov	r1, r3
 80094d6:	2003      	movs	r0, #3
 80094d8:	f7f9 f9b2 	bl	8002840 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094dc:	4b57      	ldr	r3, [pc, #348]	; (800963c <xTaskIncrementTick+0x1a0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f040 80a1 	bne.w	8009628 <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094e6:	4b58      	ldr	r3, [pc, #352]	; (8009648 <xTaskIncrementTick+0x1ac>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094ee:	4a56      	ldr	r2, [pc, #344]	; (8009648 <xTaskIncrementTick+0x1ac>)
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d120      	bne.n	800953c <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 80094fa:	4b54      	ldr	r3, [pc, #336]	; (800964c <xTaskIncrementTick+0x1b0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <xTaskIncrementTick+0x7e>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	603b      	str	r3, [r7, #0]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xTaskIncrementTick+0x7c>
 800951a:	4b4c      	ldr	r3, [pc, #304]	; (800964c <xTaskIncrementTick+0x1b0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	4b4b      	ldr	r3, [pc, #300]	; (8009650 <xTaskIncrementTick+0x1b4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a49      	ldr	r2, [pc, #292]	; (800964c <xTaskIncrementTick+0x1b0>)
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	4a49      	ldr	r2, [pc, #292]	; (8009650 <xTaskIncrementTick+0x1b4>)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	4b49      	ldr	r3, [pc, #292]	; (8009654 <xTaskIncrementTick+0x1b8>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	4a47      	ldr	r2, [pc, #284]	; (8009654 <xTaskIncrementTick+0x1b8>)
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	f000 f9e4 	bl	8009904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800953c:	4b46      	ldr	r3, [pc, #280]	; (8009658 <xTaskIncrementTick+0x1bc>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	429a      	cmp	r2, r3
 8009544:	d35b      	bcc.n	80095fe <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009546:	4b41      	ldr	r3, [pc, #260]	; (800964c <xTaskIncrementTick+0x1b0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009550:	4b41      	ldr	r3, [pc, #260]	; (8009658 <xTaskIncrementTick+0x1bc>)
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	601a      	str	r2, [r3, #0]
					break;
 8009558:	e051      	b.n	80095fe <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955a:	4b3c      	ldr	r3, [pc, #240]	; (800964c <xTaskIncrementTick+0x1b0>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d203      	bcs.n	800957a <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009572:	4a39      	ldr	r2, [pc, #228]	; (8009658 <xTaskIncrementTick+0x1bc>)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009578:	e041      	b.n	80095fe <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3304      	adds	r3, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fb42 	bl	8008c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3318      	adds	r3, #24
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff fb39 	bl	8008c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009596:	68b8      	ldr	r0, [r7, #8]
 8009598:	f7f8 f8a4 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	4b2e      	ldr	r3, [pc, #184]	; (800965c <xTaskIncrementTick+0x1c0>)
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	4013      	ands	r3, r2
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d007      	beq.n	80095bc <xTaskIncrementTick+0x120>
 80095ac:	68b8      	ldr	r0, [r7, #8]
 80095ae:	f7f8 f88c 	bl	80016ca <prvTraceGetTaskNumberLow16>
 80095b2:	4603      	mov	r3, r0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f8 ff8c 	bl	80024d4 <prvTraceStoreTaskReady>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	2201      	movs	r2, #1
 80095c2:	409a      	lsls	r2, r3
 80095c4:	4b26      	ldr	r3, [pc, #152]	; (8009660 <xTaskIncrementTick+0x1c4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	4a25      	ldr	r2, [pc, #148]	; (8009660 <xTaskIncrementTick+0x1c4>)
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4a22      	ldr	r2, [pc, #136]	; (8009664 <xTaskIncrementTick+0x1c8>)
 80095dc:	441a      	add	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f7ff fab2 	bl	8008b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4b1e      	ldr	r3, [pc, #120]	; (8009668 <xTaskIncrementTick+0x1cc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d3a6      	bcc.n	8009546 <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095fc:	e7a3      	b.n	8009546 <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095fe:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <xTaskIncrementTick+0x1cc>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009604:	4917      	ldr	r1, [pc, #92]	; (8009664 <xTaskIncrementTick+0x1c8>)
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d901      	bls.n	800961a <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 8009616:	2301      	movs	r3, #1
 8009618:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800961a:	4b14      	ldr	r3, [pc, #80]	; (800966c <xTaskIncrementTick+0x1d0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d007      	beq.n	8009632 <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 8009622:	2301      	movs	r3, #1
 8009624:	617b      	str	r3, [r7, #20]
 8009626:	e004      	b.n	8009632 <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009628:	4b05      	ldr	r3, [pc, #20]	; (8009640 <xTaskIncrementTick+0x1a4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a04      	ldr	r2, [pc, #16]	; (8009640 <xTaskIncrementTick+0x1a4>)
 8009630:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009632:	697b      	ldr	r3, [r7, #20]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	200001fc 	.word	0x200001fc
 8009640:	200001e4 	.word	0x200001e4
 8009644:	2000009c 	.word	0x2000009c
 8009648:	200001d8 	.word	0x200001d8
 800964c:	2000018c 	.word	0x2000018c
 8009650:	20000190 	.word	0x20000190
 8009654:	200001ec 	.word	0x200001ec
 8009658:	200001f4 	.word	0x200001f4
 800965c:	20002ea8 	.word	0x20002ea8
 8009660:	200001dc 	.word	0x200001dc
 8009664:	200000d8 	.word	0x200000d8
 8009668:	200000d4 	.word	0x200000d4
 800966c:	200001e8 	.word	0x200001e8

08009670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009676:	4b38      	ldr	r3, [pc, #224]	; (8009758 <vTaskSwitchContext+0xe8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800967e:	4b37      	ldr	r3, [pc, #220]	; (800975c <vTaskSwitchContext+0xec>)
 8009680:	2201      	movs	r2, #1
 8009682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009684:	e063      	b.n	800974e <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 8009686:	4b35      	ldr	r3, [pc, #212]	; (800975c <vTaskSwitchContext+0xec>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800968c:	4b34      	ldr	r3, [pc, #208]	; (8009760 <vTaskSwitchContext+0xf0>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	fab3 f383 	clz	r3, r3
 8009698:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	f1c3 031f 	rsb	r3, r3, #31
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	4930      	ldr	r1, [pc, #192]	; (8009764 <vTaskSwitchContext+0xf4>)
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	607b      	str	r3, [r7, #4]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <vTaskSwitchContext+0x5a>
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a23      	ldr	r2, [pc, #140]	; (8009764 <vTaskSwitchContext+0xf4>)
 80096d8:	4413      	add	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3308      	adds	r3, #8
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d104      	bne.n	80096fc <vTaskSwitchContext+0x8c>
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	605a      	str	r2, [r3, #4]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	4a19      	ldr	r2, [pc, #100]	; (8009768 <vTaskSwitchContext+0xf8>)
 8009704:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <vTaskSwitchContext+0xfc>)
 8009708:	2201      	movs	r2, #1
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f7f8 f824 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 8009710:	4603      	mov	r3, r0
 8009712:	4618      	mov	r0, r3
 8009714:	f7f7 ffe6 	bl	80016e4 <prvTraceGetTaskNumberHigh16>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	4b14      	ldr	r3, [pc, #80]	; (8009770 <vTaskSwitchContext+0x100>)
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	4013      	ands	r3, r2
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <vTaskSwitchContext+0xce>
 8009728:	f7f8 f816 	bl	8001758 <prvTraceGetCurrentTaskHandle>
 800972c:	4603      	mov	r3, r0
 800972e:	4618      	mov	r0, r3
 8009730:	f7f7 ffcb 	bl	80016ca <prvTraceGetTaskNumberLow16>
 8009734:	4603      	mov	r3, r0
 8009736:	b2db      	uxtb	r3, r3
 8009738:	4618      	mov	r0, r3
 800973a:	f7f9 f8e7 	bl	800290c <prvTraceStoreTaskswitch>
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <vTaskSwitchContext+0xfc>)
 8009740:	2202      	movs	r2, #2
 8009742:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009744:	4b08      	ldr	r3, [pc, #32]	; (8009768 <vTaskSwitchContext+0xf8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3354      	adds	r3, #84	; 0x54
 800974a:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <vTaskSwitchContext+0x104>)
 800974c:	6013      	str	r3, [r2, #0]
}
 800974e:	bf00      	nop
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200001fc 	.word	0x200001fc
 800975c:	200001e8 	.word	0x200001e8
 8009760:	200001dc 	.word	0x200001dc
 8009764:	200000d8 	.word	0x200000d8
 8009768:	200000d4 	.word	0x200000d4
 800976c:	200000a8 	.word	0x200000a8
 8009770:	20002ea8 	.word	0x20002ea8
 8009774:	20000018 	.word	0x20000018

08009778 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d005      	beq.n	8009792 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	e001      	b.n	8009796 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8009796:	68fb      	ldr	r3, [r7, #12]
	}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 80097be:	bf00      	nop
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097d4:	f000 f852 	bl	800987c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097d8:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <prvIdleTask+0x28>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d9f9      	bls.n	80097d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <prvIdleTask+0x2c>)
 80097e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097f0:	e7f0      	b.n	80097d4 <prvIdleTask+0x8>
 80097f2:	bf00      	nop
 80097f4:	200000d8 	.word	0x200000d8
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009802:	2300      	movs	r3, #0
 8009804:	607b      	str	r3, [r7, #4]
 8009806:	e00c      	b.n	8009822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4a12      	ldr	r2, [pc, #72]	; (800985c <prvInitialiseTaskLists+0x60>)
 8009814:	4413      	add	r3, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff f96c 	bl	8008af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	607b      	str	r3, [r7, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b06      	cmp	r3, #6
 8009826:	d9ef      	bls.n	8009808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009828:	480d      	ldr	r0, [pc, #52]	; (8009860 <prvInitialiseTaskLists+0x64>)
 800982a:	f7ff f963 	bl	8008af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800982e:	480d      	ldr	r0, [pc, #52]	; (8009864 <prvInitialiseTaskLists+0x68>)
 8009830:	f7ff f960 	bl	8008af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009834:	480c      	ldr	r0, [pc, #48]	; (8009868 <prvInitialiseTaskLists+0x6c>)
 8009836:	f7ff f95d 	bl	8008af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800983a:	480c      	ldr	r0, [pc, #48]	; (800986c <prvInitialiseTaskLists+0x70>)
 800983c:	f7ff f95a 	bl	8008af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009840:	480b      	ldr	r0, [pc, #44]	; (8009870 <prvInitialiseTaskLists+0x74>)
 8009842:	f7ff f957 	bl	8008af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <prvInitialiseTaskLists+0x78>)
 8009848:	4a05      	ldr	r2, [pc, #20]	; (8009860 <prvInitialiseTaskLists+0x64>)
 800984a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <prvInitialiseTaskLists+0x7c>)
 800984e:	4a05      	ldr	r2, [pc, #20]	; (8009864 <prvInitialiseTaskLists+0x68>)
 8009850:	601a      	str	r2, [r3, #0]
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	200000d8 	.word	0x200000d8
 8009860:	20000164 	.word	0x20000164
 8009864:	20000178 	.word	0x20000178
 8009868:	20000194 	.word	0x20000194
 800986c:	200001a8 	.word	0x200001a8
 8009870:	200001c0 	.word	0x200001c0
 8009874:	2000018c 	.word	0x2000018c
 8009878:	20000190 	.word	0x20000190

0800987c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009882:	e019      	b.n	80098b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009884:	f000 fa0e 	bl	8009ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009888:	4b10      	ldr	r3, [pc, #64]	; (80098cc <prvCheckTasksWaitingTermination+0x50>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3304      	adds	r3, #4
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff f9b7 	bl	8008c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <prvCheckTasksWaitingTermination+0x54>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3b01      	subs	r3, #1
 80098a0:	4a0b      	ldr	r2, [pc, #44]	; (80098d0 <prvCheckTasksWaitingTermination+0x54>)
 80098a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098a4:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <prvCheckTasksWaitingTermination+0x58>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <prvCheckTasksWaitingTermination+0x58>)
 80098ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ae:	f000 fa29 	bl	8009d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f810 	bl	80098d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098b8:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <prvCheckTasksWaitingTermination+0x58>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e1      	bne.n	8009884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200001a8 	.word	0x200001a8
 80098d0:	200001d4 	.word	0x200001d4
 80098d4:	200001bc 	.word	0x200001bc

080098d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3354      	adds	r3, #84	; 0x54
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fd0b 	bl	800a300 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fb96 	bl	800a020 <vPortFree>
			vPortFree( pxTCB );
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fb93 	bl	800a020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800990a:	4b0c      	ldr	r3, [pc, #48]	; (800993c <prvResetNextTaskUnblockTime+0x38>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009914:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <prvResetNextTaskUnblockTime+0x3c>)
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800991c:	e008      	b.n	8009930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991e:	4b07      	ldr	r3, [pc, #28]	; (800993c <prvResetNextTaskUnblockTime+0x38>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4a04      	ldr	r2, [pc, #16]	; (8009940 <prvResetNextTaskUnblockTime+0x3c>)
 800992e:	6013      	str	r3, [r2, #0]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	2000018c 	.word	0x2000018c
 8009940:	200001f4 	.word	0x200001f4

08009944 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <xTaskGetCurrentTaskHandle+0x1c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009950:	687b      	ldr	r3, [r7, #4]
	}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	200000d4 	.word	0x200000d4

08009964 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800996e:	4b29      	ldr	r3, [pc, #164]	; (8009a14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009974:	4b28      	ldr	r3, [pc, #160]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3304      	adds	r3, #4
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff f944 	bl	8008c08 <uxListRemove>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10b      	bne.n	800999e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998c:	2201      	movs	r2, #1
 800998e:	fa02 f303 	lsl.w	r3, r2, r3
 8009992:	43da      	mvns	r2, r3
 8009994:	4b21      	ldr	r3, [pc, #132]	; (8009a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4013      	ands	r3, r2
 800999a:	4a20      	ldr	r2, [pc, #128]	; (8009a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800999c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d10a      	bne.n	80099bc <prvAddCurrentTaskToDelayedList+0x58>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d007      	beq.n	80099bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ac:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	481a      	ldr	r0, [pc, #104]	; (8009a20 <prvAddCurrentTaskToDelayedList+0xbc>)
 80099b6:	f7ff f8ca 	bl	8008b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099ba:	e026      	b.n	8009a0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4413      	add	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d209      	bcs.n	80099e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <prvAddCurrentTaskToDelayedList+0xc0>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7ff f8d8 	bl	8008b96 <vListInsert>
}
 80099e6:	e010      	b.n	8009a0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e8:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <prvAddCurrentTaskToDelayedList+0xc4>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7ff f8ce 	bl	8008b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d202      	bcs.n	8009a0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a04:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6013      	str	r3, [r2, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200001d8 	.word	0x200001d8
 8009a18:	200000d4 	.word	0x200000d4
 8009a1c:	200001dc 	.word	0x200001dc
 8009a20:	200001c0 	.word	0x200001c0
 8009a24:	20000190 	.word	0x20000190
 8009a28:	2000018c 	.word	0x2000018c
 8009a2c:	200001f4 	.word	0x200001f4

08009a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f023 0201 	bic.w	r2, r3, #1
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a60:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <pxPortInitialiseStack+0x64>)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b14      	subs	r3, #20
 8009a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f06f 0202 	mvn.w	r2, #2
 8009a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3b20      	subs	r3, #32
 8009a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a86:	68fb      	ldr	r3, [r7, #12]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	08009a99 	.word	0x08009a99

08009a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <prvTaskExitError+0x54>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d00a      	beq.n	8009ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <prvTaskExitError+0x28>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	60bb      	str	r3, [r7, #8]
}
 8009ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ad6:	bf00      	nop
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0fc      	beq.n	8009ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20000014 	.word	0x20000014

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	4770      	bx	lr
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	200000d4 	.word	0x200000d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <prvPortStartFirstTask+0x24>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8814 	msr	CONTROL, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df00      	svc	0
 8009b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed08 	.word	0xe000ed08

08009b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b46:	4b4e      	ldr	r3, [pc, #312]	; (8009c80 <xPortStartScheduler+0x140>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a4e      	ldr	r2, [pc, #312]	; (8009c84 <xPortStartScheduler+0x144>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10a      	bne.n	8009b66 <xPortStartScheduler+0x26>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	61bb      	str	r3, [r7, #24]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b66:	4b46      	ldr	r3, [pc, #280]	; (8009c80 <xPortStartScheduler+0x140>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a47      	ldr	r2, [pc, #284]	; (8009c88 <xPortStartScheduler+0x148>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10a      	bne.n	8009b86 <xPortStartScheduler+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	617b      	str	r3, [r7, #20]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b86:	4b41      	ldr	r3, [pc, #260]	; (8009c8c <xPortStartScheduler+0x14c>)
 8009b88:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	22ff      	movs	r2, #255	; 0xff
 8009b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b39      	ldr	r3, [pc, #228]	; (8009c90 <xPortStartScheduler+0x150>)
 8009bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bae:	4b39      	ldr	r3, [pc, #228]	; (8009c94 <xPortStartScheduler+0x154>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bb4:	e009      	b.n	8009bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bb6:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <xPortStartScheduler+0x154>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a35      	ldr	r2, [pc, #212]	; (8009c94 <xPortStartScheduler+0x154>)
 8009bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	d0ef      	beq.n	8009bb6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009bd6:	4b2f      	ldr	r3, [pc, #188]	; (8009c94 <xPortStartScheduler+0x154>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1c3 0307 	rsb	r3, r3, #7
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d00a      	beq.n	8009bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	613b      	str	r3, [r7, #16]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bf8:	4b26      	ldr	r3, [pc, #152]	; (8009c94 <xPortStartScheduler+0x154>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1c3 0307 	rsb	r3, r3, #7
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d00a      	beq.n	8009c1a <xPortStartScheduler+0xda>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60fb      	str	r3, [r7, #12]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c1a:	4b1e      	ldr	r3, [pc, #120]	; (8009c94 <xPortStartScheduler+0x154>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	4a1c      	ldr	r2, [pc, #112]	; (8009c94 <xPortStartScheduler+0x154>)
 8009c22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c24:	4b1b      	ldr	r3, [pc, #108]	; (8009c94 <xPortStartScheduler+0x154>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c2c:	4a19      	ldr	r2, [pc, #100]	; (8009c94 <xPortStartScheduler+0x154>)
 8009c2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c38:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <xPortStartScheduler+0x158>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a16      	ldr	r2, [pc, #88]	; (8009c98 <xPortStartScheduler+0x158>)
 8009c3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c44:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <xPortStartScheduler+0x158>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a13      	ldr	r2, [pc, #76]	; (8009c98 <xPortStartScheduler+0x158>)
 8009c4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c50:	f000 f8dc 	bl	8009e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c54:	4b11      	ldr	r3, [pc, #68]	; (8009c9c <xPortStartScheduler+0x15c>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c5a:	f000 f8fb 	bl	8009e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <xPortStartScheduler+0x160>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a0f      	ldr	r2, [pc, #60]	; (8009ca0 <xPortStartScheduler+0x160>)
 8009c64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c6a:	f7ff ff55 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c6e:	f7ff fcff 	bl	8009670 <vTaskSwitchContext>
	prvTaskExitError();
 8009c72:	f7ff ff11 	bl	8009a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	e000ed00 	.word	0xe000ed00
 8009c84:	410fc271 	.word	0x410fc271
 8009c88:	410fc270 	.word	0x410fc270
 8009c8c:	e000e400 	.word	0xe000e400
 8009c90:	20000200 	.word	0x20000200
 8009c94:	20000204 	.word	0x20000204
 8009c98:	e000ed20 	.word	0xe000ed20
 8009c9c:	20000014 	.word	0x20000014
 8009ca0:	e000ef34 	.word	0xe000ef34

08009ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	607b      	str	r3, [r7, #4]
}
 8009cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <vPortEnterCritical+0x58>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a0d      	ldr	r2, [pc, #52]	; (8009cfc <vPortEnterCritical+0x58>)
 8009cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <vPortEnterCritical+0x58>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d10f      	bne.n	8009cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <vPortEnterCritical+0x5c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	603b      	str	r3, [r7, #0]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <vPortEnterCritical+0x4a>
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	20000014 	.word	0x20000014
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <vPortExitCritical+0x50>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <vPortExitCritical+0x24>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	607b      	str	r3, [r7, #4]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <vPortExitCritical+0x50>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <vPortExitCritical+0x50>)
 8009d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <vPortExitCritical+0x50>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <vPortExitCritical+0x42>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20000014 	.word	0x20000014
	...

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	; (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d84:	f380 8811 	msr	BASEPRI, r0
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f7ff fc6e 	bl	8009670 <vTaskSwitchContext>
 8009d94:	f04f 0000 	mov.w	r0, #0
 8009d98:	f380 8811 	msr	BASEPRI, r0
 8009d9c:	bc09      	pop	{r0, r3}
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da6:	f01e 0f10 	tst.w	lr, #16
 8009daa:	bf08      	it	eq
 8009dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db0:	f380 8809 	msr	PSP, r0
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	200000d4 	.word	0x200000d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de2:	f7ff fb5b 	bl	800949c <xTaskIncrementTick>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <SysTick_Handler+0x40>)
 8009dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f383 8811 	msr	BASEPRI, r3
}
 8009dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e16:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <vPortSetupTimerInterrupt+0x38>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <vPortSetupTimerInterrupt+0x3c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <vPortSetupTimerInterrupt+0x40>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	099b      	lsrs	r3, r3, #6
 8009e28:	4a09      	ldr	r2, [pc, #36]	; (8009e50 <vPortSetupTimerInterrupt+0x44>)
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e2e:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e30:	2207      	movs	r2, #7
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	e000e010 	.word	0xe000e010
 8009e44:	e000e018 	.word	0xe000e018
 8009e48:	20000004 	.word	0x20000004
 8009e4c:	10624dd3 	.word	0x10624dd3
 8009e50:	e000e014 	.word	0xe000e014

08009e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e64 <vPortEnableVFP+0x10>
 8009e58:	6801      	ldr	r1, [r0, #0]
 8009e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e5e:	6001      	str	r1, [r0, #0]
 8009e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e62:	bf00      	nop
 8009e64:	e000ed88 	.word	0xe000ed88

08009e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	; 0x28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e74:	f7ff fa42 	bl	80092fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e78:	4b63      	ldr	r3, [pc, #396]	; (800a008 <pvPortMalloc+0x1a0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e80:	f000 f938 	bl	800a0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e84:	4b61      	ldr	r3, [pc, #388]	; (800a00c <pvPortMalloc+0x1a4>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 8093 	bne.w	8009fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01d      	beq.n	8009ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e98:	2208      	movs	r2, #8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d014      	beq.n	8009ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f023 0307 	bic.w	r3, r3, #7
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	617b      	str	r3, [r7, #20]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d06e      	beq.n	8009fb8 <pvPortMalloc+0x150>
 8009eda:	4b4d      	ldr	r3, [pc, #308]	; (800a010 <pvPortMalloc+0x1a8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d869      	bhi.n	8009fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ee4:	4b4b      	ldr	r3, [pc, #300]	; (800a014 <pvPortMalloc+0x1ac>)
 8009ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ee8:	4b4a      	ldr	r3, [pc, #296]	; (800a014 <pvPortMalloc+0x1ac>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eee:	e004      	b.n	8009efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d903      	bls.n	8009f0c <pvPortMalloc+0xa4>
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1f1      	bne.n	8009ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f0c:	4b3e      	ldr	r3, [pc, #248]	; (800a008 <pvPortMalloc+0x1a0>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d050      	beq.n	8009fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	4413      	add	r3, r2
 8009f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	2308      	movs	r3, #8
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d91f      	bls.n	8009f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <pvPortMalloc+0xf8>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	613b      	str	r3, [r7, #16]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	1ad2      	subs	r2, r2, r3
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f72:	69b8      	ldr	r0, [r7, #24]
 8009f74:	f000 f920 	bl	800a1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f78:	4b25      	ldr	r3, [pc, #148]	; (800a010 <pvPortMalloc+0x1a8>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	4a23      	ldr	r2, [pc, #140]	; (800a010 <pvPortMalloc+0x1a8>)
 8009f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f86:	4b22      	ldr	r3, [pc, #136]	; (800a010 <pvPortMalloc+0x1a8>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b23      	ldr	r3, [pc, #140]	; (800a018 <pvPortMalloc+0x1b0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d203      	bcs.n	8009f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f92:	4b1f      	ldr	r3, [pc, #124]	; (800a010 <pvPortMalloc+0x1a8>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a20      	ldr	r2, [pc, #128]	; (800a018 <pvPortMalloc+0x1b0>)
 8009f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <pvPortMalloc+0x1a4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009fae:	4b1b      	ldr	r3, [pc, #108]	; (800a01c <pvPortMalloc+0x1b4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	4a19      	ldr	r2, [pc, #100]	; (800a01c <pvPortMalloc+0x1b4>)
 8009fb6:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d006      	beq.n	8009fcc <pvPortMalloc+0x164>
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	2094      	movs	r0, #148	; 0x94
 8009fc6:	f7f8 fae9 	bl	800259c <vTraceStoreMemMangEvent>
 8009fca:	e005      	b.n	8009fd8 <pvPortMalloc+0x170>
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	20e8      	movs	r0, #232	; 0xe8
 8009fd4:	f7f8 fae2 	bl	800259c <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8009fd8:	f7ff f99e 	bl	8009318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <pvPortMalloc+0x194>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60fb      	str	r3, [r7, #12]
}
 8009ff8:	bf00      	nop
 8009ffa:	e7fe      	b.n	8009ffa <pvPortMalloc+0x192>
	return pvReturn;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3728      	adds	r7, #40	; 0x28
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20002920 	.word	0x20002920
 800a00c:	20002934 	.word	0x20002934
 800a010:	20002924 	.word	0x20002924
 800a014:	20002918 	.word	0x20002918
 800a018:	20002928 	.word	0x20002928
 800a01c:	2000292c 	.word	0x2000292c

0800a020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d055      	beq.n	800a0de <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a032:	2308      	movs	r3, #8
 800a034:	425b      	negs	r3, r3
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	4413      	add	r3, r2
 800a03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <vPortFree+0xc8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4013      	ands	r3, r2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <vPortFree+0x44>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <vPortFree+0x62>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	60bb      	str	r3, [r7, #8]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	4b18      	ldr	r3, [pc, #96]	; (800a0e8 <vPortFree+0xc8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d026      	beq.n	800a0de <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d122      	bne.n	800a0de <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <vPortFree+0xc8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	43db      	mvns	r3, r3
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0a8:	f7ff f928 	bl	80092fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <vPortFree+0xcc>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <vPortFree+0xcc>)
 800a0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	425b      	negs	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2096      	movs	r0, #150	; 0x96
 800a0c6:	f7f8 fa69 	bl	800259c <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f000 f874 	bl	800a1b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <vPortFree+0xd0>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <vPortFree+0xd0>)
 800a0d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0da:	f7ff f91d 	bl	8009318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20002934 	.word	0x20002934
 800a0ec:	20002924 	.word	0x20002924
 800a0f0:	20002930 	.word	0x20002930

0800a0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0fa:	f242 7310 	movw	r3, #10000	; 0x2710
 800a0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a100:	4b27      	ldr	r3, [pc, #156]	; (800a1a0 <prvHeapInit+0xac>)
 800a102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f003 0307 	and.w	r3, r3, #7
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3307      	adds	r3, #7
 800a112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f023 0307 	bic.w	r3, r3, #7
 800a11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	4a1f      	ldr	r2, [pc, #124]	; (800a1a0 <prvHeapInit+0xac>)
 800a124:	4413      	add	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a12c:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <prvHeapInit+0xb0>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <prvHeapInit+0xb0>)
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a140:	2208      	movs	r2, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f023 0307 	bic.w	r3, r3, #7
 800a14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a15      	ldr	r2, [pc, #84]	; (800a1a8 <prvHeapInit+0xb4>)
 800a154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <prvHeapInit+0xb4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2200      	movs	r2, #0
 800a15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <prvHeapInit+0xb4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <prvHeapInit+0xb4>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	4a0a      	ldr	r2, [pc, #40]	; (800a1ac <prvHeapInit+0xb8>)
 800a182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <prvHeapInit+0xbc>)
 800a18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <prvHeapInit+0xc0>)
 800a18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20000208 	.word	0x20000208
 800a1a4:	20002918 	.word	0x20002918
 800a1a8:	20002920 	.word	0x20002920
 800a1ac:	20002928 	.word	0x20002928
 800a1b0:	20002924 	.word	0x20002924
 800a1b4:	20002934 	.word	0x20002934

0800a1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1c0:	4b28      	ldr	r3, [pc, #160]	; (800a264 <prvInsertBlockIntoFreeList+0xac>)
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e002      	b.n	800a1cc <prvInsertBlockIntoFreeList+0x14>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d8f7      	bhi.n	800a1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d108      	bne.n	800a1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	441a      	add	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d118      	bne.n	800a240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	4b15      	ldr	r3, [pc, #84]	; (800a268 <prvInsertBlockIntoFreeList+0xb0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d00d      	beq.n	800a236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	e008      	b.n	800a248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <prvInsertBlockIntoFreeList+0xb0>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	e003      	b.n	800a248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d002      	beq.n	800a256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20002918 	.word	0x20002918
 800a268:	20002920 	.word	0x20002920

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4d0d      	ldr	r5, [pc, #52]	; (800a2a4 <__libc_init_array+0x38>)
 800a270:	4c0d      	ldr	r4, [pc, #52]	; (800a2a8 <__libc_init_array+0x3c>)
 800a272:	1b64      	subs	r4, r4, r5
 800a274:	10a4      	asrs	r4, r4, #2
 800a276:	2600      	movs	r6, #0
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	4d0b      	ldr	r5, [pc, #44]	; (800a2ac <__libc_init_array+0x40>)
 800a27e:	4c0c      	ldr	r4, [pc, #48]	; (800a2b0 <__libc_init_array+0x44>)
 800a280:	f000 f908 	bl	800a494 <_init>
 800a284:	1b64      	subs	r4, r4, r5
 800a286:	10a4      	asrs	r4, r4, #2
 800a288:	2600      	movs	r6, #0
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800bb00 	.word	0x0800bb00
 800a2a8:	0800bb00 	.word	0x0800bb00
 800a2ac:	0800bb00 	.word	0x0800bb00
 800a2b0:	0800bb04 	.word	0x0800bb04

0800a2b4 <__retarget_lock_acquire_recursive>:
 800a2b4:	4770      	bx	lr

0800a2b6 <__retarget_lock_release_recursive>:
 800a2b6:	4770      	bx	lr

0800a2b8 <memcpy>:
 800a2b8:	440a      	add	r2, r1
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c0:	d100      	bne.n	800a2c4 <memcpy+0xc>
 800a2c2:	4770      	bx	lr
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	d1f9      	bne.n	800a2c6 <memcpy+0xe>
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <memset>:
 800a2d4:	4402      	add	r2, r0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d100      	bne.n	800a2de <memset+0xa>
 800a2dc:	4770      	bx	lr
 800a2de:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e2:	e7f9      	b.n	800a2d8 <memset+0x4>

0800a2e4 <cleanup_glue>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	6809      	ldr	r1, [r1, #0]
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	b109      	cbz	r1, 800a2f2 <cleanup_glue+0xe>
 800a2ee:	f7ff fff9 	bl	800a2e4 <cleanup_glue>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fa:	f000 b87b 	b.w	800a3f4 <_free_r>
	...

0800a300 <_reclaim_reent>:
 800a300:	4b2c      	ldr	r3, [pc, #176]	; (800a3b4 <_reclaim_reent+0xb4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4283      	cmp	r3, r0
 800a306:	b570      	push	{r4, r5, r6, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	d051      	beq.n	800a3b0 <_reclaim_reent+0xb0>
 800a30c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a30e:	b143      	cbz	r3, 800a322 <_reclaim_reent+0x22>
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d14a      	bne.n	800a3ac <_reclaim_reent+0xac>
 800a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	b111      	cbz	r1, 800a322 <_reclaim_reent+0x22>
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 f869 	bl	800a3f4 <_free_r>
 800a322:	6961      	ldr	r1, [r4, #20]
 800a324:	b111      	cbz	r1, 800a32c <_reclaim_reent+0x2c>
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f864 	bl	800a3f4 <_free_r>
 800a32c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a32e:	b111      	cbz	r1, 800a336 <_reclaim_reent+0x36>
 800a330:	4620      	mov	r0, r4
 800a332:	f000 f85f 	bl	800a3f4 <_free_r>
 800a336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a338:	b111      	cbz	r1, 800a340 <_reclaim_reent+0x40>
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 f85a 	bl	800a3f4 <_free_r>
 800a340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a342:	b111      	cbz	r1, 800a34a <_reclaim_reent+0x4a>
 800a344:	4620      	mov	r0, r4
 800a346:	f000 f855 	bl	800a3f4 <_free_r>
 800a34a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a34c:	b111      	cbz	r1, 800a354 <_reclaim_reent+0x54>
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 f850 	bl	800a3f4 <_free_r>
 800a354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a356:	b111      	cbz	r1, 800a35e <_reclaim_reent+0x5e>
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 f84b 	bl	800a3f4 <_free_r>
 800a35e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a360:	b111      	cbz	r1, 800a368 <_reclaim_reent+0x68>
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f846 	bl	800a3f4 <_free_r>
 800a368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a36a:	b111      	cbz	r1, 800a372 <_reclaim_reent+0x72>
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f841 	bl	800a3f4 <_free_r>
 800a372:	69a3      	ldr	r3, [r4, #24]
 800a374:	b1e3      	cbz	r3, 800a3b0 <_reclaim_reent+0xb0>
 800a376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a378:	4620      	mov	r0, r4
 800a37a:	4798      	blx	r3
 800a37c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a37e:	b1b9      	cbz	r1, 800a3b0 <_reclaim_reent+0xb0>
 800a380:	4620      	mov	r0, r4
 800a382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a386:	f7ff bfad 	b.w	800a2e4 <cleanup_glue>
 800a38a:	5949      	ldr	r1, [r1, r5]
 800a38c:	b941      	cbnz	r1, 800a3a0 <_reclaim_reent+0xa0>
 800a38e:	3504      	adds	r5, #4
 800a390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a392:	2d80      	cmp	r5, #128	; 0x80
 800a394:	68d9      	ldr	r1, [r3, #12]
 800a396:	d1f8      	bne.n	800a38a <_reclaim_reent+0x8a>
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 f82b 	bl	800a3f4 <_free_r>
 800a39e:	e7ba      	b.n	800a316 <_reclaim_reent+0x16>
 800a3a0:	680e      	ldr	r6, [r1, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 f826 	bl	800a3f4 <_free_r>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	e7ef      	b.n	800a38c <_reclaim_reent+0x8c>
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	e7ef      	b.n	800a390 <_reclaim_reent+0x90>
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000018 	.word	0x20000018

0800a3b8 <strncmp>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	b16a      	cbz	r2, 800a3d8 <strncmp+0x20>
 800a3bc:	3901      	subs	r1, #1
 800a3be:	1884      	adds	r4, r0, r2
 800a3c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a3c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d103      	bne.n	800a3d4 <strncmp+0x1c>
 800a3cc:	42a0      	cmp	r0, r4
 800a3ce:	d001      	beq.n	800a3d4 <strncmp+0x1c>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f5      	bne.n	800a3c0 <strncmp+0x8>
 800a3d4:	1a98      	subs	r0, r3, r2
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	4610      	mov	r0, r2
 800a3da:	e7fc      	b.n	800a3d6 <strncmp+0x1e>

0800a3dc <__malloc_lock>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	; (800a3e4 <__malloc_lock+0x8>)
 800a3de:	f7ff bf69 	b.w	800a2b4 <__retarget_lock_acquire_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	2000b5b8 	.word	0x2000b5b8

0800a3e8 <__malloc_unlock>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__malloc_unlock+0x8>)
 800a3ea:	f7ff bf64 	b.w	800a2b6 <__retarget_lock_release_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	2000b5b8 	.word	0x2000b5b8

0800a3f4 <_free_r>:
 800a3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	d048      	beq.n	800a48c <_free_r+0x98>
 800a3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fe:	9001      	str	r0, [sp, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f1a1 0404 	sub.w	r4, r1, #4
 800a406:	bfb8      	it	lt
 800a408:	18e4      	addlt	r4, r4, r3
 800a40a:	f7ff ffe7 	bl	800a3dc <__malloc_lock>
 800a40e:	4a20      	ldr	r2, [pc, #128]	; (800a490 <_free_r+0x9c>)
 800a410:	9801      	ldr	r0, [sp, #4]
 800a412:	6813      	ldr	r3, [r2, #0]
 800a414:	4615      	mov	r5, r2
 800a416:	b933      	cbnz	r3, 800a426 <_free_r+0x32>
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	6014      	str	r4, [r2, #0]
 800a41c:	b003      	add	sp, #12
 800a41e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a422:	f7ff bfe1 	b.w	800a3e8 <__malloc_unlock>
 800a426:	42a3      	cmp	r3, r4
 800a428:	d90b      	bls.n	800a442 <_free_r+0x4e>
 800a42a:	6821      	ldr	r1, [r4, #0]
 800a42c:	1862      	adds	r2, r4, r1
 800a42e:	4293      	cmp	r3, r2
 800a430:	bf04      	itt	eq
 800a432:	681a      	ldreq	r2, [r3, #0]
 800a434:	685b      	ldreq	r3, [r3, #4]
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	bf04      	itt	eq
 800a43a:	1852      	addeq	r2, r2, r1
 800a43c:	6022      	streq	r2, [r4, #0]
 800a43e:	602c      	str	r4, [r5, #0]
 800a440:	e7ec      	b.n	800a41c <_free_r+0x28>
 800a442:	461a      	mov	r2, r3
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	b10b      	cbz	r3, 800a44c <_free_r+0x58>
 800a448:	42a3      	cmp	r3, r4
 800a44a:	d9fa      	bls.n	800a442 <_free_r+0x4e>
 800a44c:	6811      	ldr	r1, [r2, #0]
 800a44e:	1855      	adds	r5, r2, r1
 800a450:	42a5      	cmp	r5, r4
 800a452:	d10b      	bne.n	800a46c <_free_r+0x78>
 800a454:	6824      	ldr	r4, [r4, #0]
 800a456:	4421      	add	r1, r4
 800a458:	1854      	adds	r4, r2, r1
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	6011      	str	r1, [r2, #0]
 800a45e:	d1dd      	bne.n	800a41c <_free_r+0x28>
 800a460:	681c      	ldr	r4, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	6053      	str	r3, [r2, #4]
 800a466:	4421      	add	r1, r4
 800a468:	6011      	str	r1, [r2, #0]
 800a46a:	e7d7      	b.n	800a41c <_free_r+0x28>
 800a46c:	d902      	bls.n	800a474 <_free_r+0x80>
 800a46e:	230c      	movs	r3, #12
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	e7d3      	b.n	800a41c <_free_r+0x28>
 800a474:	6825      	ldr	r5, [r4, #0]
 800a476:	1961      	adds	r1, r4, r5
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf04      	itt	eq
 800a47c:	6819      	ldreq	r1, [r3, #0]
 800a47e:	685b      	ldreq	r3, [r3, #4]
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	bf04      	itt	eq
 800a484:	1949      	addeq	r1, r1, r5
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	6054      	str	r4, [r2, #4]
 800a48a:	e7c7      	b.n	800a41c <_free_r+0x28>
 800a48c:	b003      	add	sp, #12
 800a48e:	bd30      	pop	{r4, r5, pc}
 800a490:	20002938 	.word	0x20002938

0800a494 <_init>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_fini>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr
