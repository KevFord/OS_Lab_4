
OS_Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c55c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a8  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd4c  0800dd4c  0001dd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd50  0800dd50  0001dd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  0800dd54  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b57c  20000084  0800ddd4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000b600  0800ddd4  0002b600  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034332  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005add  00000000  00000000  000543e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002af0  00000000  00000000  00059ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002a965  00000000  00000000  0005c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002ccfb  00000000  00000000  0008731d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0010b15d  00000000  00000000  000b4018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001bf175  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000028e0  00000000  00000000  001bf1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bd50  00000000  00000000  001c1aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c684 	.word	0x0800c684

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	0800c684 	.word	0x0800c684

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_d2uiz>:
 8000220:	004a      	lsls	r2, r1, #1
 8000222:	d211      	bcs.n	8000248 <__aeabi_d2uiz+0x28>
 8000224:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000228:	d211      	bcs.n	800024e <__aeabi_d2uiz+0x2e>
 800022a:	d50d      	bpl.n	8000248 <__aeabi_d2uiz+0x28>
 800022c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000230:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000234:	d40e      	bmi.n	8000254 <__aeabi_d2uiz+0x34>
 8000236:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800023a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800023e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000242:	fa23 f002 	lsr.w	r0, r3, r2
 8000246:	4770      	bx	lr
 8000248:	f04f 0000 	mov.w	r0, #0
 800024c:	4770      	bx	lr
 800024e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000252:	d102      	bne.n	800025a <__aeabi_d2uiz+0x3a>
 8000254:	f04f 30ff 	mov.w	r0, #4294967295
 8000258:	4770      	bx	lr
 800025a:	f04f 0000 	mov.w	r0, #0
 800025e:	4770      	bx	lr

08000260 <__aeabi_uldivmod>:
 8000260:	b953      	cbnz	r3, 8000278 <__aeabi_uldivmod+0x18>
 8000262:	b94a      	cbnz	r2, 8000278 <__aeabi_uldivmod+0x18>
 8000264:	2900      	cmp	r1, #0
 8000266:	bf08      	it	eq
 8000268:	2800      	cmpeq	r0, #0
 800026a:	bf1c      	itt	ne
 800026c:	f04f 31ff 	movne.w	r1, #4294967295
 8000270:	f04f 30ff 	movne.w	r0, #4294967295
 8000274:	f000 b96e 	b.w	8000554 <__aeabi_idiv0>
 8000278:	f1ad 0c08 	sub.w	ip, sp, #8
 800027c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000280:	f000 f806 	bl	8000290 <__udivmoddi4>
 8000284:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800028c:	b004      	add	sp, #16
 800028e:	4770      	bx	lr

08000290 <__udivmoddi4>:
 8000290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000294:	9d08      	ldr	r5, [sp, #32]
 8000296:	4604      	mov	r4, r0
 8000298:	468c      	mov	ip, r1
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 8083 	bne.w	80003a6 <__udivmoddi4+0x116>
 80002a0:	428a      	cmp	r2, r1
 80002a2:	4617      	mov	r7, r2
 80002a4:	d947      	bls.n	8000336 <__udivmoddi4+0xa6>
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	b142      	cbz	r2, 80002be <__udivmoddi4+0x2e>
 80002ac:	f1c2 0020 	rsb	r0, r2, #32
 80002b0:	fa24 f000 	lsr.w	r0, r4, r0
 80002b4:	4091      	lsls	r1, r2
 80002b6:	4097      	lsls	r7, r2
 80002b8:	ea40 0c01 	orr.w	ip, r0, r1
 80002bc:	4094      	lsls	r4, r2
 80002be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fbbc f6f8 	udiv	r6, ip, r8
 80002c8:	fa1f fe87 	uxth.w	lr, r7
 80002cc:	fb08 c116 	mls	r1, r8, r6, ip
 80002d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d4:	fb06 f10e 	mul.w	r1, r6, lr
 80002d8:	4299      	cmp	r1, r3
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x60>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e2:	f080 8119 	bcs.w	8000518 <__udivmoddi4+0x288>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 8116 	bls.w	8000518 <__udivmoddi4+0x288>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	443b      	add	r3, r7
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 fe0e 	mul.w	lr, r0, lr
 8000304:	45a6      	cmp	lr, r4
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x8c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	f080 8105 	bcs.w	800051c <__udivmoddi4+0x28c>
 8000312:	45a6      	cmp	lr, r4
 8000314:	f240 8102 	bls.w	800051c <__udivmoddi4+0x28c>
 8000318:	3802      	subs	r0, #2
 800031a:	443c      	add	r4, r7
 800031c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000320:	eba4 040e 	sub.w	r4, r4, lr
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa0>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b902      	cbnz	r2, 800033a <__udivmoddi4+0xaa>
 8000338:	deff      	udf	#255	; 0xff
 800033a:	fab2 f282 	clz	r2, r2
 800033e:	2a00      	cmp	r2, #0
 8000340:	d150      	bne.n	80003e4 <__udivmoddi4+0x154>
 8000342:	1bcb      	subs	r3, r1, r7
 8000344:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000348:	fa1f f887 	uxth.w	r8, r7
 800034c:	2601      	movs	r6, #1
 800034e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000352:	0c21      	lsrs	r1, r4, #16
 8000354:	fb0e 331c 	mls	r3, lr, ip, r3
 8000358:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800035c:	fb08 f30c 	mul.w	r3, r8, ip
 8000360:	428b      	cmp	r3, r1
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0xe4>
 8000364:	1879      	adds	r1, r7, r1
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0xe2>
 800036c:	428b      	cmp	r3, r1
 800036e:	f200 80e9 	bhi.w	8000544 <__udivmoddi4+0x2b4>
 8000372:	4684      	mov	ip, r0
 8000374:	1ac9      	subs	r1, r1, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000380:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x10c>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x10a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80d9 	bhi.w	800054c <__udivmoddi4+0x2bc>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e7bf      	b.n	8000326 <__udivmoddi4+0x96>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0x12e>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	f000 80b1 	beq.w	8000512 <__udivmoddi4+0x282>
 80003b0:	2600      	movs	r6, #0
 80003b2:	e9c5 0100 	strd	r0, r1, [r5]
 80003b6:	4630      	mov	r0, r6
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f683 	clz	r6, r3
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d14a      	bne.n	800045c <__udivmoddi4+0x1cc>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0x140>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80b8 	bhi.w	8000540 <__udivmoddi4+0x2b0>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0103 	sbc.w	r1, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	468c      	mov	ip, r1
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0a8      	beq.n	8000330 <__udivmoddi4+0xa0>
 80003de:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0xa0>
 80003e4:	f1c2 0320 	rsb	r3, r2, #32
 80003e8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ec:	4097      	lsls	r7, r2
 80003ee:	fa01 f002 	lsl.w	r0, r1, r2
 80003f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f6:	40d9      	lsrs	r1, r3
 80003f8:	4330      	orrs	r0, r6
 80003fa:	0c03      	lsrs	r3, r0, #16
 80003fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000400:	fa1f f887 	uxth.w	r8, r7
 8000404:	fb0e 1116 	mls	r1, lr, r6, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb06 f108 	mul.w	r1, r6, r8
 8000410:	4299      	cmp	r1, r3
 8000412:	fa04 f402 	lsl.w	r4, r4, r2
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x19c>
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	f106 3cff 	add.w	ip, r6, #4294967295
 800041e:	f080 808d 	bcs.w	800053c <__udivmoddi4+0x2ac>
 8000422:	4299      	cmp	r1, r3
 8000424:	f240 808a 	bls.w	800053c <__udivmoddi4+0x2ac>
 8000428:	3e02      	subs	r6, #2
 800042a:	443b      	add	r3, r7
 800042c:	1a5b      	subs	r3, r3, r1
 800042e:	b281      	uxth	r1, r0
 8000430:	fbb3 f0fe 	udiv	r0, r3, lr
 8000434:	fb0e 3310 	mls	r3, lr, r0, r3
 8000438:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043c:	fb00 f308 	mul.w	r3, r0, r8
 8000440:	428b      	cmp	r3, r1
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x1c4>
 8000444:	1879      	adds	r1, r7, r1
 8000446:	f100 3cff 	add.w	ip, r0, #4294967295
 800044a:	d273      	bcs.n	8000534 <__udivmoddi4+0x2a4>
 800044c:	428b      	cmp	r3, r1
 800044e:	d971      	bls.n	8000534 <__udivmoddi4+0x2a4>
 8000450:	3802      	subs	r0, #2
 8000452:	4439      	add	r1, r7
 8000454:	1acb      	subs	r3, r1, r3
 8000456:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045a:	e778      	b.n	800034e <__udivmoddi4+0xbe>
 800045c:	f1c6 0c20 	rsb	ip, r6, #32
 8000460:	fa03 f406 	lsl.w	r4, r3, r6
 8000464:	fa22 f30c 	lsr.w	r3, r2, ip
 8000468:	431c      	orrs	r4, r3
 800046a:	fa20 f70c 	lsr.w	r7, r0, ip
 800046e:	fa01 f306 	lsl.w	r3, r1, r6
 8000472:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000476:	fa21 f10c 	lsr.w	r1, r1, ip
 800047a:	431f      	orrs	r7, r3
 800047c:	0c3b      	lsrs	r3, r7, #16
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fa1f f884 	uxth.w	r8, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800048e:	fb09 fa08 	mul.w	sl, r9, r8
 8000492:	458a      	cmp	sl, r1
 8000494:	fa02 f206 	lsl.w	r2, r2, r6
 8000498:	fa00 f306 	lsl.w	r3, r0, r6
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x220>
 800049e:	1861      	adds	r1, r4, r1
 80004a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a4:	d248      	bcs.n	8000538 <__udivmoddi4+0x2a8>
 80004a6:	458a      	cmp	sl, r1
 80004a8:	d946      	bls.n	8000538 <__udivmoddi4+0x2a8>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4421      	add	r1, r4
 80004b0:	eba1 010a 	sub.w	r1, r1, sl
 80004b4:	b2bf      	uxth	r7, r7
 80004b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80004be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c2:	fb00 f808 	mul.w	r8, r0, r8
 80004c6:	45b8      	cmp	r8, r7
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x24a>
 80004ca:	19e7      	adds	r7, r4, r7
 80004cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d0:	d22e      	bcs.n	8000530 <__udivmoddi4+0x2a0>
 80004d2:	45b8      	cmp	r8, r7
 80004d4:	d92c      	bls.n	8000530 <__udivmoddi4+0x2a0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4427      	add	r7, r4
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	eba7 0708 	sub.w	r7, r7, r8
 80004e2:	fba0 8902 	umull	r8, r9, r0, r2
 80004e6:	454f      	cmp	r7, r9
 80004e8:	46c6      	mov	lr, r8
 80004ea:	4649      	mov	r1, r9
 80004ec:	d31a      	bcc.n	8000524 <__udivmoddi4+0x294>
 80004ee:	d017      	beq.n	8000520 <__udivmoddi4+0x290>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x27a>
 80004f2:	ebb3 020e 	subs.w	r2, r3, lr
 80004f6:	eb67 0701 	sbc.w	r7, r7, r1
 80004fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004fe:	40f2      	lsrs	r2, r6
 8000500:	ea4c 0202 	orr.w	r2, ip, r2
 8000504:	40f7      	lsrs	r7, r6
 8000506:	e9c5 2700 	strd	r2, r7, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e70b      	b.n	8000330 <__udivmoddi4+0xa0>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0x60>
 800051c:	4618      	mov	r0, r3
 800051e:	e6fd      	b.n	800031c <__udivmoddi4+0x8c>
 8000520:	4543      	cmp	r3, r8
 8000522:	d2e5      	bcs.n	80004f0 <__udivmoddi4+0x260>
 8000524:	ebb8 0e02 	subs.w	lr, r8, r2
 8000528:	eb69 0104 	sbc.w	r1, r9, r4
 800052c:	3801      	subs	r0, #1
 800052e:	e7df      	b.n	80004f0 <__udivmoddi4+0x260>
 8000530:	4608      	mov	r0, r1
 8000532:	e7d2      	b.n	80004da <__udivmoddi4+0x24a>
 8000534:	4660      	mov	r0, ip
 8000536:	e78d      	b.n	8000454 <__udivmoddi4+0x1c4>
 8000538:	4681      	mov	r9, r0
 800053a:	e7b9      	b.n	80004b0 <__udivmoddi4+0x220>
 800053c:	4666      	mov	r6, ip
 800053e:	e775      	b.n	800042c <__udivmoddi4+0x19c>
 8000540:	4630      	mov	r0, r6
 8000542:	e74a      	b.n	80003da <__udivmoddi4+0x14a>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	4439      	add	r1, r7
 800054a:	e713      	b.n	8000374 <__udivmoddi4+0xe4>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	e724      	b.n	800039c <__udivmoddi4+0x10c>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <ustress>:
#define STROBE_DELAY_USEC 40


// Works because TIM1 runs at 1 MHz
void ustress(uint16_t delay_usec)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t curr;

	while (delay_usec > 0)
 8000562:	e00e      	b.n	8000582 <ustress+0x2a>
	{
		curr = TIM1->CNT;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <ustress+0x40>)
 8000566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	81fb      	strh	r3, [r7, #14]
		while (curr == TIM1->CNT) // be stuck here
 800056c:	bf00      	nop
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	b29b      	uxth	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <ustress+0x40>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	429a      	cmp	r2, r3
 800057a:	d0f8      	beq.n	800056e <ustress+0x16>
		{

		}
		delay_usec--;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	3b01      	subs	r3, #1
 8000580:	80fb      	strh	r3, [r7, #6]
	while (delay_usec > 0)
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1ed      	bne.n	8000564 <ustress+0xc>
	}
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40012c00 	.word	0x40012c00

0800059c <TextLCD_Strobe>:


void TextLCD_Strobe(TextLCDType *lcd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
	// 0x0E == b# 0000 1110

	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04; // b# 0000 0100
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	b299      	uxth	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	1d5a      	adds	r2, r3, #5
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	f005 fa50 	bl	8005a6c <HAL_I2C_Master_Transmit>
	ustress(STROBE_DELAY_USEC);
 80005cc:	2028      	movs	r0, #40	; 0x28
 80005ce:	f7ff ffc3 	bl	8000558 <ustress>
//	 HAL_Delay(1);

	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;	// b# 1111 1011
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	f023 0304 	bic.w	r3, r3, #4
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	b299      	uxth	r1, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	1d5a      	adds	r2, r3, #5
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	f005 fa39 	bl	8005a6c <HAL_I2C_Master_Transmit>
	ustress(STROBE_DELAY_USEC);
 80005fa:	2028      	movs	r0, #40	; 0x28
 80005fc:	f7ff ffac 	bl	8000558 <ustress>
//	 HAL_Delay(1);
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	// cmd = 76543210
	// cmd & 0xF0 == cmd & (b# 1111 0000) == 7654____
	//       0x0C == b# 0000 1100

	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	b25b      	sxtb	r3, r3
 800061a:	f003 030c 	and.w	r3, r3, #12
 800061e:	b25a      	sxtb	r2, r3
 8000620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000624:	f023 030f 	bic.w	r3, r3, #15
 8000628:	b25b      	sxtb	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	b299      	uxth	r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	1d5a      	adds	r2, r3, #5
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	f005 fa0f 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ffa4 	bl	800059c <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	b25b      	sxtb	r3, r3
 800065a:	f003 030c 	and.w	r3, r3, #12
 800065e:	b25a      	sxtb	r2, r3
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b25b      	sxtb	r3, r3
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	b299      	uxth	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1d5a      	adds	r2, r3, #5
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	f005 f9f1 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff86 	bl	800059c <TextLCD_Strobe>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af02      	add	r7, sp, #8
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030d 	and.w	r3, r3, #13
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	b299      	uxth	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1d5a      	adds	r2, r3, #5
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	f005 f9c4 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff59 	bl	800059c <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	795b      	ldrb	r3, [r3, #5]
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	f003 030d 	and.w	r3, r3, #13
 80006f4:	b25a      	sxtb	r2, r3
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b25b      	sxtb	r3, r3
 8000706:	b2da      	uxtb	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	b299      	uxth	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	1d5a      	adds	r2, r3, #5
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	f005 f9a3 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff38 	bl	800059c <TextLCD_Strobe>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <TextLCD_Init>:
/**
  *	Initialize the LCD to 4-bit mode.
  *	Set up 2 lines, 5x8 fonts and no cursor blinking.
  */
void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38; // b# 0011 1000
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2238      	movs	r2, #56	; 0x38
 8000752:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	b299      	uxth	r1, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	1d5a      	adds	r2, r3, #5
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	f005 f97f 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ff14 	bl	800059c <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	b299      	uxth	r1, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1d5a      	adds	r2, r3, #5
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	f005 f96f 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f7ff ff04 	bl	800059c <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	b299      	uxth	r1, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	1d5a      	adds	r2, r3, #5
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	f005 f95f 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f7ff fef4 	bl	800059c <TextLCD_Strobe>
	lcd->data = 0x28;	// b# 0010 1000
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	b299      	uxth	r1, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1d5a      	adds	r2, r3, #5
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	f005 f94c 	bl	8005a6c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f7ff fee1 	bl	800059c <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 80007da:	2128      	movs	r1, #40	; 0x28
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff ff13 	bl	8000608 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 80007e2:	2108      	movs	r1, #8
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ff0f 	bl	8000608 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 80007ea:	2101      	movs	r1, #1
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f7ff ff0b 	bl	8000608 <TextLCD_Cmd>

	HAL_Delay(5);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f003 fa68 	bl	8003cc8 <HAL_Delay>

	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 80007f8:	2106      	movs	r1, #6
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff ff04 	bl	8000608 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 8000800:	210c      	movs	r1, #12
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff ff00 	bl	8000608 <TextLCD_Cmd>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <TextLCD_Home>:
	TextLCD_Cmd(lcd, cmd);
}

// void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
void TextLCD_Home(TextLCDType *lcd)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	TextLCD_Cmd(lcd, 0x02);
 8000818:	2102      	movs	r1, #2
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fef4 	bl	8000608 <TextLCD_Cmd>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <TextLCD_Position>:
{
	TextLCD_Cmd(lcd, 0x01);
}

void TextLCD_Position(TextLCDType *lcd, int x, int y)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	019b      	lsls	r3, r3, #6
 800083e:	b2da      	uxtb	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4413      	add	r3, r2
 8000846:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	7dbb      	ldrb	r3, [r7, #22]
 800084c:	4313      	orrs	r3, r2
 800084e:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	4619      	mov	r1, r3
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f7ff fed7 	bl	8000608 <TextLCD_Cmd>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <TextLCD_Putchar>:
	}
}


void TextLCD_Putchar(TextLCDType *lcd, uint8_t ascii_char)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	70fb      	strb	r3, [r7, #3]
	TextLCD_Data(lcd, ascii_char);
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	4619      	mov	r1, r3
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff10 	bl	8000698 <TextLCD_Data>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <TextLCD_Puts>:

void TextLCD_Puts(TextLCDType *lcd, char *string)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	int i = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
	while (string[i])
 800088e:	e00a      	b.n	80008a6 <TextLCD_Puts+0x26>
	{
		TextLCD_Putchar(lcd, string[i]);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffe1 	bl	8000862 <TextLCD_Putchar>
		i++;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
	while (string[i])
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1ee      	bne.n	8000890 <TextLCD_Puts+0x10>
	}
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80008c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008cc:	f023 0218 	bic.w	r2, r3, #24
 80008d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090c:	68fb      	ldr	r3, [r7, #12]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <setRGB>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setRGB(uint8_t r, uint8_t g, uint8_t b){ // 3.2.1/2
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	717b      	strb	r3, [r7, #5]

	r = r ? GPIO_PIN_SET : GPIO_PIN_RESET; // ternary
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	71fb      	strb	r3, [r7, #7]
	g = g ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	71bb      	strb	r3, [r7, #6]
	b = b ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, r);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	461a      	mov	r2, r3
 800098c:	2104      	movs	r1, #4
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <setRGB+0x6c>)
 8000990:	f004 ffaa 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, g);
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	461a      	mov	r2, r3
 8000998:	2108      	movs	r1, #8
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <setRGB+0x6c>)
 800099c:	f004 ffa4 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, b);
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	461a      	mov	r2, r3
 80009a4:	2101      	movs	r1, #1
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f004 ff9d 	bl	80058e8 <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	48000800 	.word	0x48000800

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	b09a      	sub	sp, #104	; 0x68
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f003 f935 	bl	8003c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f8b3 	bl	8000b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f001 f86a 	bl	8001aa4 <vTraceEnable>
  chn0 = xTraceRegisterString("chn0");
 80009d0:	4844      	ldr	r0, [pc, #272]	; (8000ae4 <main+0x128>)
 80009d2:	f001 fdd7 	bl	8002584 <xTraceRegisterString>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <main+0x12c>)
 80009dc:	801a      	strh	r2, [r3, #0]
  adc_ch = xTraceRegisterString("ADC:"); // 3.1.5
 80009de:	4843      	ldr	r0, [pc, #268]	; (8000aec <main+0x130>)
 80009e0:	f001 fdd0 	bl	8002584 <xTraceRegisterString>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <main+0x134>)
 80009ea:	801a      	strh	r2, [r3, #0]
  vTracePrintF(chn0, "I am tracing channel %d", 0);
 80009ec:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <main+0x12c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4940      	ldr	r1, [pc, #256]	; (8000af4 <main+0x138>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fcd9 	bl	80023ac <vTracePrintF>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 faaf 	bl	8000f5c <MX_GPIO_Init>
  MX_DMA_Init();
 80009fe:	f000 fa9b 	bl	8000f38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a02:	f000 fa23 	bl	8000e4c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000a06:	f000 fa6f 	bl	8000ee8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000a0a:	f000 f93d 	bl	8000c88 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a0e:	f000 f99f 	bl	8000d50 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000a12:	f000 f9dd 	bl	8000dd0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 8000a16:	224e      	movs	r2, #78	; 0x4e
 8000a18:	4937      	ldr	r1, [pc, #220]	; (8000af8 <main+0x13c>)
 8000a1a:	4838      	ldr	r0, [pc, #224]	; (8000afc <main+0x140>)
 8000a1c:	f7ff fe8a 	bl	8000734 <TextLCD_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  adcMutex = xSemaphoreCreateMutex();
 8000a20:	2001      	movs	r0, #1
 8000a22:	f008 fd21 	bl	8009468 <xQueueCreateMutex>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a35      	ldr	r2, [pc, #212]	; (8000b00 <main+0x144>)
 8000a2a:	6013      	str	r3, [r2, #0]
  strMutex = xSemaphoreCreateMutex();
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f008 fd1b 	bl	8009468 <xQueueCreateMutex>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <main+0x148>)
 8000a36:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <main+0x14c>)
 8000a3a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 fab3 	bl	8008fba <osThreadCreate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <main+0x150>)
 8000a58:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkyTask */
  osThreadDef(blinkyTask, StartBlinkyTask, osPriorityNormal, 0, 128);
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <main+0x154>)
 8000a5c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000a60:	461d      	mov	r5, r3
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	6023      	str	r3, [r4, #0]
  blinkyTaskHandle = osThreadCreate(osThread(blinkyTask), NULL);
 8000a6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 faa2 	bl	8008fba <osThreadCreate>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <main+0x158>)
 8000a7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadADC */
  osThreadDef(ReadADC, StartTaskADC, osPriorityNormal, 0, 128);
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <main+0x15c>)
 8000a7e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000a82:	461d      	mov	r5, r3
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	6023      	str	r3, [r4, #0]
  ReadADCHandle = osThreadCreate(osThread(ReadADC), NULL);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f008 fa91 	bl	8008fba <osThreadCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <main+0x160>)
 8000a9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RGB_Led */
  osThreadDef(RGB_Led, StartTaskRGB, osPriorityNormal, 0, 128);
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <main+0x164>)
 8000aa0:	f107 0418 	add.w	r4, r7, #24
 8000aa4:	461d      	mov	r5, r3
 8000aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	6023      	str	r3, [r4, #0]
  RGB_LedHandle = osThreadCreate(osThread(RGB_Led), NULL);
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 fa80 	bl	8008fba <osThreadCreate>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <main+0x168>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* definition and creation of WriteLCD */
  osThreadDef(WriteLCD, StartTaskWriteLCD, osPriorityLow, 0, 128);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <main+0x16c>)
 8000ac2:	1d3c      	adds	r4, r7, #4
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	6023      	str	r3, [r4, #0]
  WriteLCDHandle = osThreadCreate(osThread(WriteLCD), NULL);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fa71 	bl	8008fba <osThreadCreate>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <main+0x170>)
 8000adc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ade:	f008 fa65 	bl	8008fac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0x126>
 8000ae4:	0800c6d0 	.word	0x0800c6d0
 8000ae8:	2000294e 	.word	0x2000294e
 8000aec:	0800c6d8 	.word	0x0800c6d8
 8000af0:	2000294c 	.word	0x2000294c
 8000af4:	0800c6e0 	.word	0x0800c6e0
 8000af8:	200029e4 	.word	0x200029e4
 8000afc:	2000295c 	.word	0x2000295c
 8000b00:	20002950 	.word	0x20002950
 8000b04:	20002b94 	.word	0x20002b94
 8000b08:	0800c6f8 	.word	0x0800c6f8
 8000b0c:	20002958 	.word	0x20002958
 8000b10:	0800c70c 	.word	0x0800c70c
 8000b14:	20002b98 	.word	0x20002b98
 8000b18:	0800c720 	.word	0x0800c720
 8000b1c:	20002b8c 	.word	0x20002b8c
 8000b20:	0800c734 	.word	0x0800c734
 8000b24:	20002a30 	.word	0x20002a30
 8000b28:	0800c748 	.word	0x0800c748
 8000b2c:	200029dc 	.word	0x200029dc

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0ae      	sub	sp, #184	; 0xb8
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b3a:	2248      	movs	r2, #72	; 0x48
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00b f8fe 	bl	800bd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2250      	movs	r2, #80	; 0x50
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00b f8ee 	bl	800bd40 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b72:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b88:	f005 fb7e 	bl	8006288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff fe95 	bl	80008bc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <SystemClock_Config+0x154>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b9a:	4a3a      	ldr	r2, [pc, #232]	; (8000c84 <SystemClock_Config+0x154>)
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <SystemClock_Config+0x154>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000bae:	2327      	movs	r3, #39	; 0x27
 8000bb0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bd4:	2360      	movs	r3, #96	; 0x60
 8000bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 feef 	bl	80069c8 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bf0:	f000 fbd2 	bl	8001398 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000bf4:	236f      	movs	r3, #111	; 0x6f
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 fa62 	bl	80070e0 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000c22:	f000 fbb9 	bl	8001398 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000c26:	f242 5305 	movw	r3, #9477	; 0x2505
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c2c:	2318      	movs	r3, #24
 8000c2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c3a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c3c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c40:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000c42:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000c46:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c5c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f006 febb 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000c74:	f000 fb90 	bl	8001398 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c78:	f007 f82a 	bl	8007cd0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c7c:	bf00      	nop
 8000c7e:	37b8      	adds	r7, #184	; 0xb8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58000400 	.word	0x58000400

08000c88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000d00:	f003 fa1c 	bl	800413c <HAL_ADC_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d0a:	f000 fb45 	bl	8001398 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_ADC1_Init+0xc4>)
 8000d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d12:	2306      	movs	r3, #6
 8000d14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	237f      	movs	r3, #127	; 0x7f
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0xbc>)
 8000d2c:	f003 fc74 	bl	8004618 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d36:	f000 fb2f 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20002a98 	.word	0x20002a98
 8000d48:	50040000 	.word	0x50040000
 8000d4c:	04300002 	.word	0x04300002

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f004 fdde 	bl	800594c <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 faff 	bl	8001398 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f005 f8cd 	bl	8005f3c <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 faf6 	bl	8001398 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f005 f90f 	bl	8005fd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 faed 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200029e4 	.word	0x200029e4
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	00707cbb 	.word	0x00707cbb

08000dd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_SPI2_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000de4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000dec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000df0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_SPI2_Init+0x74>)
 8000e32:	f007 f864 	bl	8007efe <HAL_SPI_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000e3c:	f000 faac 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20002964 	.word	0x20002964
 8000e48:	40003800 	.word	0x40003800

08000e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <MX_USART1_UART_Init+0x98>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e64:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e74:	220c      	movs	r2, #12
 8000e76:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000e98:	f007 fb6e 	bl	8008578 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000ea2:	f000 fa79 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000eaa:	f007 ff61 	bl	8008d70 <HAL_UARTEx_SetTxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000eb4:	f000 fa70 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000ebc:	f007 ff96 	bl	8008dec <HAL_UARTEx_SetRxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000ec6:	f000 fa67 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART1_UART_Init+0x94>)
 8000ecc:	f007 ff17 	bl	8008cfe <HAL_UARTEx_DisableFifoMode>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000ed6:	f000 fa5f 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20002afc 	.word	0x20002afc
 8000ee4:	40013800 	.word	0x40013800

08000ee8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <MX_USB_PCD_Init+0x4c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_USB_PCD_Init+0x48>)
 8000f1e:	f005 f8a4 	bl	800606a <HAL_PCD_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f28:	f000 fa36 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20002b9c 	.word	0x20002b9c
 8000f34:	40006800 	.word	0x40006800

08000f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f7ff fcd3 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff fcd0 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2105      	movs	r1, #5
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f004 f977 	bl	8005240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f52:	200b      	movs	r0, #11
 8000f54:	f004 f98e 	bl	8005274 <HAL_NVIC_EnableIRQ>

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f70:	2004      	movs	r0, #4
 8000f72:	f7ff fcd2 	bl	800091a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff fccf 	bl	800091a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff fccc 	bl	800091a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	2008      	movs	r0, #8
 8000f84:	f7ff fcc9 	bl	800091a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	4827      	ldr	r0, [pc, #156]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f8e:	f004 fcab 	bl	80058e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f004 fca5 	bl	80058e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2123      	movs	r1, #35	; 0x23
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <MX_GPIO_Init+0xd4>)
 8000fa4:	f004 fca0 	bl	80058e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481b      	ldr	r0, [pc, #108]	; (800102c <MX_GPIO_Init+0xd0>)
 8000fbe:	f004 fb23 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f004 fb15 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <MX_GPIO_Init+0xd0>)
 8000ff0:	f004 fb0a 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ff4:	2323      	movs	r3, #35	; 0x23
 8000ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_GPIO_Init+0xd4>)
 800100a:	f004 fafd 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800100e:	2303      	movs	r3, #3
 8001010:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xd8>)
 8001020:	f004 faf2 	bl	8005608 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	48000800 	.word	0x48000800
 8001030:	48000400 	.word	0x48000400
 8001034:	48000c00 	.word	0x48000c00

08001038 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	TickType_t default_start;
	TickType_t default_stop;
  /* Infinite loop */
  for(;;)
  {
	  default_start = xTaskGetTickCount();
 8001040:	f009 fba0 	bl	800a784 <xTaskGetTickCount>
 8001044:	60f8      	str	r0, [r7, #12]
	  osDelay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f007 ffde 	bl	8009008 <osDelay>
	  default_stop = xTaskGetTickCount();
 800104c:	f009 fb9a 	bl	800a784 <xTaskGetTickCount>
 8001050:	60b8      	str	r0, [r7, #8]
	  default_diff = default_stop - default_start;
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	4a01      	ldr	r2, [pc, #4]	; (8001060 <StartDefaultTask+0x28>)
 800105a:	6013      	str	r3, [r2, #0]
	  default_start = xTaskGetTickCount();
 800105c:	e7f0      	b.n	8001040 <StartDefaultTask+0x8>
 800105e:	bf00      	nop
 8001060:	20002e90 	.word	0x20002e90

08001064 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void const * argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
//				 // Simply toggle the LED every 500ms, blocking between each toggle.
//				 vToggleLED();
//				 vTaskDelay( xDelay );
//			 }
//		 }
		blink_start = xTaskGetTickCount();
 800106c:	f009 fb8a 	bl	800a784 <xTaskGetTickCount>
 8001070:	60f8      	str	r0, [r7, #12]
		vTaskDelay(500);
 8001072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001076:	f009 f9e5 	bl	800a444 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800107a:	2101      	movs	r1, #1
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <StartBlinkyTask+0x30>)
 800107e:	f004 fc4b 	bl	8005918 <HAL_GPIO_TogglePin>
		blink_stop = xTaskGetTickCount();
 8001082:	f009 fb7f 	bl	800a784 <xTaskGetTickCount>
 8001086:	60b8      	str	r0, [r7, #8]
		blink_diff = blink_stop - blink_start;
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a02      	ldr	r2, [pc, #8]	; (8001098 <StartBlinkyTask+0x34>)
 8001090:	6013      	str	r3, [r2, #0]
		blink_start = xTaskGetTickCount();
 8001092:	e7eb      	b.n	800106c <StartBlinkyTask+0x8>
 8001094:	48000400 	.word	0x48000400
 8001098:	200029c8 	.word	0x200029c8

0800109c <StartTaskADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void const * argument) // 3.1.4
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	TickType_t adc_start;
	TickType_t adc_stop;
  /* Infinite loop */
  for(;;)
  {
	  adc_start = xTaskGetTickCount();
 80010a4:	f009 fb6e 	bl	800a784 <xTaskGetTickCount>
 80010a8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  HAL_ADC_Start(&hadc1);
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <StartTaskADC+0xb8>)
 80010ac:	f003 f992 	bl	80043d4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80010b0:	2164      	movs	r1, #100	; 0x64
 80010b2:	4828      	ldr	r0, [pc, #160]	; (8001154 <StartTaskADC+0xb8>)
 80010b4:	f003 fa15 	bl	80044e2 <HAL_ADC_PollForConversion>
	  if( xSemaphoreTake( adcMutex, ( TickType_t ) 10 ) == pdTRUE ) // Thread safety. 3.3
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <StartTaskADC+0xbc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	210a      	movs	r1, #10
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 fbf8 	bl	80098b4 <xQueueSemaphoreTake>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10d      	bne.n	80010e6 <StartTaskADC+0x4a>
	  {
		  ADC_Data = HAL_ADC_GetValue(&hadc1); // Write data to the buffer.
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <StartTaskADC+0xb8>)
 80010cc:	f003 fa96 	bl	80045fc <HAL_ADC_GetValue>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <StartTaskADC+0xc0>)
 80010d6:	801a      	strh	r2, [r3, #0]
	      xSemaphoreGive( adcMutex );
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <StartTaskADC+0xbc>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	f008 f9d9 	bl	8009498 <xQueueGenericSend>
	  }
	  HAL_ADC_Stop(&hadc1);
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <StartTaskADC+0xb8>)
 80010e8:	f003 f9c8 	bl	800447c <HAL_ADC_Stop>

	  char adc_str[30];
	  sprintf(adc_str, "ADC Value: % 4d", ADC_Data);
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <StartTaskADC+0xc0>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	491a      	ldr	r1, [pc, #104]	; (8001160 <StartTaskADC+0xc4>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a fefd 	bl	800bef8 <siprintf>

	  if( xSemaphoreTake( strMutex, ( TickType_t ) 10 ) == pdTRUE ) // Thread safety. 3.3
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <StartTaskADC+0xc8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	210a      	movs	r1, #10
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fbd5 	bl	80098b4 <xQueueSemaphoreTake>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10d      	bne.n	800112c <StartTaskADC+0x90>
	  {
		  sprintf(g_str_btm, "%04d           ", ADC_Data);
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <StartTaskADC+0xc0>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4914      	ldr	r1, [pc, #80]	; (8001168 <StartTaskADC+0xcc>)
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <StartTaskADC+0xd0>)
 800111a:	f00a feed 	bl	800bef8 <siprintf>
		  xSemaphoreGive( strMutex );
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <StartTaskADC+0xc8>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	f008 f9b6 	bl	8009498 <xQueueGenericSend>
	  }

	  vTracePrintF(adc_ch, adc_str, 0); // Tracing purposes. 3.1.6
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <StartTaskADC+0xd4>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f107 0108 	add.w	r1, r7, #8
 8001134:	2200      	movs	r2, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f938 	bl	80023ac <vTracePrintF>
	  vTaskDelay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f009 f981 	bl	800a444 <vTaskDelay>
	  adc_stop = xTaskGetTickCount();
 8001142:	f009 fb1f 	bl	800a784 <xTaskGetTickCount>
 8001146:	62b8      	str	r0, [r7, #40]	; 0x28
	  adc_diff = adc_stop - adc_start;
 8001148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <StartTaskADC+0xd8>)
 8001150:	6013      	str	r3, [r2, #0]
  {
 8001152:	e7a7      	b.n	80010a4 <StartTaskADC+0x8>
 8001154:	20002a98 	.word	0x20002a98
 8001158:	20002950 	.word	0x20002950
 800115c:	20002e94 	.word	0x20002e94
 8001160:	0800c75c 	.word	0x0800c75c
 8001164:	20002b94 	.word	0x20002b94
 8001168:	0800c76c 	.word	0x0800c76c
 800116c:	200029cc 	.word	0x200029cc
 8001170:	2000294c 	.word	0x2000294c
 8001174:	200029e0 	.word	0x200029e0

08001178 <StartTaskRGB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRGB */
void StartTaskRGB(void const * argument) // 3.2. Working as intended:)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRGB */
	TickType_t wakeup_time;
	const TickType_t periodTime = 150;
 8001180:	2396      	movs	r3, #150	; 0x96
 8001182:	61bb      	str	r3, [r7, #24]
	TickType_t last_red_tick = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t last_blue_tick = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]

	TickType_t rgb_start;
	TickType_t rgb_stop;

	wakeup_time = xTaskGetTickCount();
 800118c:	f009 fafa 	bl	800a784 <xTaskGetTickCount>
 8001190:	4603      	mov	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  rgb_start = xTaskGetTickCount();
 8001194:	f009 faf6 	bl	800a784 <xTaskGetTickCount>
 8001198:	6178      	str	r0, [r7, #20]
	  uint16_t ADC_DataLocal; // Local copy of the global ADC value.
	  if( xSemaphoreTake( adcMutex, ( TickType_t ) 10 ) == pdTRUE ) // Thread safety, 3.3
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <StartTaskRGB+0x12c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	210a      	movs	r1, #10
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 fb87 	bl	80098b4 <xQueueSemaphoreTake>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d109      	bne.n	80011c0 <StartTaskRGB+0x48>
	  {
		  ADC_DataLocal = ADC_Data; // Local copy of the global ADC value.
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <StartTaskRGB+0x130>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	83fb      	strh	r3, [r7, #30]
		  xSemaphoreGive( adcMutex );
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <StartTaskRGB+0x12c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	f008 f96c 	bl	8009498 <xQueueGenericSend>
	  }
	  // Naive first pass, just set the color states as per 3.2.5:
	  if(ADC_DataLocal > 3000)
 80011c0:	8bfb      	ldrh	r3, [r7, #30]
 80011c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d90b      	bls.n	80011e2 <StartTaskRGB+0x6a>
	  {
		  state = RED; // Set color. 3.2.5
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <StartTaskRGB+0x134>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]

		  last_red_tick = wakeup_time + 1400; // wakeup_time is reset after every iteration of the loop.
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
		  last_blue_tick = last_red_tick + 600; // Basically wakeup_time + 2k.
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	e012      	b.n	8001208 <StartTaskRGB+0x90>
	  }
	  else if(ADC_DataLocal > 2000)
 80011e2:	8bfb      	ldrh	r3, [r7, #30]
 80011e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011e8:	d903      	bls.n	80011f2 <StartTaskRGB+0x7a>
	  {
		  state = YELLOW;
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <StartTaskRGB+0x134>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e00a      	b.n	8001208 <StartTaskRGB+0x90>
	  }
	  else if(ADC_DataLocal > 1000)
 80011f2:	8bfb      	ldrh	r3, [r7, #30]
 80011f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f8:	d903      	bls.n	8001202 <StartTaskRGB+0x8a>
	  {
		  state = GREEN;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <StartTaskRGB+0x134>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e002      	b.n	8001208 <StartTaskRGB+0x90>
	  }
	  else
	  {
		  state = OFF;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <StartTaskRGB+0x134>)
 8001204:	2204      	movs	r2, #4
 8001206:	701a      	strb	r2, [r3, #0]
	  }
	  // Check if the timing has changed, is it time to delay the color state changes.
	  if(last_blue_tick > wakeup_time)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a3a      	ldr	r2, [r7, #32]
 800120c:	429a      	cmp	r2, r3
 800120e:	d909      	bls.n	8001224 <StartTaskRGB+0xac>
	  {
		  state = BLUE;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <StartTaskRGB+0x134>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
		  if(last_red_tick > wakeup_time)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800121a:	429a      	cmp	r2, r3
 800121c:	d902      	bls.n	8001224 <StartTaskRGB+0xac>
		  {
			  state = RED;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <StartTaskRGB+0x134>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  switch (state)
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <StartTaskRGB+0x134>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d82b      	bhi.n	8001284 <StartTaskRGB+0x10c>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <StartTaskRGB+0xbc>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001249 	.word	0x08001249
 8001238:	08001255 	.word	0x08001255
 800123c:	08001261 	.word	0x08001261
 8001240:	0800126d 	.word	0x0800126d
 8001244:	08001279 	.word	0x08001279
	  {
	  case RED :
		  setRGB(1, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fb7d 	bl	800094c <setRGB>
		  break;
 8001252:	e017      	b.n	8001284 <StartTaskRGB+0x10c>
	  case BLUE :
		  setRGB(0, 0, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	2100      	movs	r1, #0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fb77 	bl	800094c <setRGB>
		  break;
 800125e:	e011      	b.n	8001284 <StartTaskRGB+0x10c>
	  case YELLOW :
		  setRGB(1, 1, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fb71 	bl	800094c <setRGB>
		  break;
 800126a:	e00b      	b.n	8001284 <StartTaskRGB+0x10c>
	  case GREEN :
		  setRGB(0, 1, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2101      	movs	r1, #1
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fb6b 	bl	800094c <setRGB>
		  break;
 8001276:	e005      	b.n	8001284 <StartTaskRGB+0x10c>
	  case OFF :
		  setRGB(0, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fb65 	bl	800094c <setRGB>
		  break;
 8001282:	bf00      	nop
	  }

	  vTaskDelayUntil(&wakeup_time, periodTime); // Set period to 150 ticks.
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	4618      	mov	r0, r3
 800128c:	f009 f824 	bl	800a2d8 <vTaskDelayUntil>
	  rgb_stop = xTaskGetTickCount();
 8001290:	f009 fa78 	bl	800a784 <xTaskGetTickCount>
 8001294:	6138      	str	r0, [r7, #16]
	  rgb_diff = rgb_stop - rgb_start;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <StartTaskRGB+0x138>)
 800129e:	6013      	str	r3, [r2, #0]
  {
 80012a0:	e778      	b.n	8001194 <StartTaskRGB+0x1c>
 80012a2:	bf00      	nop
 80012a4:	20002950 	.word	0x20002950
 80012a8:	20002e94 	.word	0x20002e94
 80012ac:	20002a94 	.word	0x20002a94
 80012b0:	20002b90 	.word	0x20002b90

080012b4 <StartTaskWriteLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskWriteLCD */
void StartTaskWriteLCD(void const * argument) // OK.
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b097      	sub	sp, #92	; 0x5c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskWriteLCD */

	TickType_t LCD_wakeup_time;
	const TickType_t periodTime = 700;
 80012bc:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80012c0:	657b      	str	r3, [r7, #84]	; 0x54

	TickType_t lcd_start;
	TickType_t lcd_stop;

	char hello[16] = "Hello           ";
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <StartTaskWriteLCD+0xb0>)
 80012c4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char world[16] = "Word!           ";
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <StartTaskWriteLCD+0xb4>)
 80012d0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char str_top[16];
	char str_btm[16];

	LCD_wakeup_time = xTaskGetTickCount();
 80012da:	f009 fa53 	bl	800a784 <xTaskGetTickCount>
 80012de:	4603      	mov	r3, r0
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Infinite loop */
  for(;;)
  {
	  lcd_start = xTaskGetTickCount();
 80012e2:	f009 fa4f 	bl	800a784 <xTaskGetTickCount>
 80012e6:	6538      	str	r0, [r7, #80]	; 0x50
//			  str_btm[i] = g_str_btm[i];
//		  }
//		  xSemaphoreGive( strMutex );
//	  }

	  TextLCD_Home(&lcd);
 80012e8:	4820      	ldr	r0, [pc, #128]	; (800136c <StartTaskWriteLCD+0xb8>)
 80012ea:	f7ff fa91 	bl	8000810 <TextLCD_Home>
	  TextLCD_Puts(&lcd, hello); //str_top);
 80012ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f2:	4619      	mov	r1, r3
 80012f4:	481d      	ldr	r0, [pc, #116]	; (800136c <StartTaskWriteLCD+0xb8>)
 80012f6:	f7ff fac3 	bl	8000880 <TextLCD_Puts>
	  TextLCD_Position(&lcd, 0, 1); // Second row, first character.
 80012fa:	2201      	movs	r2, #1
 80012fc:	2100      	movs	r1, #0
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <StartTaskWriteLCD+0xb8>)
 8001300:	f7ff fa92 	bl	8000828 <TextLCD_Position>
	  TextLCD_Puts(&lcd, world); //str_btm);
 8001304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <StartTaskWriteLCD+0xb8>)
 800130c:	f7ff fab8 	bl	8000880 <TextLCD_Puts>

	  vTaskDelayUntil(&LCD_wakeup_time, periodTime); // Swap string every 700 ticks.
 8001310:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001316:	4618      	mov	r0, r3
 8001318:	f008 ffde 	bl	800a2d8 <vTaskDelayUntil>

	  TextLCD_Home(&lcd);
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <StartTaskWriteLCD+0xb8>)
 800131e:	f7ff fa77 	bl	8000810 <TextLCD_Home>
	  TextLCD_Puts(&lcd, world); //str_btm);
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <StartTaskWriteLCD+0xb8>)
 800132a:	f7ff faa9 	bl	8000880 <TextLCD_Puts>
	  TextLCD_Position(&lcd, 0, 1); // Second row, first character.
 800132e:	2201      	movs	r2, #1
 8001330:	2100      	movs	r1, #0
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <StartTaskWriteLCD+0xb8>)
 8001334:	f7ff fa78 	bl	8000828 <TextLCD_Position>
	  TextLCD_Puts(&lcd, hello); //str_top);
 8001338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <StartTaskWriteLCD+0xb8>)
 8001340:	f7ff fa9e 	bl	8000880 <TextLCD_Puts>

	  vTaskDelayUntil(&LCD_wakeup_time, periodTime); // Swap string every 700 ticks.
 8001344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800134a:	4618      	mov	r0, r3
 800134c:	f008 ffc4 	bl	800a2d8 <vTaskDelayUntil>
	  lcd_stop = xTaskGetTickCount();
 8001350:	f009 fa18 	bl	800a784 <xTaskGetTickCount>
 8001354:	64f8      	str	r0, [r7, #76]	; 0x4c
	  lcd_diff = lcd_stop - lcd_start;
 8001356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <StartTaskWriteLCD+0xbc>)
 800135e:	6013      	str	r3, [r2, #0]
	  lcd_start = xTaskGetTickCount();
 8001360:	e7bf      	b.n	80012e2 <StartTaskWriteLCD+0x2e>
 8001362:	bf00      	nop
 8001364:	0800c77c 	.word	0x0800c77c
 8001368:	0800c78c 	.word	0x0800c78c
 800136c:	2000295c 	.word	0x2000295c
 8001370:	20002954 	.word	0x20002954

08001374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001386:	f002 fc73 	bl	8003c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>

080013a2 <LL_AHB2_GRP1_EnableClock>:
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	210f      	movs	r1, #15
 8001440:	f06f 0001 	mvn.w	r0, #1
 8001444:	f003 fefc 	bl	8005240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_ADC_MspInit+0x50>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d112      	bne.n	8001494 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800146e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001472:	f7ff ff96 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2004      	movs	r0, #4
 8001478:	f7ff ff93 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001480:	2303      	movs	r3, #3
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4619      	mov	r1, r3
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <HAL_ADC_MspInit+0x54>)
 8001490:	f004 f8ba 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	50040000 	.word	0x50040000
 80014a0:	48000800 	.word	0x48000800

080014a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_I2C_MspInit+0x5c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d117      	bne.n	80014f6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7ff ff6b 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <HAL_I2C_MspInit+0x60>)
 80014ea:	f004 f88d 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014f2:	f7ff ff6f 	bl	80013d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40005400 	.word	0x40005400
 8001504:	48000400 	.word	0x48000400

08001508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <HAL_SPI_MspInit+0xd4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d154      	bne.n	80015d4 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800152e:	f7ff ff51 	bl	80013d4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2004      	movs	r0, #4
 8001534:	f7ff ff35 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff ff32 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800153e:	2302      	movs	r3, #2
 8001540:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800154e:	2303      	movs	r3, #3
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	4821      	ldr	r0, [pc, #132]	; (80015e0 <HAL_SPI_MspInit+0xd8>)
 800155a:	f004 f855 	bl	8005608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800155e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001570:	2305      	movs	r3, #5
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f004 f843 	bl	8005608 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_SPI_MspInit+0xe0>)
 8001586:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 800158a:	2208      	movs	r2, #8
 800158c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015ae:	2220      	movs	r2, #32
 80015b0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015ba:	f003 fe69 	bl	8005290 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80015c4:	f7ff fee8 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_SPI_MspInit+0xdc>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40003800 	.word	0x40003800
 80015e0:	48000800 	.word	0x48000800
 80015e4:	20002a34 	.word	0x20002a34
 80015e8:	40020008 	.word	0x40020008

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x58>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d116      	bne.n	800163c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001612:	f7ff fef8 	bl	8001406 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff fec3 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800161c:	23c0      	movs	r3, #192	; 0xc0
 800161e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800162c:	2307      	movs	r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <HAL_UART_MspInit+0x5c>)
 8001638:	f003 ffe6 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013800 	.word	0x40013800
 8001648:	48000400 	.word	0x48000400

0800164c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_PCD_MspInit+0x5c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d118      	bne.n	80016a0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fe97 	bl	80013a2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001674:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001678:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001686:	230a      	movs	r3, #10
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f003 ffb8 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001698:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800169c:	f7ff fe9a 	bl	80013d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40006800 	.word	0x40006800

080016ac <LL_APB2_GRP1_EnableClock>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	2019      	movs	r0, #25
 80016f6:	f003 fda3 	bl	8005240 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016fa:	2019      	movs	r0, #25
 80016fc:	f003 fdba 	bl	8005274 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001700:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001704:	f7ff ffd2 	bl	80016ac <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 0208 	add.w	r2, r7, #8
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fed0 	bl	80074b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001718:	f005 feb8 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 800171c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_InitTick+0x8c>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_InitTick+0x90>)
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_InitTick+0x94>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_InitTick+0x90>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_InitTick+0x90>)
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_InitTick+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_InitTick+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <HAL_InitTick+0x90>)
 800174e:	f006 fc79 	bl	8008044 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_InitTick+0x90>)
 800175a:	f006 fcd5 	bl	8008108 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	431bde83 	.word	0x431bde83
 8001770:	20002e98 	.word	0x20002e98
 8001774:	40012c00 	.word	0x40012c00

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel1_IRQHandler+0x10>)
 80017aa:	f003 fe19 	bl	80053e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20002a34 	.word	0x20002a34

080017b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017be:	f006 fcf1 	bl	80081a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20002e98 	.word	0x20002e98

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f00a fa66 	bl	800bccc <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20030000 	.word	0x20030000
 800182c:	00000400 	.word	0x00000400
 8001830:	200000a0 	.word	0x200000a0
 8001834:	2000b600 	.word	0x2000b600

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <SystemInit+0x98>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <SystemInit+0x98>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001864:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <SystemInit+0x9c>)
 8001872:	4013      	ands	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001882:	f023 0305 	bic.w	r3, r3, #5
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <SystemInit+0xa0>)
 80018a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <SystemInit+0xa0>)
 80018ac:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00
 80018d4:	faf6fefb 	.word	0xfaf6fefb
 80018d8:	22041000 	.word	0x22041000

080018dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e0:	3304      	adds	r3, #4

080018e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018e6:	d3f9      	bcc.n	80018dc <CopyDataInit>
  bx lr
 80018e8:	4770      	bx	lr

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018ec:	3004      	adds	r0, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>
  bx lr
 80018f2:	4770      	bx	lr

080018f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018f8:	f7ff ff9e 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <LoopForever+0x8>)
 80018fe:	490c      	ldr	r1, [pc, #48]	; (8001930 <LoopForever+0xc>)
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <LoopForever+0x10>)
 8001902:	2300      	movs	r3, #0
 8001904:	f7ff ffed 	bl	80018e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopForever+0x14>)
 800190a:	490c      	ldr	r1, [pc, #48]	; (800193c <LoopForever+0x18>)
 800190c:	2300      	movs	r3, #0
 800190e:	f7ff ffee 	bl	80018ee <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <LoopForever+0x1c>)
 8001914:	490b      	ldr	r1, [pc, #44]	; (8001944 <LoopForever+0x20>)
 8001916:	2300      	movs	r3, #0
 8001918:	f7ff ffe9 	bl	80018ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800191c:	f00a f9dc 	bl	800bcd8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001920:	f7ff f84c 	bl	80009bc <main>

08001924 <LoopForever>:

LoopForever:
  b LoopForever
 8001924:	e7fe      	b.n	8001924 <LoopForever>
 8001926:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001928:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800192c:	20000004 	.word	0x20000004
 8001930:	20000084 	.word	0x20000084
 8001934:	0800dd54 	.word	0x0800dd54
  INIT_BSS _sbss, _ebss
 8001938:	20000084 	.word	0x20000084
 800193c:	2000b600 	.word	0x2000b600
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001940:	20030000 	.word	0x20030000
 8001944:	20030000 	.word	0x20030000

08001948 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_IRQHandler>

0800194a <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f008 f9de 	bl	8009d14 <uxQueueGetQueueNumber>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f008 f9ec 	bl	8009d48 <ucQueueGetQueueType>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f009 f99c 	bl	800acc0 <uxTaskGetTaskNumber>
 8001988:	4603      	mov	r3, r0
 800198a:	b29b      	uxth	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f009 f98f 	bl	800acc0 <uxTaskGetTaskNumber>
 80019a2:	4603      	mov	r3, r0
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	b29b      	uxth	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f009 f97f 	bl	800acc0 <uxTaskGetTaskNumber>
 80019c2:	4603      	mov	r3, r0
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	887a      	ldrh	r2, [r7, #2]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 f98c 	bl	800acec <vTaskSetTaskNumber>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f009 f969 	bl	800acc0 <uxTaskGetTaskNumber>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	4313      	orrs	r3, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f009 f976 	bl	800acec <vTaskSetTaskNumber>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff9a 	bl	800194a <prvTraceGetQueueNumber>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29b      	uxth	r3, r3
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff8d 	bl	800194a <prvTraceGetQueueNumber>
 8001a30:	4603      	mov	r3, r0
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b29b      	uxth	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff7d 	bl	800194a <prvTraceGetQueueNumber>
 8001a50:	4603      	mov	r3, r0
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f008 f965 	bl	8009d2c <vQueueSetQueueNumber>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff67 	bl	800194a <prvTraceGetQueueNumber>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	4313      	orrs	r3, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f008 f94f 	bl	8009d2c <vQueueSetQueueNumber>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8001a9a:	f009 f9f7 	bl	800ae8c <xTaskGetCurrentTaskHandle>
 8001a9e:	4603      	mov	r3, r0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 8001aac:	f000 fd8e 	bl	80025cc <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d104      	bne.n	8001ac0 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 8001ab6:	f000 fa49 	bl	8001f4c <prvTraceInitTimestamps>
		
		vTraceStart();
 8001aba:	f000 fa29 	bl	8001f10 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 8001abe:	e00c      	b.n	8001ada <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d103      	bne.n	8001ace <vTraceEnable+0x2a>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <vTraceEnable+0x40>)
 8001ac8:	f001 fcf0 	bl	80034ac <prvTraceError>
}
 8001acc:	e005      	b.n	8001ada <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <vTraceEnable+0x44>)
 8001ad6:	f001 fce9 	bl	80034ac <prvTraceError>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800c79c 	.word	0x0800c79c
 8001ae8:	0800c7dc 	.word	0x0800c7dc

08001aec <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8001af0:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2209      	movs	r2, #9
 8001af6:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8001af8:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	220a      	movs	r2, #10
 8001afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	220a      	movs	r2, #10
 8001b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8001b0c:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8001b20:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8001b2a:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2205      	movs	r2, #5
 8001b30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2205      	movs	r2, #5
 8001b44:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8001b48:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	220f      	movs	r2, #15
 8001b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001b5c:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	220f      	movs	r2, #15
 8001b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	220f      	movs	r2, #15
 8001b76:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8001b7a:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	220f      	movs	r2, #15
 8001b80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	220f      	movs	r2, #15
 8001b8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	220f      	movs	r2, #15
 8001b94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2213      	movs	r2, #19
 8001bd0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2211      	movs	r2, #17
 8001bda:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2210      	movs	r2, #16
 8001be4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2213      	movs	r2, #19
 8001bee:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2213      	movs	r2, #19
 8001bf8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2213      	movs	r2, #19
 8001c02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	22a0      	movs	r2, #160	; 0xa0
 8001c16:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c22:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c2e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001c3a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f240 3252 	movw	r2, #850	; 0x352
 8001c46:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f240 32a2 	movw	r2, #930	; 0x3a2
 8001c52:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f240 4201 	movw	r2, #1025	; 0x401
 8001c5e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001c6a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <vTraceInitObjectPropertyTable+0x198>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20002ee8 	.word	0x20002ee8

08001c88 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	825a      	strh	r2, [r3, #18]
 8001c98:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001c9a:	8a5a      	ldrh	r2, [r3, #18]
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001c9e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001ca0:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	829a      	strh	r2, [r3, #20]
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ca8:	8a9a      	ldrh	r2, [r3, #20]
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cac:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cb0:	2214      	movs	r2, #20
 8001cb2:	82da      	strh	r2, [r3, #22]
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cb6:	8ada      	ldrh	r2, [r3, #22]
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cba:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cbe:	221e      	movs	r2, #30
 8001cc0:	831a      	strh	r2, [r3, #24]
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cc4:	8b1a      	ldrh	r2, [r3, #24]
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cc8:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ccc:	222d      	movs	r2, #45	; 0x2d
 8001cce:	835a      	strh	r2, [r3, #26]
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cd2:	8b5a      	ldrh	r2, [r3, #26]
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cd6:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cda:	2232      	movs	r2, #50	; 0x32
 8001cdc:	839a      	strh	r2, [r3, #28]
 8001cde:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ce0:	8b9a      	ldrh	r2, [r3, #28]
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ce4:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001ce8:	2237      	movs	r2, #55	; 0x37
 8001cea:	83da      	strh	r2, [r3, #30]
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cee:	8bda      	ldrh	r2, [r3, #30]
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cf2:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cf6:	223c      	movs	r2, #60	; 0x3c
 8001cf8:	841a      	strh	r2, [r3, #32]
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001cfc:	8c1a      	ldrh	r2, [r3, #32]
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d00:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d04:	2241      	movs	r2, #65	; 0x41
 8001d06:	845a      	strh	r2, [r3, #34]	; 0x22
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d0a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d0e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d12:	2209      	movs	r2, #9
 8001d14:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d18:	2213      	movs	r2, #19
 8001d1a:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d1e:	221d      	movs	r2, #29
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d24:	222c      	movs	r2, #44	; 0x2c
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d2a:	2231      	movs	r2, #49	; 0x31
 8001d2c:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d30:	2236      	movs	r2, #54	; 0x36
 8001d32:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d36:	223b      	movs	r2, #59	; 0x3b
 8001d38:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d42:	2245      	movs	r2, #69	; 0x45
 8001d44:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	e009      	b.n	8001d60 <vTraceInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3318      	adds	r3, #24
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d9f2      	bls.n	8001d4c <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e008      	b.n	8001d7e <vTraceInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <vTraceInitObjectHandleStack+0x10c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b45      	cmp	r3, #69	; 0x45
 8001d82:	d9f3      	bls.n	8001d6c <vTraceInitObjectHandleStack+0xe4>
	}
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2000b55c 	.word	0x2000b55c

08001d98 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d827      	bhi.n	8001df8 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	08001de1 	.word	0x08001de1
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001dd9 	.word	0x08001dd9
 8001dc4:	08001de9 	.word	0x08001de9
 8001dc8:	08001ded 	.word	0x08001ded
 8001dcc:	08001df1 	.word	0x08001df1
 8001dd0:	08001df5 	.word	0x08001df5
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001dd6:	e010      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001dda:	e00e      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001dde:	e00c      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001de2:	e00a      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001de6:	e008      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001dea:	e006      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001dee:	e004      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001df2:	e002      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001df6:	e000      	b.n	8001dfa <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0800c810 	.word	0x0800c810
 8001e0c:	0800c858 	.word	0x0800c858
 8001e10:	0800c8a0 	.word	0x0800c8a0
 8001e14:	0800c8f4 	.word	0x0800c8f4
 8001e18:	0800c940 	.word	0x0800c940
 8001e1c:	0800c98c 	.word	0x0800c98c
 8001e20:	0800c9d8 	.word	0x0800c9d8
 8001e24:	0800ca2c 	.word	0x0800ca2c
 8001e28:	0800ca84 	.word	0x0800ca84
 8001e2c:	0800cae0 	.word	0x0800cae0

08001e30 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <uiTraceStart+0xcc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <uiTraceStart+0xcc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <uiTraceStart+0x24>
 8001e4a:	482d      	ldr	r0, [pc, #180]	; (8001f00 <uiTraceStart+0xd0>)
 8001e4c:	f001 fb2e 	bl	80034ac <prvTraceError>
 8001e50:	2300      	movs	r3, #0
 8001e52:	e04e      	b.n	8001ef2 <uiTraceStart+0xc2>
		return 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e04c      	b.n	8001ef2 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <uiTraceStart+0xcc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <uiTraceStart+0x36>
		return 1; /* Already running */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e045      	b.n	8001ef2 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <uiTraceStart+0xd4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d13e      	bne.n	8001eec <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e74:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f383 8810 	msr	PRIMASK, r3
}
 8001e82:	bf00      	nop
 8001e84:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <uiTraceStart+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <uiTraceStart+0xd8>)
 8001e8c:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <uiTraceStart+0xcc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001e96:	f7ff fdfe 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fd6c 	bl	800197a <prvTraceGetTaskNumberLow16>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d110      	bne.n	8001ece <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 f95f 	bl	8003170 <prvTraceGetObjectHandle>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <uiTraceStart+0xdc>)
 8001eba:	4619      	mov	r1, r3
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f001 fa49 	bl	8003354 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 ffb9 	bl	8002e40 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 ff43 	bl	8002d5c <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <uiTraceStart+0xd8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <uiTraceStart+0xd8>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f383 8810 	msr	PRIMASK, r3
}
 8001eea:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <uiTraceStart+0xcc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20002ee8 	.word	0x20002ee8
 8001f00:	0800cb10 	.word	0x0800cb10
 8001f04:	2000b554 	.word	0x2000b554
 8001f08:	200000b8 	.word	0x200000b8
 8001f0c:	0800cb54 	.word	0x0800cb54

08001f10 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8001f14:	f7ff ff8c 	bl	8001e30 <uiTraceStart>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <vTraceStop+0x28>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <vTraceStop+0x28>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <vTraceStop+0x2c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <vTraceStop+0x2c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4798      	blx	r3
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20002ee8 	.word	0x20002ee8
 8001f48:	200000c4 	.word	0x200000c4

08001f4c <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <prvTraceInitTimestamps+0x18>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <prvTraceInitTimestamps+0x1c>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e0001004 	.word	0xe0001004
 8001f68:	2000b558 	.word	0x2000b558

08001f6c <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	70bb      	strb	r3, [r7, #2]
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d104      	bne.n	8001f8c <writeInt8+0x20>
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <writeInt8+0x4c>)
 8001f84:	f001 fa92 	bl	80034ac <prvTraceError>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e011      	b.n	8001fb0 <writeInt8+0x44>

	if (i >= MAX_ARG_SIZE)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b23      	cmp	r3, #35	; 0x23
 8001f90:	d901      	bls.n	8001f96 <writeInt8+0x2a>
	{
		return 255;
 8001f92:	23ff      	movs	r3, #255	; 0xff
 8001f94:	e00c      	b.n	8001fb0 <writeInt8+0x44>
	}

	((uint8_t*)buffer)[i] = value;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	78ba      	ldrb	r2, [r7, #2]
 8001f9e:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b23      	cmp	r3, #35	; 0x23
 8001fa4:	d901      	bls.n	8001faa <writeInt8+0x3e>
	{
		return 255;
 8001fa6:	23ff      	movs	r3, #255	; 0xff
 8001fa8:	e002      	b.n	8001fb0 <writeInt8+0x44>
	}

	return ((uint8_t) (i + 1));
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2db      	uxtb	r3, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800cd68 	.word	0x0800cd68

08001fbc <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	803b      	strh	r3, [r7, #0]
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <writeInt16+0x3a>
 8001fd2:	4816      	ldr	r0, [pc, #88]	; (800202c <writeInt16+0x70>)
 8001fd4:	f001 fa6a 	bl	80034ac <prvTraceError>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e022      	b.n	8002022 <writeInt16+0x66>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b23      	cmp	r3, #35	; 0x23
 8001fe0:	d901      	bls.n	8001fe6 <writeInt16+0x2a>
		{
			return 255;
 8001fe2:	23ff      	movs	r3, #255	; 0xff
 8001fe4:	e01d      	b.n	8002022 <writeInt16+0x66>
		}

		((uint8_t*)buffer)[i] = 0;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
		i++;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	70fb      	strb	r3, [r7, #3]
	while ((i % 2) != 0)
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ec      	bne.n	8001fdc <writeInt16+0x20>
	}

	if (i + 2 > MAX_ARG_SIZE)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2b22      	cmp	r3, #34	; 0x22
 8002006:	d901      	bls.n	800200c <writeInt16+0x50>
	{
		return 255;
 8002008:	23ff      	movs	r3, #255	; 0xff
 800200a:	e00a      	b.n	8002022 <writeInt16+0x66>
	}

	((uint16_t*)buffer)[i/2] = value;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	883a      	ldrh	r2, [r7, #0]
 800201a:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	3302      	adds	r3, #2
 8002020:	b2db      	uxtb	r3, r3
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	0800cd90 	.word	0x0800cd90

08002030 <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	460b      	mov	r3, r1
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	72fb      	strb	r3, [r7, #11]
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <writeInt32+0x38>
 8002044:	4815      	ldr	r0, [pc, #84]	; (800209c <writeInt32+0x6c>)
 8002046:	f001 fa31 	bl	80034ac <prvTraceError>
 800204a:	2300      	movs	r3, #0
 800204c:	e022      	b.n	8002094 <writeInt32+0x64>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	2b23      	cmp	r3, #35	; 0x23
 8002052:	d901      	bls.n	8002058 <writeInt32+0x28>
		{
			return 255;
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	e01d      	b.n	8002094 <writeInt32+0x64>
		}

		((uint8_t*)buffer)[i] = 0;
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		i++;
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	3301      	adds	r3, #1
 8002066:	72fb      	strb	r3, [r7, #11]
	while ((i % 4) != 0)
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ec      	bne.n	800204e <writeInt32+0x1e>
	}

	if (i + 4 > MAX_ARG_SIZE)
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	2b20      	cmp	r3, #32
 8002078:	d901      	bls.n	800207e <writeInt32+0x4e>
	{
		return 255;
 800207a:	23ff      	movs	r3, #255	; 0xff
 800207c:	e00a      	b.n	8002094 <writeInt32+0x64>
	}

	((uint32_t*)buffer)[i/4] = value;
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	3304      	adds	r3, #4
 8002092:	b2db      	uxtb	r3, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0800cdbc 	.word	0x0800cdbc

080020a0 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	70fb      	strb	r3, [r7, #3]
	uint16_t formatStrIndex = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	82fb      	strh	r3, [r7, #22]
	uint8_t argCounter = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	757b      	strb	r3, [r7, #21]
	uint8_t i = byteOffset;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	753b      	strb	r3, [r7, #20]

	while (formatStr[formatStrIndex] != '\0')
 80020ba:	e161      	b.n	8002380 <prvTraceUserEventFormat+0x2e0>
	{
		if (formatStr[formatStrIndex] == '%')
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b25      	cmp	r3, #37	; 0x25
 80020c6:	f040 8150 	bne.w	800236a <prvTraceUserEventFormat+0x2ca>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	3301      	adds	r3, #1
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b25      	cmp	r3, #37	; 0x25
 80020d6:	d103      	bne.n	80020e0 <prvTraceUserEventFormat+0x40>
			{
				formatStrIndex += 2;
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	3302      	adds	r3, #2
 80020dc:	82fb      	strh	r3, [r7, #22]
				continue;
 80020de:	e14f      	b.n	8002380 <prvTraceUserEventFormat+0x2e0>
			}

			/* We found a possible argument */
			argCounter++;
 80020e0:	7d7b      	ldrb	r3, [r7, #21]
 80020e2:	3301      	adds	r3, #1
 80020e4:	757b      	strb	r3, [r7, #21]

			formatStrIndex++;
 80020e6:	8afb      	ldrh	r3, [r7, #22]
 80020e8:	3301      	adds	r3, #1
 80020ea:	82fb      	strh	r3, [r7, #22]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80020ec:	e002      	b.n	80020f4 <prvTraceUserEventFormat+0x54>
				formatStrIndex++;
 80020ee:	8afb      	ldrh	r3, [r7, #22]
 80020f0:	3301      	adds	r3, #1
 80020f2:	82fb      	strh	r3, [r7, #22]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b2f      	cmp	r3, #47	; 0x2f
 80020fe:	d905      	bls.n	800210c <prvTraceUserEventFormat+0x6c>
 8002100:	8afb      	ldrh	r3, [r7, #22]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b39      	cmp	r3, #57	; 0x39
 800210a:	d9f0      	bls.n	80020ee <prvTraceUserEventFormat+0x4e>
 800210c:	8afb      	ldrh	r3, [r7, #22]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b23      	cmp	r3, #35	; 0x23
 8002116:	d0ea      	beq.n	80020ee <prvTraceUserEventFormat+0x4e>
 8002118:	8afb      	ldrh	r3, [r7, #22]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b2e      	cmp	r3, #46	; 0x2e
 8002122:	d0e4      	beq.n	80020ee <prvTraceUserEventFormat+0x4e>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 8002124:	8afb      	ldrh	r3, [r7, #22]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 812f 	beq.w	8002390 <prvTraceUserEventFormat+0x2f0>
			{
				switch (formatStr[formatStrIndex])
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b58      	subs	r3, #88	; 0x58
 800213c:	2b20      	cmp	r3, #32
 800213e:	f200 8107 	bhi.w	8002350 <prvTraceUserEventFormat+0x2b0>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <prvTraceUserEventFormat+0xa8>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	080021e5 	.word	0x080021e5
 800214c:	08002351 	.word	0x08002351
 8002150:	08002351 	.word	0x08002351
 8002154:	08002351 	.word	0x08002351
 8002158:	08002351 	.word	0x08002351
 800215c:	08002351 	.word	0x08002351
 8002160:	08002351 	.word	0x08002351
 8002164:	08002351 	.word	0x08002351
 8002168:	08002351 	.word	0x08002351
 800216c:	08002351 	.word	0x08002351
 8002170:	08002303 	.word	0x08002303
 8002174:	08002351 	.word	0x08002351
 8002178:	080021cd 	.word	0x080021cd
 800217c:	08002351 	.word	0x08002351
 8002180:	0800221f 	.word	0x0800221f
 8002184:	08002351 	.word	0x08002351
 8002188:	080022b5 	.word	0x080022b5
 800218c:	08002351 	.word	0x08002351
 8002190:	08002351 	.word	0x08002351
 8002194:	08002351 	.word	0x08002351
 8002198:	0800224b 	.word	0x0800224b
 800219c:	08002351 	.word	0x08002351
 80021a0:	08002351 	.word	0x08002351
 80021a4:	08002351 	.word	0x08002351
 80021a8:	08002351 	.word	0x08002351
 80021ac:	08002351 	.word	0x08002351
 80021b0:	08002351 	.word	0x08002351
 80021b4:	080021fd 	.word	0x080021fd
 80021b8:	08002351 	.word	0x08002351
 80021bc:	080021e5 	.word	0x080021e5
 80021c0:	08002351 	.word	0x08002351
 80021c4:	08002351 	.word	0x08002351
 80021c8:	080021e5 	.word	0x080021e5
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 80021d4:	7d3b      	ldrb	r3, [r7, #20]
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff29 	bl	8002030 <writeInt32>
 80021de:	4603      	mov	r3, r0
 80021e0:	753b      	strb	r3, [r7, #20]
						break;
 80021e2:	e0ba      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 80021ec:	7d3b      	ldrb	r3, [r7, #20]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff1d 	bl	8002030 <writeInt32>
 80021f6:	4603      	mov	r3, r0
 80021f8:	753b      	strb	r3, [r7, #20]
						break;
 80021fa:	e0ae      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
					case 's':
						i = writeInt16(	buffer,
										i,
										xTraceRegisterString((char*)va_arg(vl, char*)));
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1d1a      	adds	r2, r3, #4
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	681b      	ldr	r3, [r3, #0]
						i = writeInt16(	buffer,
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f9bd 	bl	8002584 <xTraceRegisterString>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	7d3b      	ldrb	r3, [r7, #20]
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fed2 	bl	8001fbc <writeInt16>
 8002218:	4603      	mov	r3, r0
 800221a:	753b      	strb	r3, [r7, #20]
						break;
 800221c:	e09d      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3307      	adds	r3, #7
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	f103 0208 	add.w	r2, r3, #8
 800222a:	60ba      	str	r2, [r7, #8]
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
						i = writeInt32(	buffer,
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fd fff4 	bl	8000220 <__aeabi_d2uiz>
 8002238:	4602      	mov	r2, r0
 800223a:	7d3b      	ldrb	r3, [r7, #20]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fef6 	bl	8002030 <writeInt32>
 8002244:	4603      	mov	r3, r0
 8002246:	753b      	strb	r3, [r7, #20]
						break;
 8002248:	e087      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
#endif
					case 'l':
						formatStrIndex++;
 800224a:	8afb      	ldrh	r3, [r7, #22]
 800224c:	3301      	adds	r3, #1
 800224e:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 8002250:	8afb      	ldrh	r3, [r7, #22]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b66      	cmp	r3, #102	; 0x66
 800225a:	d17d      	bne.n	8002358 <prvTraceUserEventFormat+0x2b8>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3307      	adds	r3, #7
 8002260:	f023 0307 	bic.w	r3, r3, #7
 8002264:	f103 0208 	add.w	r2, r3, #8
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fd ffd5 	bl	8000220 <__aeabi_d2uiz>
 8002276:	4602      	mov	r2, r0
 8002278:	7d3b      	ldrb	r3, [r7, #20]
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fed7 	bl	8002030 <writeInt32>
 8002282:	4603      	mov	r3, r0
 8002284:	753b      	strb	r3, [r7, #20]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3307      	adds	r3, #7
 800228a:	f023 0307 	bic.w	r3, r3, #7
 800228e:	f103 0208 	add.w	r2, r3, #8
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fd ffc0 	bl	8000220 <__aeabi_d2uiz>
 80022a0:	4602      	mov	r2, r0
 80022a2:	7d3b      	ldrb	r3, [r7, #20]
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fec2 	bl	8002030 <writeInt32>
 80022ac:	4603      	mov	r3, r0
 80022ae:	753b      	strb	r3, [r7, #20]
								break;
 80022b0:	bf00      	nop
#endif
						}
						break;
 80022b2:	e051      	b.n	8002358 <prvTraceUserEventFormat+0x2b8>
					case 'h':
						formatStrIndex++;
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	3301      	adds	r3, #1
 80022b8:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 80022ba:	8afb      	ldrh	r3, [r7, #22]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d002      	beq.n	80022cc <prvTraceUserEventFormat+0x22c>
 80022c6:	2b75      	cmp	r3, #117	; 0x75
 80022c8:	d00d      	beq.n	80022e6 <prvTraceUserEventFormat+0x246>
								i = writeInt16(	buffer,
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;
						}
						break;
 80022ca:	e046      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
												(uint16_t)va_arg(vl, uint32_t));
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	60ba      	str	r2, [r7, #8]
 80022d2:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	7d3b      	ldrb	r3, [r7, #20]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fe6e 	bl	8001fbc <writeInt16>
 80022e0:	4603      	mov	r3, r0
 80022e2:	753b      	strb	r3, [r7, #20]
								break;
 80022e4:	e00c      	b.n	8002300 <prvTraceUserEventFormat+0x260>
												(uint16_t)va_arg(vl, uint32_t));
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	7d3b      	ldrb	r3, [r7, #20]
 80022f2:	4619      	mov	r1, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fe61 	bl	8001fbc <writeInt16>
 80022fa:	4603      	mov	r3, r0
 80022fc:	753b      	strb	r3, [r7, #20]
								break;
 80022fe:	bf00      	nop
						break;
 8002300:	e02b      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
					case 'b':
						formatStrIndex++;
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	3301      	adds	r3, #1
 8002306:	82fb      	strh	r3, [r7, #22]
						switch (formatStr[formatStrIndex])
 8002308:	8afb      	ldrh	r3, [r7, #22]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d002      	beq.n	800231a <prvTraceUserEventFormat+0x27a>
 8002314:	2b75      	cmp	r3, #117	; 0x75
 8002316:	d00d      	beq.n	8002334 <prvTraceUserEventFormat+0x294>
								i = writeInt8(	buffer,
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;
						}
						break;
 8002318:	e01f      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
												(uint8_t)va_arg(vl, uint32_t));
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8002322:	b2da      	uxtb	r2, r3
 8002324:	7d3b      	ldrb	r3, [r7, #20]
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe1f 	bl	8001f6c <writeInt8>
 800232e:	4603      	mov	r3, r0
 8002330:	753b      	strb	r3, [r7, #20]
								break;
 8002332:	e00c      	b.n	800234e <prvTraceUserEventFormat+0x2ae>
												(uint8_t)va_arg(vl, uint32_t));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1d1a      	adds	r2, r3, #4
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 800233c:	b2da      	uxtb	r2, r3
 800233e:	7d3b      	ldrb	r3, [r7, #20]
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fe12 	bl	8001f6c <writeInt8>
 8002348:	4603      	mov	r3, r0
 800234a:	753b      	strb	r3, [r7, #20]
								break;
 800234c:	bf00      	nop
						break;
 800234e:	e004      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 8002350:	7d7b      	ldrb	r3, [r7, #21]
 8002352:	3b01      	subs	r3, #1
 8002354:	757b      	strb	r3, [r7, #21]
						break;
 8002356:	e000      	b.n	800235a <prvTraceUserEventFormat+0x2ba>
						break;
 8002358:	bf00      	nop
				}

				if (argCounter > 15)
 800235a:	7d7b      	ldrb	r3, [r7, #21]
 800235c:	2b0f      	cmp	r3, #15
 800235e:	d904      	bls.n	800236a <prvTraceUserEventFormat+0x2ca>
				{
					prvTraceError("vTracePrintF - Too many arguments, max 15 allowed!");
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <prvTraceUserEventFormat+0x304>)
 8002362:	f001 f8a3 	bl	80034ac <prvTraceError>
					return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e018      	b.n	800239c <prvTraceUserEventFormat+0x2fc>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 800236a:	8afb      	ldrh	r3, [r7, #22]
 800236c:	3301      	adds	r3, #1
 800236e:	82fb      	strh	r3, [r7, #22]
		if (i == 255)
 8002370:	7d3b      	ldrb	r3, [r7, #20]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d104      	bne.n	8002380 <prvTraceUserEventFormat+0x2e0>
		{
			prvTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <prvTraceUserEventFormat+0x308>)
 8002378:	f001 f898 	bl	80034ac <prvTraceError>
			return 0;
 800237c:	2300      	movs	r3, #0
 800237e:	e00d      	b.n	800239c <prvTraceUserEventFormat+0x2fc>
	while (formatStr[formatStrIndex] != '\0')
 8002380:	8afb      	ldrh	r3, [r7, #22]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f ae97 	bne.w	80020bc <prvTraceUserEventFormat+0x1c>
 800238e:	e000      	b.n	8002392 <prvTraceUserEventFormat+0x2f2>
				break;
 8002390:	bf00      	nop
		}
	}
	return (uint8_t)(i+3)/4;
 8002392:	7d3b      	ldrb	r3, [r7, #20]
 8002394:	3303      	adds	r3, #3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	b2db      	uxtb	r3, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800cde8 	.word	0x0800cde8
 80023a8:	0800ce1c 	.word	0x0800ce1c

080023ac <vTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
void vTracePrintF(traceString eventLabel, const char* formatStr, ...)
{
 80023ac:	b40e      	push	{r1, r2, r3}
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	80fb      	strh	r3, [r7, #6]
	va_list vl;

	va_start(vl, formatStr);
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	60fb      	str	r3, [r7, #12]
	vTraceVPrintF(eventLabel, formatStr, vl);
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	69f9      	ldr	r1, [r7, #28]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f807 	bl	80023d8 <vTraceVPrintF>
	va_end(vl);
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d4:	b003      	add	sp, #12
 80023d6:	4770      	bx	lr

080023d8 <vTraceVPrintF>:
 * See vTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
void vTraceVPrintF(traceString eventLabel, const char* formatStr, va_list vl)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b094      	sub	sp, #80	; 0x50
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	81fb      	strh	r3, [r7, #14]
	uint32_t noOfSlots;
	UserEvent* ue1;
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != NULL, "vTraceVPrintF: formatStr == NULL", TRC_UNUSED);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <vTraceVPrintF+0x1c>
 80023ec:	4861      	ldr	r0, [pc, #388]	; (8002574 <vTraceVPrintF+0x19c>)
 80023ee:	f001 f85d 	bl	80034ac <prvTraceError>
 80023f2:	e0bb      	b.n	800256c <vTraceVPrintF+0x194>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f4:	f3ef 8310 	mrs	r3, PRIMASK
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80023fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

	trcCRITICAL_SECTION_BEGIN();
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023fe:	2301      	movs	r3, #1
 8002400:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	bf00      	nop
 800240a:	4b5b      	ldr	r3, [pc, #364]	; (8002578 <vTraceVPrintF+0x1a0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a59      	ldr	r2, [pc, #356]	; (8002578 <vTraceVPrintF+0x1a0>)
 8002412:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <vTraceVPrintF+0x1a4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 809b 	beq.w	8002556 <vTraceVPrintF+0x17e>
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <vTraceVPrintF+0x1a8>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8096 	beq.w	8002556 <vTraceVPrintF+0x17e>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 8002430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002432:	22aa      	movs	r2, #170	; 0xaa
 8002434:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 8002436:	f107 0214 	add.w	r2, r7, #20
 800243a:	2304      	movs	r3, #4
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	68b8      	ldr	r0, [r7, #8]
 8002440:	f7ff fe2e 	bl	80020a0 <prvTraceUserEventFormat>
 8002444:	4603      	mov	r3, r0
 8002446:	647b      	str	r3, [r7, #68]	; 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	4619      	mov	r1, r3
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f000 ffdb 	bl	8003408 <prvTraceOpenSymbol>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 800245a:	20ff      	movs	r0, #255	; 0xff
 800245c:	f001 f908 	bl	8003670 <prvTraceGetDTS>
 8002460:	4603      	mov	r3, r0
 8002462:	b2da      	uxtb	r2, r3
 8002464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002466:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <vTraceVPrintF+0x1a4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	2b00      	cmp	r3, #0
 8002470:	d071      	beq.n	8002556 <vTraceVPrintF+0x17e>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <vTraceVPrintF+0x1a4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	441a      	add	r2, r3
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <vTraceVPrintF+0x1a4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	429a      	cmp	r2, r3
 8002484:	d91d      	bls.n	80024c2 <vTraceVPrintF+0xea>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <vTraceVPrintF+0x1a4>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b3c      	ldr	r3, [pc, #240]	; (800257c <vTraceVPrintF+0x1a4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002496:	4413      	add	r3, r2
 8002498:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <vTraceVPrintF+0x1a4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <vTraceVPrintF+0x1a4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80024aa:	461a      	mov	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f009 fc47 	bl	800bd40 <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <vTraceVPrintF+0x1a4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <vTraceVPrintF+0x1a4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <vTraceVPrintF+0x1a4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d041      	beq.n	8002550 <vTraceVPrintF+0x178>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 80024cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f817 	bl	8003504 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <vTraceVPrintF+0x1a4>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <vTraceVPrintF+0x1a4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80024e6:	4413      	add	r3, r2
 80024e8:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 80024ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ec:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	f009 fc16 	bl	800bd24 <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 80024f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fa:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <vTraceVPrintF+0x1a4>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <vTraceVPrintF+0x1a4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8002508:	3969      	subs	r1, #105	; 0x69
 800250a:	b2c9      	uxtb	r1, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 800250c:	4413      	add	r3, r2
 800250e:	460a      	mov	r2, r1
 8002510:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <vTraceVPrintF+0x1a4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69d9      	ldr	r1, [r3, #28]
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <vTraceVPrintF+0x1a4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002520:	440a      	add	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <vTraceVPrintF+0x1a4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6959      	ldr	r1, [r3, #20]
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <vTraceVPrintF+0x1a4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002530:	440a      	add	r2, r1
 8002532:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <vTraceVPrintF+0x1a4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800253e:	d307      	bcc.n	8002550 <vTraceVPrintF+0x178>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <vTraceVPrintF+0x1a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <vTraceVPrintF+0x1a4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f000 ffd7 	bl	8003504 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <vTraceVPrintF+0x1a0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <vTraceVPrintF+0x1a0>)
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	f383 8810 	msr	PRIMASK, r3
}
 800256a:	bf00      	nop
		channel = xTraceRegisterUBChannel(eventLabel, formatLabel);

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif
}
 800256c:	3750      	adds	r7, #80	; 0x50
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	0800ce58 	.word	0x0800ce58
 8002578:	200000b8 	.word	0x200000b8
 800257c:	20002ee8 	.word	0x20002ee8
 8002580:	200000c0 	.word	0x200000c0

08002584 <xTraceRegisterString>:
 *	 ...
 *	 vTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceString xTraceRegisterString(const char* label)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	TRACE_ASSERT(label != NULL, "xTraceRegisterString: label == NULL", (traceString)0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <xTraceRegisterString+0x18>
 8002592:	480b      	ldr	r0, [pc, #44]	; (80025c0 <xTraceRegisterString+0x3c>)
 8002594:	f000 ff8a 	bl	80034ac <prvTraceError>
 8002598:	2300      	movs	r3, #0
 800259a:	e00d      	b.n	80025b8 <xTraceRegisterString+0x34>
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <xTraceRegisterString+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <xTraceRegisterString+0x2a>
 80025a4:	4808      	ldr	r0, [pc, #32]	; (80025c8 <xTraceRegisterString+0x44>)
 80025a6:	f000 ff81 	bl	80034ac <prvTraceError>
 80025aa:	2300      	movs	r3, #0
 80025ac:	e004      	b.n	80025b8 <xTraceRegisterString+0x34>
	return prvTraceOpenSymbol(label, 0);
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 ff29 	bl	8003408 <prvTraceOpenSymbol>
 80025b6:	4603      	mov	r3, r0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	0800ce88 	.word	0x0800ce88
 80025c4:	20002ee8 	.word	0x20002ee8
 80025c8:	0800cb60 	.word	0x0800cb60

080025cc <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <vTraceInitialize+0x220>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8106 	bne.w	80027e6 <vTraceInitialize+0x21a>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80025da:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <vTraceInitialize+0x224>)
 80025dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e0:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80025e2:	4b84      	ldr	r3, [pc, #528]	; (80027f4 <vTraceInitialize+0x228>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80025e8:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <vTraceInitialize+0x22c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80025ee:	4b83      	ldr	r3, [pc, #524]	; (80027fc <vTraceInitialize+0x230>)
 80025f0:	4a83      	ldr	r2, [pc, #524]	; (8002800 <vTraceInitialize+0x234>)
 80025f2:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80025f4:	4b83      	ldr	r3, [pc, #524]	; (8002804 <vTraceInitialize+0x238>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a83      	ldr	r2, [pc, #524]	; (8002808 <vTraceInitialize+0x23c>)
 80025fa:	6013      	str	r3, [r2, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80025fc:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <vTraceInitialize+0x230>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f248 6264 	movw	r2, #34404	; 0x8664
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f009 fb9a 	bl	800bd40 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <vTraceInitialize+0x230>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8002614:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <vTraceInitialize+0x230>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2207      	movs	r2, #7
 800261c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800261e:	4b77      	ldr	r3, [pc, #476]	; (80027fc <vTraceInitialize+0x230>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8002626:	4b75      	ldr	r3, [pc, #468]	; (80027fc <vTraceInitialize+0x230>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f248 6264 	movw	r2, #34404	; 0x8664
 800262e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8002630:	4b72      	ldr	r3, [pc, #456]	; (80027fc <vTraceInitialize+0x230>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002638:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 800263a:	4b70      	ldr	r3, [pc, #448]	; (80027fc <vTraceInitialize+0x230>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8002644:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <vTraceInitialize+0x230>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <vTraceInitialize+0x230>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8002654:	f7ff fa4a 	bl	8001aec <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <vTraceInitialize+0x230>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8002660:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <vTraceInitialize+0x230>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 7248 	mov.w	r2, #800	; 0x320
 800266c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8002670:	4b62      	ldr	r3, [pc, #392]	; (80027fc <vTraceInitialize+0x230>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 800267a:	4b60      	ldr	r3, [pc, #384]	; (80027fc <vTraceInitialize+0x230>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8002682:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <vTraceInitialize+0x230>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268e:	2250      	movs	r2, #80	; 0x50
 8002690:	495e      	ldr	r1, [pc, #376]	; (800280c <vTraceInitialize+0x240>)
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fe38 	bl	8003308 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8002698:	4b58      	ldr	r3, [pc, #352]	; (80027fc <vTraceInitialize+0x230>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80026a0:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <vTraceInitialize+0x230>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026ac:	3358      	adds	r3, #88	; 0x58
 80026ae:	220a      	movs	r2, #10
 80026b0:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 80026b2:	4b52      	ldr	r3, [pc, #328]	; (80027fc <vTraceInitialize+0x230>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026ba:	3359      	adds	r3, #89	; 0x59
 80026bc:	220b      	movs	r2, #11
 80026be:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <vTraceInitialize+0x230>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026c8:	335a      	adds	r3, #90	; 0x5a
 80026ca:	220c      	movs	r2, #12
 80026cc:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <vTraceInitialize+0x230>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026d6:	335b      	adds	r3, #91	; 0x5b
 80026d8:	220d      	movs	r2, #13
 80026da:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <vTraceInitialize+0x230>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	2271      	movs	r2, #113	; 0x71
 80026e8:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 80026ea:	4b44      	ldr	r3, [pc, #272]	; (80027fc <vTraceInitialize+0x230>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 80026f2:	335d      	adds	r3, #93	; 0x5d
 80026f4:	2272      	movs	r2, #114	; 0x72
 80026f6:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 80026f8:	4b40      	ldr	r3, [pc, #256]	; (80027fc <vTraceInitialize+0x230>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 8002700:	335e      	adds	r3, #94	; 0x5e
 8002702:	2273      	movs	r2, #115	; 0x73
 8002704:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <vTraceInitialize+0x230>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800270e:	335f      	adds	r3, #95	; 0x5f
 8002710:	2274      	movs	r2, #116	; 0x74
 8002712:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <vTraceInitialize+0x230>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	22f1      	movs	r2, #241	; 0xf1
 8002720:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <vTraceInitialize+0x230>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800272a:	3361      	adds	r3, #97	; 0x61
 800272c:	22f2      	movs	r2, #242	; 0xf2
 800272e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <vTraceInitialize+0x230>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 8002738:	3362      	adds	r3, #98	; 0x62
 800273a:	22f3      	movs	r2, #243	; 0xf3
 800273c:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <vTraceInitialize+0x230>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 8002746:	3363      	adds	r3, #99	; 0x63
 8002748:	22f4      	movs	r2, #244	; 0xf4
 800274a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 800274c:	f7ff fa9c 	bl	8001c88 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <vTraceInitialize+0x230>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	22f4      	movs	r2, #244	; 0xf4
 8002756:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <vTraceInitialize+0x230>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	22f3      	movs	r2, #243	; 0xf3
 800275e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <vTraceInitialize+0x230>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	22f2      	movs	r2, #242	; 0xf2
 8002766:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <vTraceInitialize+0x230>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	22f1      	movs	r2, #241	; 0xf1
 800276e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <vTraceInitialize+0x230>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2274      	movs	r2, #116	; 0x74
 8002776:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <vTraceInitialize+0x230>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2273      	movs	r2, #115	; 0x73
 800277e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <vTraceInitialize+0x230>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2272      	movs	r2, #114	; 0x72
 8002786:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <vTraceInitialize+0x230>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2271      	movs	r2, #113	; 0x71
 800278e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <vTraceInitialize+0x230>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <vTraceInitialize+0x230>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2203      	movs	r2, #3
 800279e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <vTraceInitialize+0x230>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2202      	movs	r2, #2
 80027a6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <vTraceInitialize+0x230>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <vTraceInitialize+0x22c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <vTraceInitialize+0x20e>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <vTraceInitialize+0x230>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <vTraceInitialize+0x22c>)
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	2250      	movs	r2, #80	; 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fd9e 	bl	8003308 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <vTraceInitialize+0x230>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		vTraceStop();
 80027d6:	f7ff fba1 	bl	8001f1c <vTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 80027da:	f001 f9a7 	bl	8003b2c <prvTraceInitCortexM>
#endif

	RecorderInitialized = 1;
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <vTraceInitialize+0x220>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e000      	b.n	80027e8 <vTraceInitialize+0x21c>
		return;
 80027e6:	bf00      	nop
}
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200000c8 	.word	0x200000c8
 80027f0:	20002ee4 	.word	0x20002ee4
 80027f4:	2000b550 	.word	0x2000b550
 80027f8:	2000b554 	.word	0x2000b554
 80027fc:	20002ee8 	.word	0x20002ee8
 8002800:	20002eec 	.word	0x20002eec
 8002804:	e0001004 	.word	0xe0001004
 8002808:	2000b558 	.word	0x2000b558
 800280c:	0800cebc 	.word	0x0800cebc

08002810 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d04b      	beq.n	80028b8 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <prvTraceStoreTaskReady+0xb4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d049      	beq.n	80028bc <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	d903      	bls.n	8002836 <prvTraceStoreTaskReady+0x26>
 800282e:	4826      	ldr	r0, [pc, #152]	; (80028c8 <prvTraceStoreTaskReady+0xb8>)
 8002830:	f000 fe3c 	bl	80034ac <prvTraceError>
 8002834:	e043      	b.n	80028be <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <prvTraceStoreTaskReady+0xbc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800283e:	4824      	ldr	r0, [pc, #144]	; (80028d0 <prvTraceStoreTaskReady+0xc0>)
 8002840:	f000 fe34 	bl	80034ac <prvTraceError>
		return;
 8002844:	e03b      	b.n	80028be <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002846:	f3ef 8310 	mrs	r3, PRIMASK
 800284a:	60fb      	str	r3, [r7, #12]
  return(result);
 800284c:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f383 8810 	msr	PRIMASK, r3
}
 800285a:	bf00      	nop
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <prvTraceStoreTaskReady+0xbc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <prvTraceStoreTaskReady+0xbc>)
 8002864:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <prvTraceStoreTaskReady+0xc4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b00      	cmp	r3, #0
 800286e:	d018      	beq.n	80028a2 <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002870:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002874:	f000 fefc 	bl	8003670 <prvTraceGetDTS>
 8002878:	4603      	mov	r3, r0
 800287a:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8002880:	f000 fbfa 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002884:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	8b7a      	ldrh	r2, [r7, #26]
 8002896:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	7e7a      	ldrb	r2, [r7, #25]
 800289c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800289e:	f000 febf 	bl	8003620 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <prvTraceStoreTaskReady+0xbc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <prvTraceStoreTaskReady+0xbc>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f383 8810 	msr	PRIMASK, r3
}
 80028b6:	e002      	b.n	80028be <prvTraceStoreTaskReady+0xae>
		return;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <prvTraceStoreTaskReady+0xae>
		return;
 80028bc:	bf00      	nop
}
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000010 	.word	0x20000010
 80028c8:	0800ced0 	.word	0x0800ced0
 80028cc:	200000b8 	.word	0x200000b8
 80028d0:	0800cf10 	.word	0x0800cf10
 80028d4:	20002ee8 	.word	0x20002ee8

080028d8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8084 	beq.w	80029f6 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da03      	bge.n	80028fc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	425b      	negs	r3, r3
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
 80028fa:	e001      	b.n	8002900 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002900:	f3ef 8310 	mrs	r3, PRIMASK
 8002904:	61bb      	str	r3, [r7, #24]
  return(result);
 8002906:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f383 8810 	msr	PRIMASK, r3
}
 8002914:	bf00      	nop
 8002916:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <vTraceStoreMemMangEvent+0x12c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a39      	ldr	r2, [pc, #228]	; (8002a04 <vTraceStoreMemMangEvent+0x12c>)
 800291e:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	440a      	add	r2, r1
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	429a      	cmp	r2, r3
 8002944:	d905      	bls.n	8002952 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <vTraceStoreMemMangEvent+0x128>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	2b00      	cmp	r3, #0
 800295a:	d041      	beq.n	80029e0 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 800295c:	20ff      	movs	r0, #255	; 0xff
 800295e:	f000 fe87 	bl	8003670 <prvTraceGetDTS>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8002968:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800296a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800296e:	f000 f953 	bl	8002c18 <prvTraceGetParam>
 8002972:	4603      	mov	r3, r0
 8002974:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8002976:	f000 fb7f 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 800297a:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002988:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002994:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002996:	f000 fe43 	bl	8003620 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029a0:	f000 f93a 	bl	8002c18 <prvTraceGetParam>
 80029a4:	4603      	mov	r3, r0
 80029a6:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80029ae:	f000 fb63 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 80029b2:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029be:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80029c6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80029dc:	f000 fe20 	bl	8003620 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <vTraceStoreMemMangEvent+0x12c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <vTraceStoreMemMangEvent+0x12c>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	e000      	b.n	80029f8 <vTraceStoreMemMangEvent+0x120>
		return;
 80029f6:	bf00      	nop
}
 80029f8:	3738      	adds	r7, #56	; 0x38
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20002ee8 	.word	0x20002ee8
 8002a04:	200000b8 	.word	0x200000b8

08002a08 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	460b      	mov	r3, r1
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2bfe      	cmp	r3, #254	; 0xfe
 8002a1a:	d903      	bls.n	8002a24 <prvTraceStoreKernelCall+0x1c>
 8002a1c:	4832      	ldr	r0, [pc, #200]	; (8002ae8 <prvTraceStoreKernelCall+0xe0>)
 8002a1e:	f000 fd45 	bl	80034ac <prvTraceError>
 8002a22:	e05d      	b.n	8002ae0 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8002a24:	7afb      	ldrb	r3, [r7, #11]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d903      	bls.n	8002a32 <prvTraceStoreKernelCall+0x2a>
 8002a2a:	4830      	ldr	r0, [pc, #192]	; (8002aec <prvTraceStoreKernelCall+0xe4>)
 8002a2c:	f000 fd3e 	bl	80034ac <prvTraceError>
 8002a30:	e056      	b.n	8002ae0 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <prvTraceStoreKernelCall+0xe8>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d903      	bls.n	8002a4e <prvTraceStoreKernelCall+0x46>
 8002a46:	482b      	ldr	r0, [pc, #172]	; (8002af4 <prvTraceStoreKernelCall+0xec>)
 8002a48:	f000 fd30 	bl	80034ac <prvTraceError>
 8002a4c:	e048      	b.n	8002ae0 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <prvTraceStoreKernelCall+0xf0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8002a56:	4829      	ldr	r0, [pc, #164]	; (8002afc <prvTraceStoreKernelCall+0xf4>)
 8002a58:	f000 fd28 	bl	80034ac <prvTraceError>
		return;
 8002a5c:	e040      	b.n	8002ae0 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <prvTraceStoreKernelCall+0xf8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03b      	beq.n	8002ade <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8002a6c:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	2301      	movs	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	bf00      	nop
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <prvTraceStoreKernelCall+0xf0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <prvTraceStoreKernelCall+0xf0>)
 8002a84:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <prvTraceStoreKernelCall+0xe8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002a90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a94:	f000 fdec 	bl	8003670 <prvTraceGetDTS>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8002aa2:	f000 fae9 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002aa6:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ab2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002ac2:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8002ac4:	f000 fdac 	bl	8003620 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <prvTraceStoreKernelCall+0xf0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <prvTraceStoreKernelCall+0xf0>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f383 8810 	msr	PRIMASK, r3
}
 8002adc:	e000      	b.n	8002ae0 <prvTraceStoreKernelCall+0xd8>
		return;
 8002ade:	bf00      	nop
}
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800cf80 	.word	0x0800cf80
 8002aec:	0800cfb8 	.word	0x0800cfb8
 8002af0:	20002ee8 	.word	0x20002ee8
 8002af4:	0800d000 	.word	0x0800d000
 8002af8:	200000b8 	.word	0x200000b8
 8002afc:	0800d048 	.word	0x0800d048
 8002b00:	200000c0 	.word	0x200000c0

08002b04 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	460b      	mov	r3, r1
 8002b12:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2bfe      	cmp	r3, #254	; 0xfe
 8002b18:	d903      	bls.n	8002b22 <prvTraceStoreKernelCallWithParam+0x1e>
 8002b1a:	4838      	ldr	r0, [pc, #224]	; (8002bfc <prvTraceStoreKernelCallWithParam+0xf8>)
 8002b1c:	f000 fcc6 	bl	80034ac <prvTraceError>
 8002b20:	e068      	b.n	8002bf4 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d903      	bls.n	8002b30 <prvTraceStoreKernelCallWithParam+0x2c>
 8002b28:	4835      	ldr	r0, [pc, #212]	; (8002c00 <prvTraceStoreKernelCallWithParam+0xfc>)
 8002b2a:	f000 fcbf 	bl	80034ac <prvTraceError>
 8002b2e:	e061      	b.n	8002bf4 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <prvTraceStoreKernelCallWithParam+0x100>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	7afb      	ldrb	r3, [r7, #11]
 8002b36:	4413      	add	r3, r2
 8002b38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d903      	bls.n	8002b4c <prvTraceStoreKernelCallWithParam+0x48>
 8002b44:	4830      	ldr	r0, [pc, #192]	; (8002c08 <prvTraceStoreKernelCallWithParam+0x104>)
 8002b46:	f000 fcb1 	bl	80034ac <prvTraceError>
 8002b4a:	e053      	b.n	8002bf4 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <prvTraceStoreKernelCallWithParam+0x108>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8002b54:	482e      	ldr	r0, [pc, #184]	; (8002c10 <prvTraceStoreKernelCallWithParam+0x10c>)
 8002b56:	f000 fca9 	bl	80034ac <prvTraceError>
		return;
 8002b5a:	e04b      	b.n	8002bf4 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b60:	617b      	str	r3, [r7, #20]
  return(result);
 8002b62:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	bf00      	nop
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <prvTraceStoreKernelCallWithParam+0x108>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <prvTraceStoreKernelCallWithParam+0x108>)
 8002b7a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <prvTraceStoreKernelCallWithParam+0x100>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02b      	beq.n	8002bde <prvTraceStoreKernelCallWithParam+0xda>
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <prvTraceStoreKernelCallWithParam+0x110>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d027      	beq.n	8002bde <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8002b8e:	20ff      	movs	r0, #255	; 0xff
 8002b90:	f000 fd6e 	bl	8003670 <prvTraceGetDTS>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	20ff      	movs	r0, #255	; 0xff
 8002b9e:	f000 f83b 	bl	8002c18 <prvTraceGetParam>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8002bae:	f000 fa63 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002bb2:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002bc0:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002bd0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002bd8:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002bda:	f000 fd21 	bl	8003620 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <prvTraceStoreKernelCallWithParam+0x108>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <prvTraceStoreKernelCallWithParam+0x108>)
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	bf00      	nop
}
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800d080 	.word	0x0800d080
 8002c00:	0800d0c0 	.word	0x0800d0c0
 8002c04:	20002ee8 	.word	0x20002ee8
 8002c08:	0800d110 	.word	0x0800d110
 8002c0c:	200000b8 	.word	0x200000b8
 8002c10:	0800d160 	.word	0x0800d160
 8002c14:	200000c0 	.word	0x200000c0

08002c18 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2bff      	cmp	r3, #255	; 0xff
 8002c26:	d009      	beq.n	8002c3c <prvTraceGetParam+0x24>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <prvTraceGetParam+0x24>
 8002c32:	4816      	ldr	r0, [pc, #88]	; (8002c8c <prvTraceGetParam+0x74>)
 8002c34:	f000 fc3a 	bl	80034ac <prvTraceError>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	e023      	b.n	8002c84 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d801      	bhi.n	8002c48 <prvTraceGetParam+0x30>
	{
		return param;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	e01d      	b.n	8002c84 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8002c48:	f000 fa16 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002c4c:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d014      	beq.n	8002c7e <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4013      	ands	r3, r2
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4013      	ands	r3, r2
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002c7a:	f000 fcd1 	bl	8003620 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4013      	ands	r3, r2
	}
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	0800d198 	.word	0x0800d198

08002c90 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ca2:	d903      	bls.n	8002cac <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8002ca4:	4828      	ldr	r0, [pc, #160]	; (8002d48 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8002ca6:	f000 fc01 	bl	80034ac <prvTraceError>
 8002caa:	e049      	b.n	8002d40 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8002cb4:	4826      	ldr	r0, [pc, #152]	; (8002d50 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8002cb6:	f000 fbf9 	bl	80034ac <prvTraceError>
		return;
 8002cba:	e041      	b.n	8002d40 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cc2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	bf00      	nop
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002cda:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d021      	beq.n	8002d2a <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01d      	beq.n	8002d2a <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8002cee:	20ff      	movs	r0, #255	; 0xff
 8002cf0:	f000 fcbe 	bl	8003670 <prvTraceGetDTS>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cfe:	f7ff ff8b 	bl	8002c18 <prvTraceGetParam>
 8002d02:	4603      	mov	r3, r0
 8002d04:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8002d06:	f000 f9b7 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002d0a:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	7ffa      	ldrb	r2, [r7, #31]
 8002d16:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d24:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002d26:	f000 fc7b 	bl	8003620 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	bf00      	nop
}
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0800d1d4 	.word	0x0800d1d4
 8002d4c:	200000b8 	.word	0x200000b8
 8002d50:	0800d22c 	.word	0x0800d22c
 8002d54:	20002ee8 	.word	0x20002ee8
 8002d58:	200000c0 	.word	0x200000c0

08002d5c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d903      	bls.n	8002d74 <prvTraceStoreTaskswitch+0x18>
 8002d6c:	482f      	ldr	r0, [pc, #188]	; (8002e2c <prvTraceStoreTaskswitch+0xd0>)
 8002d6e:	f000 fb9d 	bl	80034ac <prvTraceError>
 8002d72:	e058      	b.n	8002e26 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d74:	f3ef 8310 	mrs	r3, PRIMASK
 8002d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	2301      	movs	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	bf00      	nop
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <prvTraceStoreTaskswitch+0xd4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <prvTraceStoreTaskswitch+0xd4>)
 8002d92:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <prvTraceStoreTaskswitch+0xd8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d038      	beq.n	8002e10 <prvTraceStoreTaskswitch+0xb4>
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <prvTraceStoreTaskswitch+0xdc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d033      	beq.n	8002e10 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <prvTraceStoreTaskswitch+0xe0>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002db2:	f000 fc5d 	bl	8003670 <prvTraceGetDTS>
 8002db6:	4603      	mov	r3, r0
 8002db8:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <prvTraceStoreTaskswitch+0xd8>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <prvTraceStoreTaskswitch+0xd8>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8002dc6:	f000 f957 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8002dca:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01e      	beq.n	8002e10 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <prvTraceStoreTaskswitch+0xd8>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f8e7 	bl	8002fac <prvTraceGetObjectState>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d103      	bne.n	8002dec <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2207      	movs	r2, #7
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2206      	movs	r2, #6
 8002df0:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	8b7a      	ldrh	r2, [r7, #26]
 8002df6:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	7e7a      	ldrb	r2, [r7, #25]
 8002dfc:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <prvTraceStoreTaskswitch+0xd8>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	4619      	mov	r1, r3
 8002e06:	2003      	movs	r0, #3
 8002e08:	f000 f894 	bl	8002f34 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8002e0c:	f000 fc08 	bl	8003620 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <prvTraceStoreTaskswitch+0xd4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <prvTraceStoreTaskswitch+0xd4>)
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f383 8810 	msr	PRIMASK, r3
}
 8002e24:	bf00      	nop
}
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	0800d264 	.word	0x0800d264
 8002e30:	200000b8 	.word	0x200000b8
 8002e34:	200000c0 	.word	0x200000c0
 8002e38:	20002ee8 	.word	0x20002ee8
 8002e3c:	200000a4 	.word	0x200000a4

08002e40 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	71bb      	strb	r3, [r7, #6]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d903      	bls.n	8002e60 <prvTraceSetPriorityProperty+0x20>
 8002e58:	4814      	ldr	r0, [pc, #80]	; (8002eac <prvTraceSetPriorityProperty+0x6c>)
 8002e5a:	f000 fb27 	bl	80034ac <prvTraceError>
 8002e5e:	e022      	b.n	8002ea6 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <prvTraceSetPriorityProperty+0x70>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	4413      	add	r3, r2
 8002e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6c:	79ba      	ldrb	r2, [r7, #6]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d903      	bls.n	8002e7a <prvTraceSetPriorityProperty+0x3a>
 8002e72:	4810      	ldr	r0, [pc, #64]	; (8002eb4 <prvTraceSetPriorityProperty+0x74>)
 8002e74:	f000 fb1a 	bl	80034ac <prvTraceError>
 8002e78:	e015      	b.n	8002ea6 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <prvTraceSetPriorityProperty+0x70>)
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f91b 	bl	80030c0 <uiIndexOfObject>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <prvTraceSetPriorityProperty+0x70>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	4413      	add	r3, r2
 8002e96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4423      	add	r3, r4
 8002ea0:	797a      	ldrb	r2, [r7, #5]
 8002ea2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	0800d3f8 	.word	0x0800d3f8
 8002eb0:	20002ee8 	.word	0x20002ee8
 8002eb4:	0800d444 	.word	0x0800d444

08002eb8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d904      	bls.n	8002ed8 <prvTraceGetPriorityProperty+0x20>
 8002ece:	4816      	ldr	r0, [pc, #88]	; (8002f28 <prvTraceGetPriorityProperty+0x70>)
 8002ed0:	f000 faec 	bl	80034ac <prvTraceError>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e022      	b.n	8002f1e <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <prvTraceGetPriorityProperty+0x74>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee4:	79ba      	ldrb	r2, [r7, #6]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d904      	bls.n	8002ef4 <prvTraceGetPriorityProperty+0x3c>
 8002eea:	4811      	ldr	r0, [pc, #68]	; (8002f30 <prvTraceGetPriorityProperty+0x78>)
 8002eec:	f000 fade 	bl	80034ac <prvTraceError>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e014      	b.n	8002f1e <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <prvTraceGetPriorityProperty+0x74>)
 8002ef6:	681c      	ldr	r4, [r3, #0]
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8de 	bl	80030c0 <uiIndexOfObject>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4619      	mov	r1, r3
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <prvTraceGetPriorityProperty+0x74>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f14:	440b      	add	r3, r1
 8002f16:	3301      	adds	r3, #1
 8002f18:	4423      	add	r3, r4
 8002f1a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	0800d484 	.word	0x0800d484
 8002f2c:	20002ee8 	.word	0x20002ee8
 8002f30:	0800d4d0 	.word	0x0800d4d0

08002f34 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	71bb      	strb	r3, [r7, #6]
 8002f42:	4613      	mov	r3, r2
 8002f44:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d903      	bls.n	8002f54 <prvTraceSetObjectState+0x20>
 8002f4c:	4814      	ldr	r0, [pc, #80]	; (8002fa0 <prvTraceSetObjectState+0x6c>)
 8002f4e:	f000 faad 	bl	80034ac <prvTraceError>
 8002f52:	e021      	b.n	8002f98 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <prvTraceSetObjectState+0x70>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f60:	79ba      	ldrb	r2, [r7, #6]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d903      	bls.n	8002f6e <prvTraceSetObjectState+0x3a>
 8002f66:	4810      	ldr	r0, [pc, #64]	; (8002fa8 <prvTraceSetObjectState+0x74>)
 8002f68:	f000 faa0 	bl	80034ac <prvTraceError>
 8002f6c:	e014      	b.n	8002f98 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <prvTraceSetObjectState+0x70>)
 8002f70:	681c      	ldr	r4, [r3, #0]
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	79bb      	ldrb	r3, [r7, #6]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f8a1 	bl	80030c0 <uiIndexOfObject>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4619      	mov	r1, r3
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <prvTraceSetObjectState+0x70>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f8e:	440b      	add	r3, r1
 8002f90:	4423      	add	r3, r4
 8002f92:	797a      	ldrb	r2, [r7, #5]
 8002f94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0800d510 	.word	0x0800d510
 8002fa4:	20002ee8 	.word	0x20002ee8
 8002fa8:	0800d554 	.word	0x0800d554

08002fac <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	71fb      	strb	r3, [r7, #7]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d904      	bls.n	8002fcc <prvTraceGetObjectState+0x20>
 8002fc2:	4815      	ldr	r0, [pc, #84]	; (8003018 <prvTraceGetObjectState+0x6c>)
 8002fc4:	f000 fa72 	bl	80034ac <prvTraceError>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e021      	b.n	8003010 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <prvTraceGetObjectState+0x70>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd8:	79ba      	ldrb	r2, [r7, #6]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d904      	bls.n	8002fe8 <prvTraceGetObjectState+0x3c>
 8002fde:	4810      	ldr	r0, [pc, #64]	; (8003020 <prvTraceGetObjectState+0x74>)
 8002fe0:	f000 fa64 	bl	80034ac <prvTraceError>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e013      	b.n	8003010 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <prvTraceGetObjectState+0x70>)
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	79fa      	ldrb	r2, [r7, #7]
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f864 	bl	80030c0 <uiIndexOfObject>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <prvTraceGetObjectState+0x70>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4413      	add	r3, r2
 8003004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003008:	440b      	add	r3, r1
 800300a:	4423      	add	r3, r4
 800300c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	0800d590 	.word	0x0800d590
 800301c:	20002ee8 	.word	0x20002ee8
 8003020:	0800d5d4 	.word	0x0800d5d4

08003024 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003036:	79fa      	ldrb	r2, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d903      	bls.n	8003044 <prvTraceSetTaskInstanceFinished+0x20>
 800303c:	480d      	ldr	r0, [pc, #52]	; (8003074 <prvTraceSetTaskInstanceFinished+0x50>)
 800303e:	f000 fa35 	bl	80034ac <prvTraceError>
 8003042:	e011      	b.n	8003068 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003046:	681c      	ldr	r4, [r3, #0]
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	2103      	movs	r1, #3
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f837 	bl	80030c0 <uiIndexOfObject>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800305e:	4413      	add	r3, r2
 8003060:	4423      	add	r3, r4
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20002ee8 	.word	0x20002ee8
 8003074:	0800d610 	.word	0x0800d610

08003078 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <prvTraceNextFreeEventBufferSlot+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	e014      	b.n	80030b4 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <prvTraceNextFreeEventBufferSlot+0x40>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003094:	d304      	bcc.n	80030a0 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003096:	4809      	ldr	r0, [pc, #36]	; (80030bc <prvTraceNextFreeEventBufferSlot+0x44>)
 8003098:	f000 fa08 	bl	80034ac <prvTraceError>
		return NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	e009      	b.n	80030b4 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20002ee8 	.word	0x20002ee8
 80030bc:	0800d658 	.word	0x0800d658

080030c0 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	460a      	mov	r2, r1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d904      	bls.n	80030e0 <uiIndexOfObject+0x20>
 80030d6:	4822      	ldr	r0, [pc, #136]	; (8003160 <uiIndexOfObject+0xa0>)
 80030d8:	f000 f9e8 	bl	80034ac <prvTraceError>
 80030dc:	2300      	movs	r3, #0
 80030de:	e03a      	b.n	8003156 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <uiIndexOfObject+0x38>
 80030e6:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <uiIndexOfObject+0xa4>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	4413      	add	r3, r2
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f2:	79fa      	ldrb	r2, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d904      	bls.n	8003102 <uiIndexOfObject+0x42>
 80030f8:	481b      	ldr	r0, [pc, #108]	; (8003168 <uiIndexOfObject+0xa8>)
 80030fa:	f000 f9d7 	bl	80034ac <prvTraceError>
 80030fe:	2300      	movs	r3, #0
 8003100:	e029      	b.n	8003156 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d822      	bhi.n	800314e <uiIndexOfObject+0x8e>
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01f      	beq.n	800314e <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <uiIndexOfObject+0xa4>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	79bb      	ldrb	r3, [r7, #6]
 8003114:	4413      	add	r3, r2
 8003116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800311a:	79fa      	ldrb	r2, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d816      	bhi.n	800314e <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <uiIndexOfObject+0xa4>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	79bb      	ldrb	r3, [r7, #6]
 8003126:	3338      	adds	r3, #56	; 0x38
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <uiIndexOfObject+0xa4>)
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	79bb      	ldrb	r3, [r7, #6]
 8003134:	440b      	add	r3, r1
 8003136:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800313a:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8003140:	b29b      	uxth	r3, r3
 8003142:	fb11 f303 	smulbb	r3, r1, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	4413      	add	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	e003      	b.n	8003156 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <uiIndexOfObject+0xac>)
 8003150:	f000 f9ac 	bl	80034ac <prvTraceError>
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	0800d680 	.word	0x0800d680
 8003164:	20002ee8 	.word	0x20002ee8
 8003168:	0800d6c0 	.word	0x0800d6c0
 800316c:	0800d700 	.word	0x0800d700

08003170 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800317a:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <prvTraceGetObjectHandle+0x144>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <prvTraceGetObjectHandle+0x1c>
 8003182:	484d      	ldr	r0, [pc, #308]	; (80032b8 <prvTraceGetObjectHandle+0x148>)
 8003184:	f000 f992 	bl	80034ac <prvTraceError>
 8003188:	2300      	movs	r3, #0
 800318a:	e08f      	b.n	80032ac <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d904      	bls.n	800319c <prvTraceGetObjectHandle+0x2c>
 8003192:	484a      	ldr	r0, [pc, #296]	; (80032bc <prvTraceGetObjectHandle+0x14c>)
 8003194:	f000 f98a 	bl	80034ac <prvTraceError>
 8003198:	2300      	movs	r3, #0
 800319a:	e087      	b.n	80032ac <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031a2:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	2301      	movs	r3, #1
 80031a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	bf00      	nop
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <prvTraceGetObjectHandle+0x150>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <prvTraceGetObjectHandle+0x150>)
 80031ba:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	4a41      	ldr	r2, [pc, #260]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 80031c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <prvTraceGetObjectHandle+0x158>)
 80031c8:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <prvTraceGetObjectHandle+0x158>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 80031d0:	4413      	add	r3, r2
 80031d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <prvTraceGetObjectHandle+0x158>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4938      	ldr	r1, [pc, #224]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 80031e4:	3308      	adds	r3, #8
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	440b      	add	r3, r1
 80031ea:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <prvTraceGetObjectHandle+0x158>)
 80031f4:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80031f6:	3201      	adds	r2, #1
 80031f8:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80031fa:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 80031fc:	4413      	add	r3, r2
 80031fe:	460a      	mov	r2, r1
 8003200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003204:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <prvTraceGetObjectHandle+0x158>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 800320a:	4413      	add	r3, r2
 800320c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003210:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 8003216:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	4929      	ldr	r1, [pc, #164]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 800321e:	3310      	adds	r3, #16
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	440b      	add	r3, r1
 8003224:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003226:	429a      	cmp	r2, r3
 8003228:	d90a      	bls.n	8003240 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fdb3 	bl	8001d98 <pszTraceGetErrorNotEnoughHandles>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f939 	bl	80034ac <prvTraceError>
		handle = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e029      	b.n	8003294 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 8003244:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003248:	3201      	adds	r2, #1
 800324a:	b291      	uxth	r1, r2
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 800324e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 8003256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800325a:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 8003260:	3308      	adds	r3, #8
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003268:	1acb      	subs	r3, r1, r3
 800326a:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 8003270:	3318      	adds	r3, #24
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	88db      	ldrh	r3, [r3, #6]
 8003278:	461a      	mov	r2, r3
		if (hndCount >
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	4293      	cmp	r3, r2
 800327e:	dd09      	ble.n	8003294 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003284:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8003286:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <prvTraceGetObjectHandle+0x154>)
 800328a:	3318      	adds	r3, #24
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	460a      	mov	r2, r1
 8003292:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <prvTraceGetObjectHandle+0x150>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3b01      	subs	r3, #1
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <prvTraceGetObjectHandle+0x150>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	bf00      	nop

	return handle;
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20002ee8 	.word	0x20002ee8
 80032b8:	0800cb60 	.word	0x0800cb60
 80032bc:	0800d740 	.word	0x0800d740
 80032c0:	200000b8 	.word	0x200000b8
 80032c4:	2000b55c 	.word	0x2000b55c
 80032c8:	200000cc 	.word	0x200000cc

080032cc <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	460a      	mov	r2, r1
 80032d6:	71fb      	strb	r3, [r7, #7]
 80032d8:	4613      	mov	r3, r2
 80032da:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	79bb      	ldrb	r3, [r7, #6]
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff feec 	bl	80030c0 <uiIndexOfObject>
 80032e8:	4603      	mov	r3, r0
 80032ea:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <prvMarkObjectAsUsed+0x38>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	4413      	add	r3, r2
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20002ee8 	.word	0x20002ee8

08003308 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e010      	b.n	800333c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	441a      	add	r2, r3
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	440b      	add	r3, r1
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d3ea      	bcc.n	800331a <prvStrncpy+0x12>
			break;
	}
}
 8003344:	e000      	b.n	8003348 <prvStrncpy+0x40>
			break;
 8003346:	bf00      	nop
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	603a      	str	r2, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	460b      	mov	r3, r1
 8003362:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <prvTraceSetObjectName+0x1a>
	{
		name = "";
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <prvTraceSetObjectName+0x9c>)
 800336c:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d903      	bls.n	800337c <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8003374:	481f      	ldr	r0, [pc, #124]	; (80033f4 <prvTraceSetObjectName+0xa0>)
 8003376:	f000 f899 	bl	80034ac <prvTraceError>
		return;
 800337a:	e036      	b.n	80033ea <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8003382:	481d      	ldr	r0, [pc, #116]	; (80033f8 <prvTraceSetObjectName+0xa4>)
 8003384:	f000 f892 	bl	80034ac <prvTraceError>
		return;
 8003388:	e02f      	b.n	80033ea <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <prvTraceSetObjectName+0xa8>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	4413      	add	r3, r2
 8003392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003396:	79ba      	ldrb	r2, [r7, #6]
 8003398:	429a      	cmp	r2, r3
 800339a:	d908      	bls.n	80033ae <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fcfa 	bl	8001d98 <pszTraceGetErrorNotEnoughHandles>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f880 	bl	80034ac <prvTraceError>
 80033ac:	e01d      	b.n	80033ea <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80033ae:	79fa      	ldrb	r2, [r7, #7]
 80033b0:	79bb      	ldrb	r3, [r7, #6]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe83 	bl	80030c0 <uiIndexOfObject>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <prvTraceSetObjectName+0xac>)
 80033c0:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <prvTraceSetObjectName+0xb0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <prvTraceSetObjectName+0xa8>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <prvTraceSetObjectName+0xac>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	3388      	adds	r3, #136	; 0x88
 80033d4:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <prvTraceSetObjectName+0xa8>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	4413      	add	r3, r2
 80033de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80033e2:	461a      	mov	r2, r3
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	f7ff ff8f 	bl	8003308 <prvStrncpy>
		}
	}
}
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0800d844 	.word	0x0800d844
 80033f4:	0800d848 	.word	0x0800d848
 80033f8:	0800d878 	.word	0x0800d878
 80033fc:	20002ee8 	.word	0x20002ee8
 8003400:	200000d0 	.word	0x200000d0
 8003404:	2000b554 	.word	0x2000b554

08003408 <prvTraceOpenSymbol>:

traceString prvTraceOpenSymbol(const char* name, traceString userEventChannel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <prvTraceOpenSymbol+0x24>
 8003422:	4820      	ldr	r0, [pc, #128]	; (80034a4 <prvTraceOpenSymbol+0x9c>)
 8003424:	f000 f842 	bl	80034ac <prvTraceError>
 8003428:	2300      	movs	r3, #0
 800342a:	e036      	b.n	800349a <prvTraceOpenSymbol+0x92>

	prvTraceGetChecksum(name, &crc, &len);
 800342c:	f107 020b 	add.w	r2, r7, #11
 8003430:	f107 030a 	add.w	r3, r7, #10
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fb32 	bl	8003aa0 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	613b      	str	r3, [r7, #16]
  return(result);
 8003442:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	bf00      	nop
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <prvTraceOpenSymbol+0xa0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <prvTraceOpenSymbol+0xa0>)
 800345a:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 800345c:	7ab9      	ldrb	r1, [r7, #10]
 800345e:	7afa      	ldrb	r2, [r7, #11]
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f9dc 	bl	8003820 <prvTraceLookupSymbolTableEntry>
 8003468:	4603      	mov	r3, r0
 800346a:	83fb      	strh	r3, [r7, #30]
	if (!result)
 800346c:	8bfb      	ldrh	r3, [r7, #30]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <prvTraceOpenSymbol+0x7a>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8003472:	7ab9      	ldrb	r1, [r7, #10]
 8003474:	7afa      	ldrb	r2, [r7, #11]
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fa4f 	bl	800391c <prvTraceCreateSymbolTableEntry>
 800347e:	4603      	mov	r3, r0
 8003480:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <prvTraceOpenSymbol+0xa0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3b01      	subs	r3, #1
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <prvTraceOpenSymbol+0xa0>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	bf00      	nop

	return result;
 8003498:	8bfb      	ldrh	r3, [r7, #30]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0800d8a8 	.word	0x0800d8a8
 80034a8:	200000b8 	.word	0x200000b8

080034ac <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <prvTraceError+0x50>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <prvTraceError+0x14>
	{
		vTraceStop();
 80034bc:	f7fe fd2e 	bl	8001f1c <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <prvTraceError+0x54>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d115      	bne.n	80034f4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <prvTraceError+0x54>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <prvTraceError+0x50>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <prvTraceError+0x50>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <prvTraceError+0x54>)
 80034e0:	6811      	ldr	r1, [r2, #0]
 80034e2:	2250      	movs	r2, #80	; 0x50
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff0f 	bl	8003308 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <prvTraceError+0x50>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20002ee8 	.word	0x20002ee8
 8003500:	2000b554 	.word	0x2000b554

08003504 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d175      	bne.n	8003608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 800351c:	483e      	ldr	r0, [pc, #248]	; (8003618 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 800351e:	f7ff ffc5 	bl	80034ac <prvTraceError>
 8003522:	e075      	b.n	8003610 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4413      	add	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800353e:	2b98      	cmp	r3, #152	; 0x98
 8003540:	d929      	bls.n	8003596 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003550:	2ba7      	cmp	r3, #167	; 0xa7
 8003552:	d820      	bhi.n	8003596 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003562:	3368      	adds	r3, #104	; 0x68
 8003564:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	441a      	add	r2, r3
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	429a      	cmp	r2, r3
 8003574:	d244      	bcs.n	8003600 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8003582:	4413      	add	r3, r2
 8003584:	1d18      	adds	r0, r3, #4
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	3301      	adds	r3, #1
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	461a      	mov	r2, r3
 800358e:	2100      	movs	r1, #0
 8003590:	f008 fbd6 	bl	800bd40 <memset>
		{
 8003594:	e034      	b.n	8003600 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d12c      	bne.n	8003602 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20d      	bcs.n	80035d2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	2208      	movs	r2, #8
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f008 fbb8 	bl	800bd40 <memset>
 80035d0:	e017      	b.n	8003602 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f603 1354 	addw	r3, r3, #2388	; 0x954
 80035da:	2204      	movs	r2, #4
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f008 fbae 	bl	800bd40 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	2204      	movs	r2, #4
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f008 fba1 	bl	800bd40 <memset>
 80035fe:	e000      	b.n	8003602 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 8003600:	bf00      	nop
			}
		}
		i++;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3301      	adds	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d389      	bcc.n	8003524 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	0800d8d8 	.word	0x0800d8d8
 800361c:	20002ee8 	.word	0x20002ee8

08003620 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <prvTraceUpdateCounters+0x4c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01b      	beq.n	8003666 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <prvTraceUpdateCounters+0x4c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	3201      	adds	r2, #1
 8003636:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <prvTraceUpdateCounters+0x4c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	3201      	adds	r2, #1
 8003640:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <prvTraceUpdateCounters+0x4c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800364c:	d307      	bcc.n	800365e <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <prvTraceUpdateCounters+0x4c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <prvTraceUpdateCounters+0x4c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800365e:	2001      	movs	r0, #1
 8003660:	f7ff ff50 	bl	8003504 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8003664:	e000      	b.n	8003668 <prvTraceUpdateCounters+0x48>
		return;
 8003666:	bf00      	nop
#endif
}
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20002ee8 	.word	0x20002ee8

08003670 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2bff      	cmp	r3, #255	; 0xff
 800368a:	d009      	beq.n	80036a0 <prvTraceGetDTS+0x30>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <prvTraceGetDTS+0x30>
 8003696:	485a      	ldr	r0, [pc, #360]	; (8003800 <prvTraceGetDTS+0x190>)
 8003698:	f7ff ff08 	bl	80034ac <prvTraceError>
 800369c:	2300      	movs	r3, #0
 800369e:	e0ab      	b.n	80037f8 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 80036a0:	4b58      	ldr	r3, [pc, #352]	; (8003804 <prvTraceGetDTS+0x194>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <prvTraceGetDTS+0x198>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80036b2:	4b55      	ldr	r3, [pc, #340]	; (8003808 <prvTraceGetDTS+0x198>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b53      	ldr	r3, [pc, #332]	; (8003804 <prvTraceGetDTS+0x194>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0892      	lsrs	r2, r2, #2
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
 80036be:	e00b      	b.n	80036d8 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <prvTraceGetDTS+0x19c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b52      	ldr	r3, [pc, #328]	; (8003810 <prvTraceGetDTS+0x1a0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d005      	beq.n	80036d8 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <prvTraceGetDTS+0x1a4>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <prvTraceGetDTS+0x194>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0892      	lsrs	r2, r2, #2
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fa5d 	bl	8003b9c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <prvTraceGetDTS+0x1a8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <prvTraceGetDTS+0x1a8>)
 80036f0:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 80036f2:	4b44      	ldr	r3, [pc, #272]	; (8003804 <prvTraceGetDTS+0x194>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d043      	beq.n	8003784 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <prvTraceGetDTS+0x194>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d91d      	bls.n	8003744 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8003708:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <prvTraceGetDTS+0x194>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <prvTraceGetDTS+0x194>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	fbb2 f2f3 	udiv	r2, r2, r3
 800371a:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <prvTraceGetDTS+0x194>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	440a      	add	r2, r1
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8003722:	4b38      	ldr	r3, [pc, #224]	; (8003804 <prvTraceGetDTS+0x194>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <prvTraceGetDTS+0x194>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fbb3 f0f2 	udiv	r0, r3, r2
 8003734:	fb02 f200 	mul.w	r2, r2, r0
 8003738:	1a9a      	subs	r2, r3, r2
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <prvTraceGetDTS+0x194>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	440a      	add	r2, r1
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
 8003742:	e007      	b.n	8003754 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <prvTraceGetDTS+0x194>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800374a:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <prvTraceGetDTS+0x194>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	440a      	add	r2, r1
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <prvTraceGetDTS+0x194>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <prvTraceGetDTS+0x194>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	429a      	cmp	r2, r3
 8003762:	d313      	bcc.n	800378c <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <prvTraceGetDTS+0x194>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	3201      	adds	r2, #1
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800376e:	4b25      	ldr	r3, [pc, #148]	; (8003804 <prvTraceGetDTS+0x194>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003774:	4b23      	ldr	r3, [pc, #140]	; (8003804 <prvTraceGetDTS+0x194>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <prvTraceGetDTS+0x194>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1a8a      	subs	r2, r1, r2
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
 8003782:	e003      	b.n	800378c <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <prvTraceGetDTS+0x194>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d92c      	bls.n	80037ee <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8003794:	f7ff fc70 	bl	8003078 <prvTraceNextFreeEventBufferSlot>
 8003798:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d026      	beq.n	80037ee <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10b      	bne.n	80037c2 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	22a9      	movs	r2, #169	; 0xa9
 80037ae:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	705a      	strb	r2, [r3, #1]
 80037c0:	e013      	b.n	80037ea <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2bff      	cmp	r3, #255	; 0xff
 80037c6:	d10d      	bne.n	80037e4 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	22a8      	movs	r2, #168	; 0xa8
 80037cc:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	0e1b      	lsrs	r3, r3, #24
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	705a      	strb	r2, [r3, #1]
 80037e2:	e002      	b.n	80037ea <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80037e4:	480d      	ldr	r0, [pc, #52]	; (800381c <prvTraceGetDTS+0x1ac>)
 80037e6:	f7ff fe61 	bl	80034ac <prvTraceError>
			}
			prvTraceUpdateCounters();
 80037ea:	f7ff ff19 	bl	8003620 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b29b      	uxth	r3, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800d930 	.word	0x0800d930
 8003804:	20002ee8 	.word	0x20002ee8
 8003808:	200000bc 	.word	0x200000bc
 800380c:	e0001004 	.word	0xe0001004
 8003810:	2000b558 	.word	0x2000b558
 8003814:	20000004 	.word	0x20000004
 8003818:	200000d4 	.word	0x200000d4
 800381c:	0800d970 	.word	0x0800d970

08003820 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceString prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceString chn)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4603      	mov	r3, r0
 8003830:	70fb      	strb	r3, [r7, #3]
 8003832:	460b      	mov	r3, r1
 8003834:	70bb      	strb	r3, [r7, #2]
 8003836:	4613      	mov	r3, r2
 8003838:	803b      	strh	r3, [r7, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 800383a:	4b35      	ldr	r3, [pc, #212]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	889b      	ldrh	r3, [r3, #4]
 800384a:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceString)0);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <prvTraceLookupSymbolTableEntry+0x3c>
 8003852:	4830      	ldr	r0, [pc, #192]	; (8003914 <prvTraceLookupSymbolTableEntry+0xf4>)
 8003854:	f7ff fe2a 	bl	80034ac <prvTraceError>
 8003858:	2300      	movs	r3, #0
 800385a:	e054      	b.n	8003906 <prvTraceLookupSymbolTableEntry+0xe6>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 800385c:	78bb      	ldrb	r3, [r7, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d14b      	bne.n	80038fa <prvTraceLookupSymbolTableEntry+0xda>
 8003862:	482d      	ldr	r0, [pc, #180]	; (8003918 <prvTraceLookupSymbolTableEntry+0xf8>)
 8003864:	f7ff fe22 	bl	80034ac <prvTraceError>
 8003868:	2300      	movs	r3, #0
 800386a:	e04c      	b.n	8003906 <prvTraceLookupSymbolTableEntry+0xe6>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	3302      	adds	r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800387a:	461a      	mov	r2, r3
 800387c:	883b      	ldrh	r3, [r7, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	429a      	cmp	r2, r3
 8003882:	d127      	bne.n	80038d4 <prvTraceLookupSymbolTableEntry+0xb4>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	3303      	adds	r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8003892:	b29a      	uxth	r2, r3
 8003894:	883b      	ldrh	r3, [r7, #0]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	b29b      	uxth	r3, r3
 800389a:	429a      	cmp	r2, r3
 800389c:	d11a      	bne.n	80038d4 <prvTraceLookupSymbolTableEntry+0xb4>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	1d19      	adds	r1, r3, #4
 80038a6:	78bb      	ldrb	r3, [r7, #2]
 80038a8:	440b      	add	r3, r1
 80038aa:	4413      	add	r3, r2
 80038ac:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <prvTraceLookupSymbolTableEntry+0xb4>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	3304      	adds	r3, #4
 80038bc:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	78ba      	ldrb	r2, [r7, #2]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f008 fb35 	bl	800bf38 <strncmp>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <prvTraceLookupSymbolTableEntry+0xe2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	89fb      	ldrh	r3, [r7, #14]
 80038da:	4413      	add	r3, r2
 80038dc:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <prvTraceLookupSymbolTableEntry+0xf0>)
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	3301      	adds	r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	81fb      	strh	r3, [r7, #14]
	while (i != 0)
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1b5      	bne.n	800386c <prvTraceLookupSymbolTableEntry+0x4c>
 8003900:	e000      	b.n	8003904 <prvTraceLookupSymbolTableEntry+0xe4>
						break; /* found */
 8003902:	bf00      	nop
	}
	return i;
 8003904:	89fb      	ldrh	r3, [r7, #14]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20002ee8 	.word	0x20002ee8
 8003914:	0800d994 	.word	0x0800d994
 8003918:	0800d9d0 	.word	0x0800d9d0

0800391c <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceString channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	70fb      	strb	r3, [r7, #3]
 800392e:	460b      	mov	r3, r1
 8003930:	70bb      	strb	r3, [r7, #2]
 8003932:	4613      	mov	r3, r2
 8003934:	803b      	strh	r3, [r7, #0]
	uint16_t ret = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <prvTraceCreateSymbolTableEntry+0x2e>
 8003940:	4853      	ldr	r0, [pc, #332]	; (8003a90 <prvTraceCreateSymbolTableEntry+0x174>)
 8003942:	f7ff fdb3 	bl	80034ac <prvTraceError>
 8003946:	2300      	movs	r3, #0
 8003948:	e09e      	b.n	8003a88 <prvTraceCreateSymbolTableEntry+0x16c>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 800394a:	78bb      	ldrb	r3, [r7, #2]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <prvTraceCreateSymbolTableEntry+0x3e>
 8003950:	4850      	ldr	r0, [pc, #320]	; (8003a94 <prvTraceCreateSymbolTableEntry+0x178>)
 8003952:	f7ff fdab 	bl	80034ac <prvTraceError>
 8003956:	2300      	movs	r3, #0
 8003958:	e096      	b.n	8003a88 <prvTraceCreateSymbolTableEntry+0x16c>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8003962:	78bb      	ldrb	r3, [r7, #2]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800396c:	d305      	bcc.n	800397a <prvTraceCreateSymbolTableEntry+0x5e>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 800396e:	484b      	ldr	r0, [pc, #300]	; (8003a9c <prvTraceCreateSymbolTableEntry+0x180>)
 8003970:	f7ff fd9c 	bl	80034ac <prvTraceError>
		ret = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	81fb      	strh	r3, [r7, #14]
 8003978:	e085      	b.n	8003a86 <prvTraceCreateSymbolTableEntry+0x16a>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	8899      	ldrh	r1, [r3, #4]
		RecorderDataPtr->SymbolTable.symbytes
 800398a:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 800398c:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800398e:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8003996:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8003998:	4413      	add	r3, r2
 800399a:	460a      	mov	r2, r1
 800399c:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80039a0:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	889b      	ldrh	r3, [r3, #4]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 80039b4:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80039b8:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80039c0:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80039c2:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80039c4:	4413      	add	r3, r2
 80039c6:	460a      	mov	r2, r1
 80039c8:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80039d0:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80039d8:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 80039da:	8839      	ldrh	r1, [r7, #0]
 80039dc:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80039de:	4413      	add	r3, r2
 80039e0:	460a      	mov	r2, r1
 80039e2:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 80039e6:	883b      	ldrh	r3, [r7, #0]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80039f8:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 80039fa:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80039fc:	4413      	add	r3, r2
 80039fe:	460a      	mov	r2, r1
 8003a00:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8003a10:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8003a12:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	78ba      	ldrb	r2, [r7, #2]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fc72 	bl	8003308 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
 8003a30:	78bb      	ldrb	r3, [r7, #2]
 8003a32:	440b      	add	r3, r1
 8003a34:	3304      	adds	r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a48:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	b289      	uxth	r1, r1
 8003a4e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	460a      	mov	r2, r1
 8003a58:	809a      	strh	r2, [r3, #4]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8003a62:	78bb      	ldrb	r3, [r7, #2]
 8003a64:	441a      	add	r2, r3
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3205      	adds	r2, #5
 8003a6c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <prvTraceCreateSymbolTableEntry+0x17c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	78bb      	ldrb	r3, [r7, #2]
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8003a86:	89fb      	ldrh	r3, [r7, #14]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	0800da08 	.word	0x0800da08
 8003a94:	0800da44 	.word	0x0800da44
 8003a98:	20002ee8 	.word	0x20002ee8
 8003a9c:	0800da7c 	.word	0x0800da7c

08003aa0 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8003aac:	2301      	movs	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <prvTraceGetChecksum+0x22>
 8003aba:	4819      	ldr	r0, [pc, #100]	; (8003b20 <prvTraceGetChecksum+0x80>)
 8003abc:	f7ff fcf6 	bl	80034ac <prvTraceError>
 8003ac0:	e02b      	b.n	8003b1a <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <prvTraceGetChecksum+0x30>
 8003ac8:	4816      	ldr	r0, [pc, #88]	; (8003b24 <prvTraceGetChecksum+0x84>)
 8003aca:	f7ff fcef 	bl	80034ac <prvTraceError>
 8003ace:	e024      	b.n	8003b1a <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <prvTraceGetChecksum+0x3e>
 8003ad6:	4814      	ldr	r0, [pc, #80]	; (8003b28 <prvTraceGetChecksum+0x88>)
 8003ad8:	f7ff fce8 	bl	80034ac <prvTraceError>
 8003adc:	e01d      	b.n	8003b1a <prvTraceGetChecksum+0x7a>

	if (pname != (const char *) 0)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00f      	beq.n	8003b04 <prvTraceGetChecksum+0x64>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8003ae4:	e006      	b.n	8003af4 <prvTraceGetChecksum+0x54>
		{
			crc += c;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
			length++;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	60fa      	str	r2, [r7, #12]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	75fb      	strb	r3, [r7, #23]
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <prvTraceGetChecksum+0x46>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	701a      	strb	r2, [r3, #0]
}
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0800dac4 	.word	0x0800dac4
 8003b24:	0800daf8 	.word	0x0800daf8
 8003b28:	0800db28 	.word	0x0800db28

08003b2c <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <prvTraceInitCortexM+0x54>)
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <prvTraceInitCortexM+0x58>)
 8003b34:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <prvTraceInitCortexM+0x5c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <prvTraceInitCortexM+0x5c>)
 8003b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <prvTraceInitCortexM+0x5c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8003b4a:	4810      	ldr	r0, [pc, #64]	; (8003b8c <prvTraceInitCortexM+0x60>)
 8003b4c:	f7ff fcae 	bl	80034ac <prvTraceError>
			break;
 8003b50:	e013      	b.n	8003b7a <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <prvTraceInitCortexM+0x64>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <prvTraceInitCortexM+0x68>)
 8003b60:	f7ff fca4 	bl	80034ac <prvTraceError>
			break;
 8003b64:	e009      	b.n	8003b7a <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <prvTraceInitCortexM+0x6c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <prvTraceInitCortexM+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <prvTraceInitCortexM+0x64>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e0001fb0 	.word	0xe0001fb0
 8003b84:	c5acce55 	.word	0xc5acce55
 8003b88:	e000edfc 	.word	0xe000edfc
 8003b8c:	0800db5c 	.word	0x0800db5c
 8003b90:	e0001000 	.word	0xe0001000
 8003b94:	0800db88 	.word	0x0800db88
 8003b98:	e0001004 	.word	0xe0001004

08003b9c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <prvTracePortGetTimeStamp+0x80>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d028      	beq.n	8003c10 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <prvTracePortGetTimeStamp+0x84>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
		return;
 8003bc6:	e023      	b.n	8003c10 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <prvTracePortGetTimeStamp+0x88>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <prvTracePortGetTimeStamp+0x8c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <prvTracePortGetTimeStamp+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <prvTracePortGetTimeStamp+0x90>)
 8003bec:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <prvTracePortGetTimeStamp+0x84>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <prvTracePortGetTimeStamp+0x84>)
 8003bf8:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <prvTracePortGetTimeStamp+0x84>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8003c08:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <prvTracePortGetTimeStamp+0x8c>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e000      	b.n	8003c12 <prvTracePortGetTimeStamp+0x76>
		return;
 8003c10:	bf00      	nop
}
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	200000ac 	.word	0x200000ac
 8003c20:	200000b0 	.word	0x200000b0
 8003c24:	e0001004 	.word	0xe0001004
 8003c28:	200000d8 	.word	0x200000d8
 8003c2c:	200000dc 	.word	0x200000dc

08003c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_Init+0x3c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <HAL_Init+0x3c>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c46:	2003      	movs	r0, #3
 8003c48:	f001 faef 	bl	800522a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fd fd47 	bl	80016e0 <HAL_InitTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	e001      	b.n	8003c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c5e:	f7fd fbeb 	bl	8001438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c62:	79fb      	ldrb	r3, [r7, #7]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	58004000 	.word	0x58004000

08003c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_IncTick+0x20>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_IncTick+0x24>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <HAL_IncTick+0x24>)
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000018 	.word	0x20000018
 8003c94:	2000b5ec 	.word	0x2000b5ec

08003c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_GetTick+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	2000b5ec 	.word	0x2000b5ec

08003cb0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_GetTickPrio+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000014 	.word	0x20000014

08003cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff ffe2 	bl	8003c98 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d005      	beq.n	8003cee <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_Delay+0x44>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003cee:	bf00      	nop
 8003cf0:	f7ff ffd2 	bl	8003c98 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d8f7      	bhi.n	8003cf0 <HAL_Delay+0x28>
    {
    }
  }
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
#endif
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3360      	adds	r3, #96	; 0x60
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <LL_ADC_SetOffset+0x44>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	03fff000 	.word	0x03fff000

08003dc0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3360      	adds	r3, #96	; 0x60
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3360      	adds	r3, #96	; 0x60
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e3a:	2300      	movs	r3, #0
#endif
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3330      	adds	r3, #48	; 0x30
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	4413      	add	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	211f      	movs	r1, #31
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	0e9b      	lsrs	r3, r3, #26
 8003e80:	f003 011f 	and.w	r1, r3, #31
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0e5b      	lsrs	r3, r3, #25
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0d1b      	lsrs	r3, r3, #20
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2107      	movs	r1, #7
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0d1b      	lsrs	r3, r3, #20
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f003 0318 	and.w	r3, r3, #24
 8003f1a:	4908      	ldr	r1, [pc, #32]	; (8003f3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f1c:	40d9      	lsrs	r1, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	400b      	ands	r3, r1
 8003f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	0007ffff 	.word	0x0007ffff

08003f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6093      	str	r3, [r2, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f78:	d101      	bne.n	8003f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc8:	d101      	bne.n	8003fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004018:	f043 0202 	orr.w	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <LL_ADC_IsEnabled+0x18>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <LL_ADC_IsEnabled+0x1a>
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d101      	bne.n	800406a <LL_ADC_IsDisableOngoing+0x18>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <LL_ADC_IsDisableOngoing+0x1a>
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040b4:	f043 0210 	orr.w	r2, r3, #16
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d101      	bne.n	80040e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d101      	bne.n	800412e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e12e      	b.n	80043b8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fd f96f 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff feef 	bl	8003f64 <LL_ADC_IsDeepPowerDownEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fed5 	bl	8003f40 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff0a 	bl	8003fb4 <LL_ADC_IsInternalRegulatorEnabled>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff feee 	bl	8003f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041b0:	4b83      	ldr	r3, [pc, #524]	; (80043c0 <HAL_ADC_Init+0x284>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	4a83      	ldr	r2, [pc, #524]	; (80043c4 <HAL_ADC_Init+0x288>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041c4:	e002      	b.n	80041cc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f9      	bne.n	80041c6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff feec 	bl	8003fb4 <LL_ADC_IsInternalRegulatorEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff60 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 8004208:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80c7 	bne.w	80043a6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 80c3 	bne.w	80043a6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004228:	f043 0202 	orr.w	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fef9 	bl	800402c <LL_ADC_IsEnabled>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004240:	4861      	ldr	r0, [pc, #388]	; (80043c8 <HAL_ADC_Init+0x28c>)
 8004242:	f7ff fef3 	bl	800402c <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4619      	mov	r1, r3
 8004252:	485e      	ldr	r0, [pc, #376]	; (80043cc <HAL_ADC_Init+0x290>)
 8004254:	f7ff fd5c 	bl	8003d10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7e5b      	ldrb	r3, [r3, #25]
 800425c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004262:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004268:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800426e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004276:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8004278:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d106      	bne.n	8004298 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	3b01      	subs	r3, #1
 8004290:	045b      	lsls	r3, r3, #17
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <HAL_ADC_Init+0x294>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fefb 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 80042d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff1c 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 80042de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13d      	bne.n	8004362 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13a      	bne.n	8004362 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004308:	f023 0302 	bic.w	r3, r3, #2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800431c:	2b01      	cmp	r3, #1
 800431e:	d118      	bne.n	8004352 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004342:	430a      	orrs	r2, r1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	611a      	str	r2, [r3, #16]
 8004350:	e007      	b.n	8004362 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10c      	bne.n	8004384 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f023 010f 	bic.w	r1, r3, #15
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
 8004382:	e007      	b.n	8004394 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 020f 	bic.w	r2, r2, #15
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
 80043a4:	e007      	b.n	80043b6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000004 	.word	0x20000004
 80043c4:	053e2d63 	.word	0x053e2d63
 80043c8:	50040000 	.word	0x50040000
 80043cc:	50040300 	.word	0x50040300
 80043d0:	fff0c007 	.word	0xfff0c007

080043d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fe71 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d140      	bne.n	800446e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_Start+0x26>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e03c      	b.n	8004474 <HAL_ADC_Start+0xa0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fd8a 	bl	8004f1c <ADC_Enable>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d128      	bne.n	8004464 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004432:	d106      	bne.n	8004442 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	f023 0206 	bic.w	r2, r3, #6
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	659a      	str	r2, [r3, #88]	; 0x58
 8004440:	e002      	b.n	8004448 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	221c      	movs	r2, #28
 800444e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fe0b 	bl	8004078 <LL_ADC_REG_StartConversion>
 8004462:	e006      	b.n	8004472 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800446c:	e001      	b.n	8004472 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800446e:	2302      	movs	r3, #2
 8004470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Stop+0x16>
 800448e:	2302      	movs	r3, #2
 8004490:	e023      	b.n	80044da <HAL_ADC_Stop+0x5e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800449a:	2103      	movs	r1, #3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fc81 	bl	8004da4 <ADC_ConversionStop>
 80044a2:	4603      	mov	r3, r0
 80044a4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fdaf 	bl	8005010 <ADC_Disable>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_ADC_Stop+0x54>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d102      	bne.n	80044fa <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80044f4:	2308      	movs	r3, #8
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e010      	b.n	800451c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_ADC_PollForConversion+0x36>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e06d      	b.n	80045f4 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004518:	2304      	movs	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800451c:	f7ff fbbc 	bl	8003c98 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004522:	e021      	b.n	8004568 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d01d      	beq.n	8004568 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800452c:	f7ff fbb4 	bl	8003c98 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <HAL_ADC_PollForConversion+0x60>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d112      	bne.n	8004568 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f043 0204 	orr.w	r2, r3, #4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e045      	b.n	80045f4 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0d6      	beq.n	8004524 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fc4b 	bl	8003e22 <LL_ADC_REG_IsTriggerSourceSWStart>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01c      	beq.n	80045cc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7e5b      	ldrb	r3, [r3, #25]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d118      	bne.n	80045cc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d111      	bne.n	80045cc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f043 0201 	orr.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d104      	bne.n	80045dc <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2208      	movs	r2, #8
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e00a      	b.n	80045f2 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <HAL_ADC_PollForConversion+0x110>
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	220c      	movs	r2, #12
 80045f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0b6      	sub	sp, #216	; 0xd8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_ADC_ConfigChannel+0x22>
 8004636:	2302      	movs	r3, #2
 8004638:	e39f      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x762>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fd3e 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8384 	bne.w	8004d5c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	f7ff fbf1 	bl	8003e48 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fd2c 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 8004670:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fd4c 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 800467e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 81a6 	bne.w	80049d8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800468c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 81a1 	bne.w	80049d8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f7ff fbfc 	bl	8003ea0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	08db      	lsrs	r3, r3, #3
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00a      	beq.n	80046e0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046da:	f7ff fb4d 	bl	8003d78 <LL_ADC_SetOffset>
 80046de:	e17b      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fb6a 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_ADC_ConfigChannel+0xf4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fb5f 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004702:	4603      	mov	r3, r0
 8004704:	0e9b      	lsrs	r3, r3, #26
 8004706:	f003 021f 	and.w	r2, r3, #31
 800470a:	e01e      	b.n	800474a <HAL_ADC_ConfigChannel+0x132>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fb54 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004718:	4603      	mov	r3, r0
 800471a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800472a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800472e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800473a:	2320      	movs	r3, #32
 800473c:	e004      	b.n	8004748 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800473e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x14a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	e018      	b.n	8004794 <HAL_ADC_ConfigChannel+0x17c>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800477a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800477e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8004786:	2320      	movs	r3, #32
 8004788:	e004      	b.n	8004794 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800478a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	429a      	cmp	r2, r3
 8004796:	d106      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fb23 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fb07 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x1ba>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fafc 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80047c8:	4603      	mov	r3, r0
 80047ca:	0e9b      	lsrs	r3, r3, #26
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	e01e      	b.n	8004810 <HAL_ADC_ConfigChannel+0x1f8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff faf1 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80047de:	4603      	mov	r3, r0
 80047e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80047f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80047f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e004      	b.n	800480e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8004804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x210>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0e9b      	lsrs	r3, r3, #26
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	e018      	b.n	800485a <HAL_ADC_ConfigChannel+0x242>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800483c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e004      	b.n	800485a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	429a      	cmp	r2, r3
 800485c:	d106      	bne.n	800486c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fac0 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff faa4 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004878:	4603      	mov	r3, r0
 800487a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x280>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2102      	movs	r1, #2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fa99 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	f003 021f 	and.w	r2, r3, #31
 8004896:	e01e      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x2be>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fa8e 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80048be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80048c6:	2320      	movs	r3, #32
 80048c8:	e004      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80048ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x2d6>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	0e9b      	lsrs	r3, r3, #26
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	e016      	b.n	800491c <HAL_ADC_ConfigChannel+0x304>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800490e:	2320      	movs	r3, #32
 8004910:	e004      	b.n	800491c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8004912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	429a      	cmp	r2, r3
 800491e:	d106      	bne.n	800492e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2200      	movs	r2, #0
 8004926:	2102      	movs	r1, #2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fa5f 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2103      	movs	r1, #3
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fa43 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 800493a:	4603      	mov	r3, r0
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_ADC_ConfigChannel+0x342>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2103      	movs	r1, #3
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fa38 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004950:	4603      	mov	r3, r0
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	f003 021f 	and.w	r2, r3, #31
 8004958:	e017      	b.n	800498a <HAL_ADC_ConfigChannel+0x372>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2103      	movs	r1, #3
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fa2d 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004974:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800497c:	2320      	movs	r3, #32
 800497e:	e003      	b.n	8004988 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x38a>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	e011      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x3ae>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e003      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80049be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d106      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2103      	movs	r1, #3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fa0a 	bl	8003dec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fb25 	bl	800402c <LL_ADC_IsEnabled>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 81c2 	bne.w	8004d6e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7ff fa7e 	bl	8003ef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a8e      	ldr	r2, [pc, #568]	; (8004c3c <HAL_ADC_ConfigChannel+0x624>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	f040 8130 	bne.w	8004c68 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x418>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0e9b      	lsrs	r3, r3, #26
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2b09      	cmp	r3, #9
 8004a26:	bf94      	ite	ls
 8004a28:	2301      	movls	r3, #1
 8004a2a:	2300      	movhi	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e019      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x44c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e003      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2b09      	cmp	r3, #9
 8004a5c:	bf94      	ite	ls
 8004a5e:	2301      	movls	r3, #1
 8004a60:	2300      	movhi	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d079      	beq.n	8004b5c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d107      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x46c>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0e9b      	lsrs	r3, r3, #26
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	069b      	lsls	r3, r3, #26
 8004a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a82:	e015      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x498>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	e003      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	069b      	lsls	r3, r3, #26
 8004aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x4b8>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0e9b      	lsrs	r3, r3, #26
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	e017      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x4e8>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	e003      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2101      	movs	r1, #1
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x50e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0e9b      	lsrs	r3, r3, #26
 8004b16:	3301      	adds	r3, #1
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	051b      	lsls	r3, r3, #20
 8004b24:	e018      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x540>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e003      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	e080      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x560>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	3301      	adds	r3, #1
 8004b70:	069b      	lsls	r3, r3, #26
 8004b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b76:	e015      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x58c>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e003      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x5ac>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	e017      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x5dc>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	61fb      	str	r3, [r7, #28]
  return result;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x608>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0e9b      	lsrs	r3, r3, #26
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	3b1e      	subs	r3, #30
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	e01d      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x644>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	613b      	str	r3, [r7, #16]
  return result;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004c38:	2320      	movs	r3, #32
 8004c3a:	e005      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x630>
 8004c3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f003 021f 	and.w	r2, r3, #31
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	3b1e      	subs	r3, #30
 8004c56:	051b      	lsls	r3, r3, #20
 8004c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	6892      	ldr	r2, [r2, #8]
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7ff f91c 	bl	8003ea0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b45      	ldr	r3, [pc, #276]	; (8004d84 <HAL_ADC_ConfigChannel+0x76c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d07c      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c74:	4844      	ldr	r0, [pc, #272]	; (8004d88 <HAL_ADC_ConfigChannel+0x770>)
 8004c76:	f7ff f871 	bl	8003d5c <LL_ADC_GetCommonPathInternalCh>
 8004c7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c7e:	4843      	ldr	r0, [pc, #268]	; (8004d8c <HAL_ADC_ConfigChannel+0x774>)
 8004c80:	f7ff f9d4 	bl	800402c <LL_ADC_IsEnabled>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d15e      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <HAL_ADC_ConfigChannel+0x778>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d127      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x6cc>
 8004c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d121      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a39      	ldr	r2, [pc, #228]	; (8004d8c <HAL_ADC_ConfigChannel+0x774>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d161      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4834      	ldr	r0, [pc, #208]	; (8004d88 <HAL_ADC_ConfigChannel+0x770>)
 8004cb6:	f7ff f83e 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_ADC_ConfigChannel+0x77c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <HAL_ADC_ConfigChannel+0x780>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004cd4:	e002      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f9      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ce2:	e044      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_ADC_ConfigChannel+0x784>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d113      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x6fe>
 8004cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_ADC_ConfigChannel+0x774>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d134      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	481e      	ldr	r0, [pc, #120]	; (8004d88 <HAL_ADC_ConfigChannel+0x770>)
 8004d10:	f7ff f811 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d14:	e02b      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a21      	ldr	r2, [pc, #132]	; (8004da0 <HAL_ADC_ConfigChannel+0x788>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d126      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
 8004d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d120      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <HAL_ADC_ConfigChannel+0x774>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d11b      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4811      	ldr	r0, [pc, #68]	; (8004d88 <HAL_ADC_ConfigChannel+0x770>)
 8004d42:	f7fe fff8 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
 8004d46:	e012      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004d5a:	e008      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004d76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	37d8      	adds	r7, #216	; 0xd8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	80080000 	.word	0x80080000
 8004d88:	50040300 	.word	0x50040300
 8004d8c:	50040000 	.word	0x50040000
 8004d90:	c7520000 	.word	0xc7520000
 8004d94:	20000004 	.word	0x20000004
 8004d98:	053e2d63 	.word	0x053e2d63
 8004d9c:	cb840000 	.word	0xcb840000
 8004da0:	80000001 	.word	0x80000001

08004da4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f984 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 8004dc0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f9a5 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 8004dcc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8098 	beq.w	8004f0c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02a      	beq.n	8004e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7e5b      	ldrb	r3, [r3, #25]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d126      	bne.n	8004e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7e1b      	ldrb	r3, [r3, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d122      	bne.n	8004e40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004dfe:	e014      	b.n	8004e2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4a45      	ldr	r2, [pc, #276]	; (8004f18 <ADC_ConversionStop+0x174>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d90d      	bls.n	8004e24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e074      	b.n	8004f0e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d1e3      	bne.n	8004e00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2240      	movs	r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d014      	beq.n	8004e70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f93c 	bl	80040c8 <LL_ADC_REG_IsConversionOngoing>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f8f9 	bl	8004052 <LL_ADC_IsDisableOngoing>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff f918 	bl	80040a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d014      	beq.n	8004ea0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff f94b 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff f8e1 	bl	8004052 <LL_ADC_IsDisableOngoing>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f927 	bl	80040ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d005      	beq.n	8004eb2 <ADC_ConversionStop+0x10e>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d105      	bne.n	8004eb8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004eac:	230c      	movs	r3, #12
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e005      	b.n	8004ebe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	617b      	str	r3, [r7, #20]
        break;
 8004eb6:	e002      	b.n	8004ebe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	617b      	str	r3, [r7, #20]
        break;
 8004ebc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004ebe:	f7fe feeb 	bl	8003c98 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ec4:	e01b      	b.n	8004efe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ec6:	f7fe fee7 	bl	8003c98 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d914      	bls.n	8004efe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e007      	b.n	8004f0e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1dc      	bne.n	8004ec6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	a33fffff 	.word	0xa33fffff

08004f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff f87d 	bl	800402c <LL_ADC_IsEnabled>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d15e      	bne.n	8004ff6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <ADC_Enable+0xe4>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0210 	orr.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e04a      	b.n	8004ff8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff f838 	bl	8003fdc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f6c:	4825      	ldr	r0, [pc, #148]	; (8005004 <ADC_Enable+0xe8>)
 8004f6e:	f7fe fef5 	bl	8003d5c <LL_ADC_GetCommonPathInternalCh>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00f      	beq.n	8004f9c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7c:	4b22      	ldr	r3, [pc, #136]	; (8005008 <ADC_Enable+0xec>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	4a22      	ldr	r2, [pc, #136]	; (800500c <ADC_Enable+0xf0>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004f8e:	e002      	b.n	8004f96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f9      	bne.n	8004f90 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004f9c:	f7fe fe7c 	bl	8003c98 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fa2:	e021      	b.n	8004fe8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f83f 	bl	800402c <LL_ADC_IsEnabled>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff f80f 	bl	8003fdc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fbe:	f7fe fe6b 	bl	8003c98 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d90d      	bls.n	8004fe8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f043 0210 	orr.w	r2, r3, #16
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d1d6      	bne.n	8004fa4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	8000003f 	.word	0x8000003f
 8005004:	50040300 	.word	0x50040300
 8005008:	20000004 	.word	0x20000004
 800500c:	053e2d63 	.word	0x053e2d63

08005010 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f818 	bl	8004052 <LL_ADC_IsDisableOngoing>
 8005022:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe ffff 	bl	800402c <LL_ADC_IsEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d047      	beq.n	80050c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d144      	bne.n	80050c4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 030d 	and.w	r3, r3, #13
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10c      	bne.n	8005062 <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe ffd9 	bl	8004004 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2203      	movs	r2, #3
 8005058:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800505a:	f7fe fe1d 	bl	8003c98 <HAL_GetTick>
 800505e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005060:	e029      	b.n	80050b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0210 	orr.w	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e023      	b.n	80050c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800507e:	f7fe fe0b 	bl	8003c98 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d914      	bls.n	80050b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0210 	orr.w	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	f043 0201 	orr.w	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e007      	b.n	80050c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1dc      	bne.n	800507e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <__NVIC_SetPriorityGrouping+0x44>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050ec:	4013      	ands	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005102:	4a04      	ldr	r2, [pc, #16]	; (8005114 <__NVIC_SetPriorityGrouping+0x44>)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	60d3      	str	r3, [r2, #12]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <__NVIC_GetPriorityGrouping+0x18>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f003 0307 	and.w	r3, r3, #7
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000ed00 	.word	0xe000ed00

08005134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005142:	2b00      	cmp	r3, #0
 8005144:	db0b      	blt.n	800515e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	f003 021f 	and.w	r2, r3, #31
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <__NVIC_EnableIRQ+0x38>)
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	2001      	movs	r0, #1
 8005156:	fa00 f202 	lsl.w	r2, r0, r2
 800515a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	e000e100 	.word	0xe000e100

08005170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	6039      	str	r1, [r7, #0]
 800517a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005180:	2b00      	cmp	r3, #0
 8005182:	db0a      	blt.n	800519a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	490c      	ldr	r1, [pc, #48]	; (80051bc <__NVIC_SetPriority+0x4c>)
 800518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518e:	0112      	lsls	r2, r2, #4
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	440b      	add	r3, r1
 8005194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005198:	e00a      	b.n	80051b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4908      	ldr	r1, [pc, #32]	; (80051c0 <__NVIC_SetPriority+0x50>)
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	3b04      	subs	r3, #4
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	440b      	add	r3, r1
 80051ae:	761a      	strb	r2, [r3, #24]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	e000e100 	.word	0xe000e100
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b089      	sub	sp, #36	; 0x24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f1c3 0307 	rsb	r3, r3, #7
 80051de:	2b04      	cmp	r3, #4
 80051e0:	bf28      	it	cs
 80051e2:	2304      	movcs	r3, #4
 80051e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d902      	bls.n	80051f4 <NVIC_EncodePriority+0x30>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3b03      	subs	r3, #3
 80051f2:	e000      	b.n	80051f6 <NVIC_EncodePriority+0x32>
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43da      	mvns	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	401a      	ands	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800520c:	f04f 31ff 	mov.w	r1, #4294967295
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	43d9      	mvns	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800521c:	4313      	orrs	r3, r2
         );
}
 800521e:	4618      	mov	r0, r3
 8005220:	3724      	adds	r7, #36	; 0x24
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ff4c 	bl	80050d0 <__NVIC_SetPriorityGrouping>
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800524e:	f7ff ff63 	bl	8005118 <__NVIC_GetPriorityGrouping>
 8005252:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f7ff ffb3 	bl	80051c4 <NVIC_EncodePriority>
 800525e:	4602      	mov	r2, r0
 8005260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff82 	bl	8005170 <__NVIC_SetPriority>
}
 800526c:	bf00      	nop
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff56 	bl	8005134 <__NVIC_EnableIRQ>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e08e      	b.n	80053c0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b47      	ldr	r3, [pc, #284]	; (80053c8 <HAL_DMA_Init+0x138>)
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d80f      	bhi.n	80052ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b45      	ldr	r3, [pc, #276]	; (80053cc <HAL_DMA_Init+0x13c>)
 80052b6:	4413      	add	r3, r2
 80052b8:	4a45      	ldr	r2, [pc, #276]	; (80053d0 <HAL_DMA_Init+0x140>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	009a      	lsls	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a42      	ldr	r2, [pc, #264]	; (80053d4 <HAL_DMA_Init+0x144>)
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
 80052cc:	e00e      	b.n	80052ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b40      	ldr	r3, [pc, #256]	; (80053d8 <HAL_DMA_Init+0x148>)
 80052d6:	4413      	add	r3, r2
 80052d8:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <HAL_DMA_Init+0x140>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	009a      	lsls	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <HAL_DMA_Init+0x14c>)
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8fe 	bl	8005540 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534c:	d102      	bne.n	8005354 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005360:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800536a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_DMA_Init+0x106>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d80c      	bhi.n	8005396 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f91d 	bl	80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e008      	b.n	80053a8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40020407 	.word	0x40020407
 80053cc:	bffdfff8 	.word	0xbffdfff8
 80053d0:	cccccccd 	.word	0xcccccccd
 80053d4:	40020000 	.word	0x40020000
 80053d8:	bffdfbf8 	.word	0xbffdfbf8
 80053dc:	40020400 	.word	0x40020400

080053e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	f003 031c 	and.w	r3, r3, #28
 8005400:	2204      	movs	r2, #4
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d026      	beq.n	800545a <HAL_DMA_IRQHandler+0x7a>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d021      	beq.n	800545a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	f003 021c 	and.w	r2, r3, #28
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	2104      	movs	r1, #4
 8005442:	fa01 f202 	lsl.w	r2, r1, r2
 8005446:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	2b00      	cmp	r3, #0
 800544e:	d071      	beq.n	8005534 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005458:	e06c      	b.n	8005534 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	f003 031c 	and.w	r3, r3, #28
 8005462:	2202      	movs	r2, #2
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02e      	beq.n	80054cc <HAL_DMA_IRQHandler+0xec>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d029      	beq.n	80054cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 020a 	bic.w	r2, r2, #10
 8005494:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 021c 	and.w	r2, r3, #28
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2102      	movs	r1, #2
 80054ac:	fa01 f202 	lsl.w	r2, r1, r2
 80054b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d038      	beq.n	8005534 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80054ca:	e033      	b.n	8005534 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	f003 031c 	and.w	r3, r3, #28
 80054d4:	2208      	movs	r2, #8
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d02a      	beq.n	8005536 <HAL_DMA_IRQHandler+0x156>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d025      	beq.n	8005536 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 020e 	bic.w	r2, r2, #14
 80054f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f003 021c 	and.w	r2, r3, #28
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2101      	movs	r1, #1
 8005508:	fa01 f202 	lsl.w	r2, r1, r2
 800550c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005534:	bf00      	nop
 8005536:	bf00      	nop
}
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d80a      	bhi.n	800556a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005560:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6493      	str	r3, [r2, #72]	; 0x48
 8005568:	e007      	b.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	009a      	lsls	r2, r3, #2
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005574:	4413      	add	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	3b08      	subs	r3, #8
 8005582:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005590:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2201      	movs	r2, #1
 800559a:	409a      	lsls	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40020407 	.word	0x40020407
 80055b0:	4002081c 	.word	0x4002081c
 80055b4:	cccccccd 	.word	0xcccccccd
 80055b8:	40020880 	.word	0x40020880

080055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80055e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2201      	movs	r2, #1
 80055ec:	409a      	lsls	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	1000823f 	.word	0x1000823f
 8005604:	40020940 	.word	0x40020940

08005608 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005616:	e14c      	b.n	80058b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2101      	movs	r1, #1
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 813e 	beq.w	80058ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d00b      	beq.n	8005650 <HAL_GPIO_Init+0x48>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d007      	beq.n	8005650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005644:	2b11      	cmp	r3, #17
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b12      	cmp	r3, #18
 800564e:	d130      	bne.n	80056b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	2203      	movs	r2, #3
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005686:	2201      	movs	r2, #1
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4013      	ands	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	091b      	lsrs	r3, r3, #4
 800569c:	f003 0201 	and.w	r2, r3, #1
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	2203      	movs	r2, #3
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d003      	beq.n	80056f2 <HAL_GPIO_Init+0xea>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b12      	cmp	r3, #18
 80056f0:	d123      	bne.n	800573a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	220f      	movs	r2, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	08da      	lsrs	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3208      	adds	r2, #8
 8005734:	6939      	ldr	r1, [r7, #16]
 8005736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	2203      	movs	r2, #3
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 0203 	and.w	r2, r3, #3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8098 	beq.w	80058ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800577c:	4a54      	ldr	r2, [pc, #336]	; (80058d0 <HAL_GPIO_Init+0x2c8>)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	3302      	adds	r3, #2
 8005784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	220f      	movs	r2, #15
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4013      	ands	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057a6:	d019      	beq.n	80057dc <HAL_GPIO_Init+0x1d4>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <HAL_GPIO_Init+0x2cc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_GPIO_Init+0x1d0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a49      	ldr	r2, [pc, #292]	; (80058d8 <HAL_GPIO_Init+0x2d0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00d      	beq.n	80057d4 <HAL_GPIO_Init+0x1cc>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a48      	ldr	r2, [pc, #288]	; (80058dc <HAL_GPIO_Init+0x2d4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <HAL_GPIO_Init+0x1c8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a47      	ldr	r2, [pc, #284]	; (80058e0 <HAL_GPIO_Init+0x2d8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d101      	bne.n	80057cc <HAL_GPIO_Init+0x1c4>
 80057c8:	2304      	movs	r3, #4
 80057ca:	e008      	b.n	80057de <HAL_GPIO_Init+0x1d6>
 80057cc:	2307      	movs	r3, #7
 80057ce:	e006      	b.n	80057de <HAL_GPIO_Init+0x1d6>
 80057d0:	2303      	movs	r3, #3
 80057d2:	e004      	b.n	80057de <HAL_GPIO_Init+0x1d6>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e002      	b.n	80057de <HAL_GPIO_Init+0x1d6>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_GPIO_Init+0x1d6>
 80057dc:	2300      	movs	r3, #0
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f002 0203 	and.w	r2, r2, #3
 80057e4:	0092      	lsls	r2, r2, #2
 80057e6:	4093      	lsls	r3, r2
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057ee:	4938      	ldr	r1, [pc, #224]	; (80058d0 <HAL_GPIO_Init+0x2c8>)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	3302      	adds	r3, #2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	43db      	mvns	r3, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4013      	ands	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005822:	4a30      	ldr	r2, [pc, #192]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800582a:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 800582c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005850:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005858:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005882:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43db      	mvns	r3, r3
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4013      	ands	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058a6:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <HAL_GPIO_Init+0x2dc>)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f aeab 	bne.w	8005618 <HAL_GPIO_Init+0x10>
  }
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40010000 	.word	0x40010000
 80058d4:	48000400 	.word	0x48000400
 80058d8:	48000800 	.word	0x48000800
 80058dc:	48000c00 	.word	0x48000c00
 80058e0:	48001000 	.word	0x48001000
 80058e4:	58000800 	.word	0x58000800

080058e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	807b      	strh	r3, [r7, #2]
 80058f4:	4613      	mov	r3, r2
 80058f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058f8:	787b      	ldrb	r3, [r7, #1]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058fe:	887a      	ldrh	r2, [r7, #2]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005904:	e002      	b.n	800590c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4013      	ands	r3, r2
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	43d9      	mvns	r1, r3
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	400b      	ands	r3, r1
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	619a      	str	r2, [r3, #24]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e081      	b.n	8005a62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fd96 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800599c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	e006      	b.n	80059d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d104      	bne.n	80059e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	ea42 0103 	orr.w	r1, r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	021a      	lsls	r2, r3, #8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1a      	ldr	r2, [r3, #32]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	461a      	mov	r2, r3
 8005a78:	460b      	mov	r3, r1
 8005a7a:	817b      	strh	r3, [r7, #10]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	f040 80da 	bne.w	8005c42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_I2C_Master_Transmit+0x30>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e0d3      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa4:	f7fe f8f8 	bl	8003c98 <HAL_GetTick>
 8005aa8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2319      	movs	r3, #25
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f8f0 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0be      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2221      	movs	r2, #33	; 0x21
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	893a      	ldrh	r2, [r7, #8]
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2bff      	cmp	r3, #255	; 0xff
 8005af6:	d90e      	bls.n	8005b16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	8979      	ldrh	r1, [r7, #10]
 8005b06:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <HAL_I2C_Master_Transmit+0x1e0>)
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f9e6 	bl	8005ee0 <I2C_TransferConfig>
 8005b14:	e06c      	b.n	8005bf0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_I2C_Master_Transmit+0x1e0>)
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f9d5 	bl	8005ee0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005b36:	e05b      	b.n	8005bf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	6a39      	ldr	r1, [r7, #32]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f8ed 	bl	8005d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e07b      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d034      	beq.n	8005bf0 <HAL_I2C_Master_Transmit+0x184>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d130      	bne.n	8005bf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f87f 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e04d      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d90e      	bls.n	8005bd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	8979      	ldrh	r1, [r7, #10]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f989 	bl	8005ee0 <I2C_TransferConfig>
 8005bce:	e00f      	b.n	8005bf0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	8979      	ldrh	r1, [r7, #10]
 8005be2:	2300      	movs	r3, #0
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f978 	bl	8005ee0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d19e      	bne.n	8005b38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	6a39      	ldr	r1, [r7, #32]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f8cc 	bl	8005d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e01a      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2220      	movs	r2, #32
 8005c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_I2C_Master_Transmit+0x1e4>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	80002000 	.word	0x80002000
 8005c50:	fe00e800 	.word	0xfe00e800

08005c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d103      	bne.n	8005c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d007      	beq.n	8005c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	619a      	str	r2, [r3, #24]
  }
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cac:	e022      	b.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d01e      	beq.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fd ffef 	bl	8003c98 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d113      	bne.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e00f      	b.n	8005d14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d0cd      	beq.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d28:	e02c      	b.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f870 	bl	8005e14 <I2C_IsAcknowledgeFailed>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e02a      	b.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d01e      	beq.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7fd ffa7 	bl	8003c98 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d113      	bne.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e007      	b.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d1cb      	bne.n	8005d2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da8:	e028      	b.n	8005dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f830 	bl	8005e14 <I2C_IsAcknowledgeFailed>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e026      	b.n	8005e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbe:	f7fd ff6b 	bl	8003c98 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d113      	bne.n	8005dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e007      	b.n	8005e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d1cf      	bne.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d151      	bne.n	8005ed2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e2e:	e022      	b.n	8005e76 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d01e      	beq.n	8005e76 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e38:	f7fd ff2e 	bl	8003c98 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d302      	bcc.n	8005e4e <I2C_IsAcknowledgeFailed+0x3a>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d113      	bne.n	8005e76 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e02e      	b.n	8005ed4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d1d5      	bne.n	8005e30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2220      	movs	r2, #32
 8005e92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fedd 	bl	8005c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <I2C_IsAcknowledgeFailed+0xc8>)
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f043 0204 	orr.w	r2, r3, #4
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	fe00e800 	.word	0xfe00e800

08005ee0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	0d5b      	lsrs	r3, r3, #21
 8005efc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <I2C_TransferConfig+0x58>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	43db      	mvns	r3, r3
 8005f06:	ea02 0103 	and.w	r1, r2, r3
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f10:	7a7b      	ldrb	r3, [r7, #9]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	03ff63ff 	.word	0x03ff63ff

08005f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d138      	bne.n	8005fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e032      	b.n	8005fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	; 0x24
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d139      	bne.n	800605c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e033      	b.n	800605e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2224      	movs	r2, #36	; 0x24
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006024:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	e000      	b.n	800605e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
  }
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800606a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606c:	b08b      	sub	sp, #44	; 0x2c
 800606e:	af06      	add	r7, sp, #24
 8006070:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0d7      	b.n	800622c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb fadb 	bl	800164c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2203      	movs	r2, #3
 800609a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 ff2e 	bl	8008f04 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e04c      	b.n	8006148 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3301      	adds	r3, #1
 80060c0:	2201      	movs	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	7bfa      	ldrb	r2, [r7, #15]
 80060d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	b298      	uxth	r0, r3
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	3336      	adds	r3, #54	; 0x36
 80060ec:	4602      	mov	r2, r0
 80060ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	3303      	adds	r3, #3
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006106:	7bfa      	ldrb	r2, [r7, #15]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	3338      	adds	r3, #56	; 0x38
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	440b      	add	r3, r1
 8006128:	333c      	adds	r3, #60	; 0x3c
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	440b      	add	r3, r1
 800613c:	3340      	adds	r3, #64	; 0x40
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	3301      	adds	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d3ad      	bcc.n	80060ae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
 8006156:	e044      	b.n	80061e2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	440b      	add	r3, r1
 8006166:	f203 1369 	addw	r3, r3, #361	; 0x169
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	440b      	add	r3, r1
 800617c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006184:	7bfa      	ldrb	r2, [r7, #15]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	440b      	add	r3, r1
 8006192:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061c6:	7bfa      	ldrb	r2, [r7, #15]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	440b      	add	r3, r1
 80061d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	3301      	adds	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	7bfa      	ldrb	r2, [r7, #15]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3b5      	bcc.n	8006158 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	687e      	ldr	r6, [r7, #4]
 80061f4:	466d      	mov	r5, sp
 80061f6:	f106 0410 	add.w	r4, r6, #16
 80061fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	1d33      	adds	r3, r6, #4
 8006204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006206:	6838      	ldr	r0, [r7, #0]
 8006208:	f002 fe97 	bl	8008f3a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d102      	bne.n	800622a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f805 	bl	8006234 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006234 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006258:	b29b      	uxth	r3, r3
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800626c:	b29b      	uxth	r3, r3
 800626e:	f043 0302 	orr.w	r3, r3, #2
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	58000400 	.word	0x58000400

080062a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	58000400 	.word	0x58000400

080062c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d6:	d101      	bne.n	80062dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <LL_RCC_HSE_Enable>:
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <LL_RCC_HSE_Disable>:
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006318:	6013      	str	r3, [r2, #0]
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <LL_RCC_HSE_IsReady>:
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006336:	d101      	bne.n	800633c <LL_RCC_HSE_IsReady+0x18>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <LL_RCC_HSE_IsReady+0x1a>
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LL_RCC_HSI_Enable>:
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800634c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	6013      	str	r3, [r2, #0]
}
 800635c:	bf00      	nop
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_HSI_Disable>:
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_RCC_HSI_IsReady>:
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006396:	d101      	bne.n	800639c <LL_RCC_HSI_IsReady+0x18>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <LL_RCC_HSI_IsReady+0x1a>
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	061b      	lsls	r3, r3, #24
 80063be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063c2:	4313      	orrs	r3, r2
 80063c4:	604b      	str	r3, [r1, #4]
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <LL_RCC_HSI48_Enable>:
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_HSI48_Disable>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <LL_RCC_HSI48_IsReady>:
{
 8006416:	b480      	push	{r7}
 8006418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d101      	bne.n	800642e <LL_RCC_HSI48_IsReady+0x18>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <LL_RCC_HSI48_IsReady+0x1a>
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <LL_RCC_LSE_Enable>:
{
 800643a:	b480      	push	{r7}
 800643c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800643e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <LL_RCC_LSE_Disable>:
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006474:	bf00      	nop
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_RCC_LSE_EnableBypass>:
{
 800647e:	b480      	push	{r7}
 8006480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006496:	bf00      	nop
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <LL_RCC_LSE_DisableBypass>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b0:	f023 0304 	bic.w	r3, r3, #4
 80064b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d101      	bne.n	80064da <LL_RCC_LSE_IsReady+0x18>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <LL_RCC_LSE_IsReady+0x1a>
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80064e6:	b480      	push	{r7}
 80064e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80064ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80064fe:	bf00      	nop
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800650c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800652e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d101      	bne.n	8006542 <LL_RCC_LSI1_IsReady+0x18>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <LL_RCC_LSI1_IsReady+0x1a>
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800654e:	b480      	push	{r7}
 8006550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655e:	f043 0304 	orr.w	r3, r3, #4
 8006562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006566:	bf00      	nop
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800657c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006588:	bf00      	nop
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006592:	b480      	push	{r7}
 8006594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d101      	bne.n	80065aa <LL_RCC_LSI2_IsReady+0x18>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <LL_RCC_LSI2_IsReady+0x1a>
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80065be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	6013      	str	r3, [r2, #0]
}
 80065f8:	bf00      	nop
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6013      	str	r3, [r2, #0]
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d101      	bne.n	8006636 <LL_RCC_MSI_IsReady+0x16>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <LL_RCC_MSI_IsReady+0x18>
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800664a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2bb0      	cmp	r3, #176	; 0xb0
 8006680:	d901      	bls.n	8006686 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006682:	23b0      	movs	r3, #176	; 0xb0
 8006684:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006686:	687b      	ldr	r3, [r7, #4]
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800669c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ae:	4313      	orrs	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f023 0203 	bic.w	r2, r3, #3
 80066d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	608b      	str	r3, [r1, #8]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80066e6:	b480      	push	{r7}
 80066e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 030c 	and.w	r3, r3, #12
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800672e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006732:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800675a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006762:	f023 020f 	bic.w	r2, r3, #15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80067b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80067d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80067ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006802:	b480      	push	{r7}
 8006804:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800681e:	b480      	push	{r7}
 8006820:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800682c:	4618      	mov	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006836:	b480      	push	{r7}
 8006838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800683a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800685c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006860:	6013      	str	r3, [r2, #0]
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800688e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800689c:	d101      	bne.n	80068a2 <LL_RCC_PLL_IsReady+0x18>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <LL_RCC_PLL_IsReady+0x1a>
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80068ae:	b480      	push	{r7}
 80068b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	0a1b      	lsrs	r3, r3, #8
 80068ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80068be:	4618      	mov	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f003 0303 	and.w	r3, r3, #3
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006922:	d101      	bne.n	8006928 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006948:	d101      	bne.n	800694e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696e:	d101      	bne.n	8006974 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006992:	d101      	bne.n	8006998 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069b6:	d101      	bne.n	80069bc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b08d      	sub	sp, #52	; 0x34
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e37e      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8092 	beq.w	8006b0c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e8:	f7ff fe7d 	bl	80066e6 <LL_RCC_GetSysClkSource>
 80069ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ee:	f7ff ff83 	bl	80068f8 <LL_RCC_PLL_GetMainSource>
 80069f2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_RCC_OscConfig+0x3e>
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b0c      	cmp	r3, #12
 80069fe:	d14c      	bne.n	8006a9a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d149      	bne.n	8006a9a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a06:	f7ff fe0b 	bl	8006620 <LL_RCC_MSI_IsReady>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_OscConfig+0x54>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e35d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a20:	f7ff fe23 	bl	800666a <LL_RCC_MSI_GetRange>
 8006a24:	4603      	mov	r3, r0
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d914      	bls.n	8006a54 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fd74 	bl	800751c <RCC_SetFlashLatencyFromMSIRange>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e34c      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fdfd 	bl	8006642 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fe21 	bl	8006694 <LL_RCC_MSI_SetCalibTrimming>
 8006a52:	e013      	b.n	8006a7c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fdf2 	bl	8006642 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fe16 	bl	8006694 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fd55 	bl	800751c <RCC_SetFlashLatencyFromMSIRange>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e32d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a7c:	f000 fcdc 	bl	8007438 <HAL_RCC_GetHCLKFreq>
 8006a80:	4603      	mov	r3, r0
 8006a82:	4ab3      	ldr	r2, [pc, #716]	; (8006d50 <HAL_RCC_OscConfig+0x388>)
 8006a84:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a86:	4bb3      	ldr	r3, [pc, #716]	; (8006d54 <HAL_RCC_OscConfig+0x38c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fa fe28 	bl	80016e0 <HAL_InitTick>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d039      	beq.n	8006b0a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e31e      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01e      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006aa2:	f7ff fd9f 	bl	80065e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006aa6:	f7fd f8f7 	bl	8003c98 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aae:	f7fd f8f3 	bl	8003c98 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e30b      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ac0:	f7ff fdae 	bl	8006620 <LL_RCC_MSI_IsReady>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f1      	beq.n	8006aae <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fdb7 	bl	8006642 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fddb 	bl	8006694 <LL_RCC_MSI_SetCalibTrimming>
 8006ade:	e015      	b.n	8006b0c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006ae0:	f7ff fd8f 	bl	8006602 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ae4:	f7fd f8d8 	bl	8003c98 <HAL_GetTick>
 8006ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aec:	f7fd f8d4 	bl	8003c98 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e2ec      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006afe:	f7ff fd8f 	bl	8006620 <LL_RCC_MSI_IsReady>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f1      	bne.n	8006aec <HAL_RCC_OscConfig+0x124>
 8006b08:	e000      	b.n	8006b0c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d04e      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b18:	f7ff fde5 	bl	80066e6 <LL_RCC_GetSysClkSource>
 8006b1c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b1e:	f7ff feeb 	bl	80068f8 <LL_RCC_PLL_GetMainSource>
 8006b22:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d005      	beq.n	8006b36 <HAL_RCC_OscConfig+0x16e>
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	d10d      	bne.n	8006b4c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d10a      	bne.n	8006b4c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b36:	f7ff fbf5 	bl	8006324 <LL_RCC_HSE_IsReady>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d039      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x1ec>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d135      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e2c5      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b54:	d102      	bne.n	8006b5c <HAL_RCC_OscConfig+0x194>
 8006b56:	f7ff fbc7 	bl	80062e8 <LL_RCC_HSE_Enable>
 8006b5a:	e001      	b.n	8006b60 <HAL_RCC_OscConfig+0x198>
 8006b5c:	f7ff fbd3 	bl	8006306 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d012      	beq.n	8006b8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b68:	f7fd f896 	bl	8003c98 <HAL_GetTick>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b70:	f7fd f892 	bl	8003c98 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b64      	cmp	r3, #100	; 0x64
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e2aa      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b82:	f7ff fbcf 	bl	8006324 <LL_RCC_HSE_IsReady>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f1      	beq.n	8006b70 <HAL_RCC_OscConfig+0x1a8>
 8006b8c:	e013      	b.n	8006bb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8e:	f7fd f883 	bl	8003c98 <HAL_GetTick>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b96:	f7fd f87f 	bl	8003c98 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b64      	cmp	r3, #100	; 0x64
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e297      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006ba8:	f7ff fbbc 	bl	8006324 <LL_RCC_HSE_IsReady>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f1      	bne.n	8006b96 <HAL_RCC_OscConfig+0x1ce>
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d051      	beq.n	8006c66 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc2:	f7ff fd90 	bl	80066e6 <LL_RCC_GetSysClkSource>
 8006bc6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bc8:	f7ff fe96 	bl	80068f8 <LL_RCC_PLL_GetMainSource>
 8006bcc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_OscConfig+0x218>
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b0c      	cmp	r3, #12
 8006bd8:	d113      	bne.n	8006c02 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d110      	bne.n	8006c02 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be0:	f7ff fbd0 	bl	8006384 <LL_RCC_HSI_IsReady>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x22e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e270      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fbd4 	bl	80063a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c00:	e031      	b.n	8006c66 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d019      	beq.n	8006c3e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c0a:	f7ff fb9d 	bl	8006348 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fd f843 	bl	8003c98 <HAL_GetTick>
 8006c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fd f83f 	bl	8003c98 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e257      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c28:	f7ff fbac 	bl	8006384 <LL_RCC_HSI_IsReady>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f1      	beq.n	8006c16 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fbb6 	bl	80063a8 <LL_RCC_HSI_SetCalibTrimming>
 8006c3c:	e013      	b.n	8006c66 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c3e:	f7ff fb92 	bl	8006366 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c42:	f7fd f829 	bl	8003c98 <HAL_GetTick>
 8006c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c4a:	f7fd f825 	bl	8003c98 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e23d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c5c:	f7ff fb92 	bl	8006384 <LL_RCC_HSI_IsReady>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f1      	bne.n	8006c4a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80a3 	beq.w	8006dc6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d076      	beq.n	8006d76 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d046      	beq.n	8006d22 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006c94:	f7ff fc49 	bl	800652a <LL_RCC_LSI1_IsReady>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d113      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006c9e:	f7ff fc22 	bl	80064e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ca2:	f7fc fff9 	bl	8003c98 <HAL_GetTick>
 8006ca6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006caa:	f7fc fff5 	bl	8003c98 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e20d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006cbc:	f7ff fc35 	bl	800652a <LL_RCC_LSI1_IsReady>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f1      	beq.n	8006caa <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006cc6:	f7ff fc42 	bl	800654e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fc ffe5 	bl	8003c98 <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006cd2:	f7fc ffe1 	bl	8003c98 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e1f9      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006ce4:	f7ff fc55 	bl	8006592 <LL_RCC_LSI2_IsReady>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f1      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fc5f 	bl	80065b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006cf8:	f7ff fc06 	bl	8006508 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fc ffcc 	bl	8003c98 <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d04:	f7fc ffc8 	bl	8003c98 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e1e0      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d16:	f7ff fc08 	bl	800652a <LL_RCC_LSI1_IsReady>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f1      	bne.n	8006d04 <HAL_RCC_OscConfig+0x33c>
 8006d20:	e051      	b.n	8006dc6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006d22:	f7ff fbe0 	bl	80064e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d26:	f7fc ffb7 	bl	8003c98 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d2e:	f7fc ffb3 	bl	8003c98 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e1cb      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d40:	f7ff fbf3 	bl	800652a <LL_RCC_LSI1_IsReady>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f1      	beq.n	8006d2e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006d4a:	f7ff fc11 	bl	8006570 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d4e:	e00c      	b.n	8006d6a <HAL_RCC_OscConfig+0x3a2>
 8006d50:	20000004 	.word	0x20000004
 8006d54:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d58:	f7fc ff9e 	bl	8003c98 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e1b6      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d6a:	f7ff fc12 	bl	8006592 <LL_RCC_LSI2_IsReady>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f1      	bne.n	8006d58 <HAL_RCC_OscConfig+0x390>
 8006d74:	e027      	b.n	8006dc6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006d76:	f7ff fbfb 	bl	8006570 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7a:	f7fc ff8d 	bl	8003c98 <HAL_GetTick>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d82:	f7fc ff89 	bl	8003c98 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e1a1      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006d94:	f7ff fbfd 	bl	8006592 <LL_RCC_LSI2_IsReady>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f1      	bne.n	8006d82 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006d9e:	f7ff fbb3 	bl	8006508 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da2:	f7fc ff79 	bl	8003c98 <HAL_GetTick>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006daa:	f7fc ff75 	bl	8003c98 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e18d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006dbc:	f7ff fbb5 	bl	800652a <LL_RCC_LSI1_IsReady>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f1      	bne.n	8006daa <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d05b      	beq.n	8006e8a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd2:	4bb5      	ldr	r3, [pc, #724]	; (80070a8 <HAL_RCC_OscConfig+0x6e0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d114      	bne.n	8006e08 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006dde:	f7ff fa53 	bl	8006288 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de2:	f7fc ff59 	bl	8003c98 <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dea:	f7fc ff55 	bl	8003c98 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e16d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfc:	4baa      	ldr	r3, [pc, #680]	; (80070a8 <HAL_RCC_OscConfig+0x6e0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCC_OscConfig+0x44e>
 8006e10:	f7ff fb13 	bl	800643a <LL_RCC_LSE_Enable>
 8006e14:	e00c      	b.n	8006e30 <HAL_RCC_OscConfig+0x468>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d104      	bne.n	8006e28 <HAL_RCC_OscConfig+0x460>
 8006e1e:	f7ff fb2e 	bl	800647e <LL_RCC_LSE_EnableBypass>
 8006e22:	f7ff fb0a 	bl	800643a <LL_RCC_LSE_Enable>
 8006e26:	e003      	b.n	8006e30 <HAL_RCC_OscConfig+0x468>
 8006e28:	f7ff fb18 	bl	800645c <LL_RCC_LSE_Disable>
 8006e2c:	f7ff fb38 	bl	80064a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d014      	beq.n	8006e62 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e38:	f7fc ff2e 	bl	8003c98 <HAL_GetTick>
 8006e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e3e:	e00a      	b.n	8006e56 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e40:	f7fc ff2a 	bl	8003c98 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e140      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e56:	f7ff fb34 	bl	80064c2 <LL_RCC_LSE_IsReady>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0ef      	beq.n	8006e40 <HAL_RCC_OscConfig+0x478>
 8006e60:	e013      	b.n	8006e8a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e62:	f7fc ff19 	bl	8003c98 <HAL_GetTick>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e68:	e00a      	b.n	8006e80 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6a:	f7fc ff15 	bl	8003c98 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e12b      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e80:	f7ff fb1f 	bl	80064c2 <LL_RCC_LSE_IsReady>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1ef      	bne.n	8006e6a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d02c      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d014      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e9e:	f7ff fa98 	bl	80063d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7fc fef9 	bl	8003c98 <HAL_GetTick>
 8006ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eaa:	f7fc fef5 	bl	8003c98 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e10d      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ebc:	f7ff faab 	bl	8006416 <LL_RCC_HSI48_IsReady>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f1      	beq.n	8006eaa <HAL_RCC_OscConfig+0x4e2>
 8006ec6:	e013      	b.n	8006ef0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ec8:	f7ff fa94 	bl	80063f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fc fee4 	bl	8003c98 <HAL_GetTick>
 8006ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ed4:	f7fc fee0 	bl	8003c98 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e0f8      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ee6:	f7ff fa96 	bl	8006416 <LL_RCC_HSI48_IsReady>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f1      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80ee 	beq.w	80070d6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efa:	f7ff fbf4 	bl	80066e6 <LL_RCC_GetSysClkSource>
 8006efe:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	f040 80af 	bne.w	8007070 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0203 	and.w	r2, r3, #3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d123      	bne.n	8006f68 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d11c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d114      	bne.n	8006f68 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d10d      	bne.n	8006f68 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d106      	bne.n	8006f68 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d05d      	beq.n	8007024 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b0c      	cmp	r3, #12
 8006f6c:	d058      	beq.n	8007020 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0ab      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f80:	f7ff fc74 	bl	800686c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f84:	f7fc fe88 	bl	8003c98 <HAL_GetTick>
 8006f88:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fc fe84 	bl	8003c98 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e09c      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1ef      	bne.n	8006f8c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	4b3e      	ldr	r3, [pc, #248]	; (80070ac <HAL_RCC_OscConfig+0x6e4>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fbe:	4311      	orrs	r1, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fc4:	0212      	lsls	r2, r2, #8
 8006fc6:	4311      	orrs	r1, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fcc:	4311      	orrs	r1, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fd2:	4311      	orrs	r1, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006fe2:	f7ff fc34 	bl	800684e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ff6:	f7fc fe4f 	bl	8003c98 <HAL_GetTick>
 8006ffa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffe:	f7fc fe4b 	bl	8003c98 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e063      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0ef      	beq.n	8006ffe <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800701e:	e05a      	b.n	80070d6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e059      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d151      	bne.n	80070d6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007032:	f7ff fc0c 	bl	800684e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007044:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007046:	f7fc fe27 	bl	8003c98 <HAL_GetTick>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800704e:	f7fc fe23 	bl	8003c98 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e03b      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ef      	beq.n	800704e <HAL_RCC_OscConfig+0x686>
 800706e:	e032      	b.n	80070d6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b0c      	cmp	r3, #12
 8007074:	d02d      	beq.n	80070d2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007076:	f7ff fbf9 	bl	800686c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800707a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800708a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007094:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709e:	f7fc fdfb 	bl	8003c98 <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a4:	e00d      	b.n	80070c2 <HAL_RCC_OscConfig+0x6fa>
 80070a6:	bf00      	nop
 80070a8:	58000400 	.word	0x58000400
 80070ac:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b0:	f7fc fdf2 	bl	8003c98 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1ef      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6e8>
 80070d0:	e001      	b.n	80070d6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3734      	adds	r7, #52	; 0x34
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}

080070e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e12d      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070f4:	4b98      	ldr	r3, [pc, #608]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d91b      	bls.n	800713a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007102:	4b95      	ldr	r3, [pc, #596]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 0207 	bic.w	r2, r3, #7
 800710a:	4993      	ldr	r1, [pc, #588]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	4313      	orrs	r3, r2
 8007110:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007112:	f7fc fdc1 	bl	8003c98 <HAL_GetTick>
 8007116:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007118:	e008      	b.n	800712c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800711a:	f7fc fdbd 	bl	8003c98 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e111      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800712c:	4b8a      	ldr	r3, [pc, #552]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d1ef      	bne.n	800711a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fad7 	bl	80066fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007150:	f7fc fda2 	bl	8003c98 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007156:	e008      	b.n	800716a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007158:	f7fc fd9e 	bl	8003c98 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e0f2      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800716a:	f7ff fbd1 	bl	8006910 <LL_RCC_IsActiveFlag_HPRE>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f1      	beq.n	8007158 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d016      	beq.n	80071ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff face 	bl	8006726 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800718a:	f7fc fd85 	bl	8003c98 <HAL_GetTick>
 800718e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007192:	f7fc fd81 	bl	8003c98 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e0d5      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80071a4:	f7ff fbc6 	bl	8006934 <LL_RCC_IsActiveFlag_C2HPRE>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f1      	beq.n	8007192 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fac7 	bl	8006752 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071c4:	f7fc fd68 	bl	8003c98 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80071cc:	f7fc fd64 	bl	8003c98 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e0b8      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80071de:	f7ff fbbc 	bl	800695a <LL_RCC_IsActiveFlag_SHDHPRE>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0f1      	beq.n	80071cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d016      	beq.n	8007222 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff fac1 	bl	8006780 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071fe:	f7fc fd4b 	bl	8003c98 <HAL_GetTick>
 8007202:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007206:	f7fc fd47 	bl	8003c98 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e09b      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007218:	f7ff fbb2 	bl	8006980 <LL_RCC_IsActiveFlag_PPRE1>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f1      	beq.n	8007206 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d017      	beq.n	800725e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fab7 	bl	80067a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800723a:	f7fc fd2d 	bl	8003c98 <HAL_GetTick>
 800723e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007242:	f7fc fd29 	bl	8003c98 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e07d      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007254:	f7ff fba6 	bl	80069a4 <LL_RCC_IsActiveFlag_PPRE2>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f1      	beq.n	8007242 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d043      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d106      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007272:	f7ff f857 	bl	8006324 <LL_RCC_HSE_IsReady>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11e      	bne.n	80072ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e067      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b03      	cmp	r3, #3
 8007286:	d106      	bne.n	8007296 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007288:	f7ff faff 	bl	800688a <LL_RCC_PLL_IsReady>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d113      	bne.n	80072ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e05c      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800729e:	f7ff f9bf 	bl	8006620 <LL_RCC_MSI_IsReady>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d108      	bne.n	80072ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e051      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80072ac:	f7ff f86a 	bl	8006384 <LL_RCC_HSI_IsReady>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e04a      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f9fd 	bl	80066be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c4:	f7fc fce8 	bl	8003c98 <HAL_GetTick>
 80072c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ca:	e00a      	b.n	80072e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072cc:	f7fc fce4 	bl	8003c98 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072da:	4293      	cmp	r3, r2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e036      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e2:	f7ff fa00 	bl	80066e6 <LL_RCC_GetSysClkSource>
 80072e6:	4602      	mov	r2, r0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d1ec      	bne.n	80072cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f2:	4b19      	ldr	r3, [pc, #100]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d21b      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007300:	4b15      	ldr	r3, [pc, #84]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f023 0207 	bic.w	r2, r3, #7
 8007308:	4913      	ldr	r1, [pc, #76]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	4313      	orrs	r3, r2
 800730e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007310:	f7fc fcc2 	bl	8003c98 <HAL_GetTick>
 8007314:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	e008      	b.n	800732a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007318:	f7fc fcbe 	bl	8003c98 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e012      	b.n	8007350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <HAL_RCC_ClockConfig+0x278>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d1ef      	bne.n	8007318 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007338:	f000 f87e 	bl	8007438 <HAL_RCC_GetHCLKFreq>
 800733c:	4603      	mov	r3, r0
 800733e:	4a07      	ldr	r2, [pc, #28]	; (800735c <HAL_RCC_ClockConfig+0x27c>)
 8007340:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007342:	f7fc fcb5 	bl	8003cb0 <HAL_GetTickPrio>
 8007346:	4603      	mov	r3, r0
 8007348:	4618      	mov	r0, r3
 800734a:	f7fa f9c9 	bl	80016e0 <HAL_InitTick>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58004000 	.word	0x58004000
 800735c:	20000004 	.word	0x20000004

08007360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007360:	b590      	push	{r4, r7, lr}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007366:	f7ff f9be 	bl	80066e6 <LL_RCC_GetSysClkSource>
 800736a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007372:	f7ff f97a 	bl	800666a <LL_RCC_MSI_GetRange>
 8007376:	4603      	mov	r3, r0
 8007378:	091b      	lsrs	r3, r3, #4
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	4a2b      	ldr	r2, [pc, #172]	; (800742c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e04b      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b04      	cmp	r3, #4
 800738c:	d102      	bne.n	8007394 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800738e:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e045      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d10a      	bne.n	80073b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800739a:	f7fe ff93 	bl	80062c4 <LL_RCC_HSE_IsEnabledDiv2>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d102      	bne.n	80073aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80073a4:	4b22      	ldr	r3, [pc, #136]	; (8007430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e03a      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e037      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80073b0:	f7ff faa2 	bl	80068f8 <LL_RCC_PLL_GetMainSource>
 80073b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d003      	beq.n	80073c4 <HAL_RCC_GetSysClockFreq+0x64>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d003      	beq.n	80073ca <HAL_RCC_GetSysClockFreq+0x6a>
 80073c2:	e00d      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80073c4:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80073c6:	60bb      	str	r3, [r7, #8]
        break;
 80073c8:	e015      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80073ca:	f7fe ff7b 	bl	80062c4 <LL_RCC_HSE_IsEnabledDiv2>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d102      	bne.n	80073da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80073d4:	4b16      	ldr	r3, [pc, #88]	; (8007430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80073d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80073d8:	e00d      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80073da:	4b16      	ldr	r3, [pc, #88]	; (8007434 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073dc:	60bb      	str	r3, [r7, #8]
        break;
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80073e0:	f7ff f943 	bl	800666a <LL_RCC_MSI_GetRange>
 80073e4:	4603      	mov	r3, r0
 80073e6:	091b      	lsrs	r3, r3, #4
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	4a0f      	ldr	r2, [pc, #60]	; (800742c <HAL_RCC_GetSysClockFreq+0xcc>)
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	60bb      	str	r3, [r7, #8]
        break;
 80073f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80073f6:	f7ff fa5a 	bl	80068ae <LL_RCC_PLL_GetN>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	fb03 f402 	mul.w	r4, r3, r2
 8007402:	f7ff fa6d 	bl	80068e0 <LL_RCC_PLL_GetDivider>
 8007406:	4603      	mov	r3, r0
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	3301      	adds	r3, #1
 800740c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007410:	f7ff fa5a 	bl	80068c8 <LL_RCC_PLL_GetR>
 8007414:	4603      	mov	r3, r0
 8007416:	0f5b      	lsrs	r3, r3, #29
 8007418:	3301      	adds	r3, #1
 800741a:	fbb4 f3f3 	udiv	r3, r4, r3
 800741e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007420:	68fb      	ldr	r3, [r7, #12]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}
 800742a:	bf00      	nop
 800742c:	0800dc48 	.word	0x0800dc48
 8007430:	00f42400 	.word	0x00f42400
 8007434:	01e84800 	.word	0x01e84800

08007438 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007438:	b598      	push	{r3, r4, r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800743c:	f7ff ff90 	bl	8007360 <HAL_RCC_GetSysClockFreq>
 8007440:	4604      	mov	r4, r0
 8007442:	f7ff f9c5 	bl	80067d0 <LL_RCC_GetAHBPrescaler>
 8007446:	4603      	mov	r3, r0
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	4a03      	ldr	r2, [pc, #12]	; (800745c <HAL_RCC_GetHCLKFreq+0x24>)
 8007450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007454:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd98      	pop	{r3, r4, r7, pc}
 800745c:	0800dbe8 	.word	0x0800dbe8

08007460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007460:	b598      	push	{r3, r4, r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007464:	f7ff ffe8 	bl	8007438 <HAL_RCC_GetHCLKFreq>
 8007468:	4604      	mov	r4, r0
 800746a:	f7ff f9d8 	bl	800681e <LL_RCC_GetAPB1Prescaler>
 800746e:	4603      	mov	r3, r0
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	4a04      	ldr	r2, [pc, #16]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007484:	4618      	mov	r0, r3
 8007486:	bd98      	pop	{r3, r4, r7, pc}
 8007488:	0800dc28 	.word	0x0800dc28

0800748c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800748c:	b598      	push	{r3, r4, r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007490:	f7ff ffd2 	bl	8007438 <HAL_RCC_GetHCLKFreq>
 8007494:	4604      	mov	r4, r0
 8007496:	f7ff f9ce 	bl	8006836 <LL_RCC_GetAPB2Prescaler>
 800749a:	4603      	mov	r3, r0
 800749c:	0adb      	lsrs	r3, r3, #11
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	bd98      	pop	{r3, r4, r7, pc}
 80074b4:	0800dc28 	.word	0x0800dc28

080074b8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	226f      	movs	r2, #111	; 0x6f
 80074c6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80074c8:	f7ff f90d 	bl	80066e6 <LL_RCC_GetSysClkSource>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80074d2:	f7ff f97d 	bl	80067d0 <LL_RCC_GetAHBPrescaler>
 80074d6:	4602      	mov	r2, r0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80074dc:	f7ff f99f 	bl	800681e <LL_RCC_GetAPB1Prescaler>
 80074e0:	4602      	mov	r2, r0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80074e6:	f7ff f9a6 	bl	8006836 <LL_RCC_GetAPB2Prescaler>
 80074ea:	4602      	mov	r2, r0
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80074f0:	f7ff f97a 	bl	80067e8 <LL_C2_RCC_GetAHBPrescaler>
 80074f4:	4602      	mov	r2, r0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80074fa:	f7ff f982 	bl	8006802 <LL_RCC_GetAHB4Prescaler>
 80074fe:	4602      	mov	r2, r0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <HAL_RCC_GetClockConfig+0x60>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0207 	and.w	r2, r3, #7
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	601a      	str	r2, [r3, #0]
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58004000 	.word	0x58004000

0800751c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2bb0      	cmp	r3, #176	; 0xb0
 8007528:	d903      	bls.n	8007532 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e007      	b.n	8007542 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007542:	f7ff f95e 	bl	8006802 <LL_RCC_GetAHB4Prescaler>
 8007546:	4603      	mov	r3, r0
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	4a0d      	ldr	r2, [pc, #52]	; (8007584 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	fbb2 f3f3 	udiv	r3, r2, r3
 800755a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	0c9c      	lsrs	r4, r3, #18
 8007566:	f7fe fe9f 	bl	80062a8 <HAL_PWREx_GetVoltageRange>
 800756a:	4603      	mov	r3, r0
 800756c:	4619      	mov	r1, r3
 800756e:	4620      	mov	r0, r4
 8007570:	f000 f80c 	bl	800758c <RCC_SetFlashLatency>
 8007574:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}
 800757e:	bf00      	nop
 8007580:	0800dc48 	.word	0x0800dc48
 8007584:	0800dbe8 	.word	0x0800dbe8
 8007588:	431bde83 	.word	0x431bde83

0800758c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b093      	sub	sp, #76	; 0x4c
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007596:	4b39      	ldr	r3, [pc, #228]	; (800767c <RCC_SetFlashLatency+0xf0>)
 8007598:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800759c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800759e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80075a2:	4a37      	ldr	r2, [pc, #220]	; (8007680 <RCC_SetFlashLatency+0xf4>)
 80075a4:	f107 031c 	add.w	r3, r7, #28
 80075a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80075aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80075ae:	4b35      	ldr	r3, [pc, #212]	; (8007684 <RCC_SetFlashLatency+0xf8>)
 80075b0:	f107 040c 	add.w	r4, r7, #12
 80075b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80075ba:	2300      	movs	r3, #0
 80075bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d11c      	bne.n	8007600 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ca:	e015      	b.n	80075f8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075d4:	4413      	add	r3, r2
 80075d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d808      	bhi.n	80075f2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075e8:	4413      	add	r3, r2
 80075ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80075f0:	e022      	b.n	8007638 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80075f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f4:	3301      	adds	r3, #1
 80075f6:	643b      	str	r3, [r7, #64]	; 0x40
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d9e6      	bls.n	80075cc <RCC_SetFlashLatency+0x40>
 80075fe:	e01b      	b.n	8007638 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007604:	e015      	b.n	8007632 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800760e:	4413      	add	r3, r2
 8007610:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	429a      	cmp	r2, r3
 8007618:	d808      	bhi.n	800762c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800761a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007622:	4413      	add	r3, r2
 8007624:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800762a:	e005      	b.n	8007638 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762e:	3301      	adds	r3, #1
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	2b02      	cmp	r3, #2
 8007636:	d9e6      	bls.n	8007606 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007638:	4b13      	ldr	r3, [pc, #76]	; (8007688 <RCC_SetFlashLatency+0xfc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f023 0207 	bic.w	r2, r3, #7
 8007640:	4911      	ldr	r1, [pc, #68]	; (8007688 <RCC_SetFlashLatency+0xfc>)
 8007642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007644:	4313      	orrs	r3, r2
 8007646:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007648:	f7fc fb26 	bl	8003c98 <HAL_GetTick>
 800764c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800764e:	e008      	b.n	8007662 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007650:	f7fc fb22 	bl	8003c98 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e007      	b.n	8007672 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <RCC_SetFlashLatency+0xfc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766c:	429a      	cmp	r2, r3
 800766e:	d1ef      	bne.n	8007650 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	374c      	adds	r7, #76	; 0x4c
 8007676:	46bd      	mov	sp, r7
 8007678:	bd90      	pop	{r4, r7, pc}
 800767a:	bf00      	nop
 800767c:	0800dbb4 	.word	0x0800dbb4
 8007680:	0800dbc4 	.word	0x0800dbc4
 8007684:	0800dbd0 	.word	0x0800dbd0
 8007688:	58004000 	.word	0x58004000

0800768c <LL_RCC_LSE_IsEnabled>:
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <LL_RCC_LSE_IsEnabled+0x18>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <LL_RCC_LSE_IsReady>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80076b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d101      	bne.n	80076c8 <LL_RCC_LSE_IsReady+0x18>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <LL_RCC_LSE_IsReady+0x1a>
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_RCC_MSI_EnablePLLMode>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80076d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e2:	f043 0304 	orr.w	r3, r3, #4
 80076e6:	6013      	str	r3, [r2, #0]
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <LL_RCC_SetRFWKPClockSource>:
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80076fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <LL_RCC_SetSMPSClockSource>:
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	f023 0203 	bic.w	r2, r3, #3
 8007730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4313      	orrs	r3, r2
 8007738:	624b      	str	r3, [r1, #36]	; 0x24
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <LL_RCC_SetSMPSPrescaler>:
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800774e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4313      	orrs	r3, r2
 8007760:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <LL_RCC_SetUSARTClockSource>:
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	f023 0203 	bic.w	r2, r3, #3
 8007782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <LL_RCC_SetLPUARTClockSource>:
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80077a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <LL_RCC_SetI2CClockSource>:
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	091b      	lsrs	r3, r3, #4
 80077da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80077de:	43db      	mvns	r3, r3
 80077e0:	401a      	ands	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80077ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <LL_RCC_SetLPTIMClockSource>:
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	0c1b      	lsrs	r3, r3, #16
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	43db      	mvns	r3, r3
 8007818:	401a      	ands	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <LL_RCC_SetSAIClockSource>:
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800783c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <LL_RCC_SetRNGClockSource>:
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <LL_RCC_SetCLK48ClockSource>:
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_SetUSBClockSource>:
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff ffe3 	bl	800788c <LL_RCC_SetCLK48ClockSource>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <LL_RCC_SetADCClockSource>:
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80078d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <LL_RCC_SetRTCClockSource>:
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800790e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <LL_RCC_GetRTCClockSource>:
{
 8007926:	b480      	push	{r7}
 8007928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800792a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <LL_RCC_ForceBackupDomainReset>:
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007962:	b480      	push	{r7}
 8007964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800797a:	bf00      	nop
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <LL_RCC_PLLSAI1_Enable>:
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <LL_RCC_PLLSAI1_Disable>:
{
 80079a2:	b480      	push	{r7}
 80079a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80079a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079b4:	6013      	str	r3, [r2, #0]
}
 80079b6:	bf00      	nop
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <LL_RCC_PLLSAI1_IsReady>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80079c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d2:	d101      	bne.n	80079d8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <LL_RCC_PLLSAI1_IsReady+0x1a>
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80079ec:	2300      	movs	r3, #0
 80079ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80079f0:	2300      	movs	r3, #0
 80079f2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d034      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a08:	d021      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a0e:	d81b      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a14:	d01d      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a1a:	d815      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a24:	d110      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a34:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007a36:	e00d      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f94d 	bl	8007cdc <RCCEx_PLLSAI1_ConfigNP>
 8007a42:	4603      	mov	r3, r0
 8007a44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007a46:	e005      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	77fb      	strb	r3, [r7, #31]
        break;
 8007a4c:	e002      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a54:	7ffb      	ldrb	r3, [r7, #31]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fee8 	bl	8007834 <LL_RCC_SetSAIClockSource>
 8007a64:	e001      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
 8007a68:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d046      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007a76:	f7ff ff56 	bl	8007926 <LL_RCC_GetRTCClockSource>
 8007a7a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d03c      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007a86:	f7fe fbff 	bl	8006288 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff ff30 	bl	80078fa <LL_RCC_SetRTCClockSource>
 8007a9a:	e02e      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007aa6:	f7ff ff4b 	bl	8007940 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007aaa:	f7ff ff5a 	bl	8007962 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007ac6:	f7ff fde1 	bl	800768c <LL_RCC_LSE_IsEnabled>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d114      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ad0:	f7fc f8e2 	bl	8003c98 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007ad6:	e00b      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad8:	f7fc f8de 	bl	8003c98 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d902      	bls.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	77fb      	strb	r3, [r7, #31]
              break;
 8007aee:	e004      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007af0:	f7ff fdde 	bl	80076b0 <LL_RCC_LSE_IsReady>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d1ee      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007afa:	7ffb      	ldrb	r3, [r7, #31]
 8007afc:	77bb      	strb	r3, [r7, #30]
 8007afe:	e001      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	7ffb      	ldrb	r3, [r7, #31]
 8007b02:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff fe2a 	bl	800776e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fe35 	bl	800779a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fe5d 	bl	8007800 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fe52 	bl	8007800 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fe2a 	bl	80077c6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fe1f 	bl	80077c6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d022      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fe8d 	bl	80078b8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc0:	d10b      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f8e3 	bl	8007d92 <RCCEx_PLLSAI1_ConfigNQ>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007bd0:	7ffb      	ldrb	r3, [r7, #31]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8007bd6:	7ffb      	ldrb	r3, [r7, #31]
 8007bd8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d02b      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d008      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fe2a 	bl	8007860 <LL_RCC_SetRNGClockSource>
 8007c0c:	e00a      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7ff fe21 	bl	8007860 <LL_RCC_SetRNGClockSource>
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fe34 	bl	800788c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007c2c:	d107      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d022      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff fe3d 	bl	80078ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c76:	d10b      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f8e3 	bl	8007e48 <RCCEx_PLLSAI1_ConfigNR>
 8007c82:	4603      	mov	r3, r0
 8007c84:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fd26 	bl	80076f2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fd45 	bl	8007746 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff fd2c 	bl	800771e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8007cc6:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007cd4:	f7ff fcfe 	bl	80076d4 <LL_RCC_MSI_EnablePLLMode>
}
 8007cd8:	bf00      	nop
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007ce8:	f7ff fe5b 	bl	80079a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cec:	f7fb ffd4 	bl	8003c98 <HAL_GetTick>
 8007cf0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cf2:	e009      	b.n	8007d08 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cf4:	f7fb ffd0 	bl	8003c98 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d902      	bls.n	8007d08 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
      break;
 8007d06:	e004      	b.n	8007d12 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007d08:	f7ff fe5a 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d137      	bne.n	8007d88 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d42:	4313      	orrs	r3, r2
 8007d44:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007d46:	f7ff fe1d 	bl	8007984 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d4a:	f7fb ffa5 	bl	8003c98 <HAL_GetTick>
 8007d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d50:	e009      	b.n	8007d66 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d52:	f7fb ffa1 	bl	8003c98 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d902      	bls.n	8007d66 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	73fb      	strb	r3, [r7, #15]
        break;
 8007d64:	e004      	b.n	8007d70 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d66:	f7ff fe2b 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d1f0      	bne.n	8007d52 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d108      	bne.n	8007d88 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d84:	4313      	orrs	r3, r2
 8007d86:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007d9e:	f7ff fe00 	bl	80079a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007da2:	f7fb ff79 	bl	8003c98 <HAL_GetTick>
 8007da6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007da8:	e009      	b.n	8007dbe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007daa:	f7fb ff75 	bl	8003c98 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d902      	bls.n	8007dbe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	73fb      	strb	r3, [r7, #15]
      break;
 8007dbc:	e004      	b.n	8007dc8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007dbe:	f7ff fdff 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f0      	bne.n	8007daa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d137      	bne.n	8007e3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007dfc:	f7ff fdc2 	bl	8007984 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e00:	f7fb ff4a 	bl	8003c98 <HAL_GetTick>
 8007e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e06:	e009      	b.n	8007e1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e08:	f7fb ff46 	bl	8003c98 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d902      	bls.n	8007e1c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	73fb      	strb	r3, [r7, #15]
        break;
 8007e1a:	e004      	b.n	8007e26 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e1c:	f7ff fdd0 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d1f0      	bne.n	8007e08 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d108      	bne.n	8007e3e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e54:	f7ff fda5 	bl	80079a2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e58:	f7fb ff1e 	bl	8003c98 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e5e:	e009      	b.n	8007e74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e60:	f7fb ff1a 	bl	8003c98 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d902      	bls.n	8007e74 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
      break;
 8007e72:	e004      	b.n	8007e7e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e74:	f7ff fda4 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d137      	bne.n	8007ef4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007eb2:	f7ff fd67 	bl	8007984 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb6:	f7fb feef 	bl	8003c98 <HAL_GetTick>
 8007eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ebc:	e009      	b.n	8007ed2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ebe:	f7fb feeb 	bl	8003c98 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d902      	bls.n	8007ed2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	73fb      	strb	r3, [r7, #15]
        break;
 8007ed0:	e004      	b.n	8007edc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ed2:	f7ff fd75 	bl	80079c0 <LL_RCC_PLLSAI1_IsReady>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d1f0      	bne.n	8007ebe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e095      	b.n	800803c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f20:	d009      	beq.n	8007f36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	61da      	str	r2, [r3, #28]
 8007f28:	e005      	b.n	8007f36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7f9 fad9 	bl	8001508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f6c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f76:	d902      	bls.n	8007f7e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e002      	b.n	8007f84 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f8c:	d007      	beq.n	8007f9e <HAL_SPI_Init+0xa0>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f96:	d002      	beq.n	8007f9e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	ea42 0103 	orr.w	r1, r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f003 0204 	and.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0310 	and.w	r3, r3, #16
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800801a:	ea42 0103 	orr.w	r1, r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e049      	b.n	80080ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f841 	bl	80080f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f000 f9d6 	bl	8008434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	d001      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e036      	b.n	800818e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a17      	ldr	r2, [pc, #92]	; (800819c <HAL_TIM_Base_Start_IT+0x94>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x44>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814a:	d115      	bne.n	8008178 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <HAL_TIM_Base_Start_IT+0x98>)
 8008154:	4013      	ands	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d015      	beq.n	800818a <HAL_TIM_Base_Start_IT+0x82>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d011      	beq.n	800818a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	e008      	b.n	800818a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	e000      	b.n	800818c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	00010007 	.word	0x00010007

080081a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d122      	bne.n	8008200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0202 	mvn.w	r2, #2
 80081d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f905 	bl	80083f6 <HAL_TIM_IC_CaptureCallback>
 80081ec:	e005      	b.n	80081fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8f7 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f908 	bl	800840a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b04      	cmp	r3, #4
 800820c:	d122      	bne.n	8008254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b04      	cmp	r3, #4
 800821a:	d11b      	bne.n	8008254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0204 	mvn.w	r2, #4
 8008224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8db 	bl	80083f6 <HAL_TIM_IC_CaptureCallback>
 8008240:	e005      	b.n	800824e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8cd 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8de 	bl	800840a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b08      	cmp	r3, #8
 8008260:	d122      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b08      	cmp	r3, #8
 800826e:	d11b      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0208 	mvn.w	r2, #8
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2204      	movs	r2, #4
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8b1 	bl	80083f6 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f8a3 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8b4 	bl	800840a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d122      	bne.n	80082fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d11b      	bne.n	80082fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0210 	mvn.w	r2, #16
 80082cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2208      	movs	r2, #8
 80082d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f887 	bl	80083f6 <HAL_TIM_IC_CaptureCallback>
 80082e8:	e005      	b.n	80082f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f879 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f88a 	bl	800840a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b01      	cmp	r3, #1
 8008308:	d10e      	bne.n	8008328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b01      	cmp	r3, #1
 8008316:	d107      	bne.n	8008328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0201 	mvn.w	r2, #1
 8008320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7f9 f826 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b80      	cmp	r3, #128	; 0x80
 8008334:	d10e      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008340:	2b80      	cmp	r3, #128	; 0x80
 8008342:	d107      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800834c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f8de 	bl	8008510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008362:	d10e      	bne.n	8008382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836e:	2b80      	cmp	r3, #128	; 0x80
 8008370:	d107      	bne.n	8008382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800837a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8d1 	bl	8008524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d10e      	bne.n	80083ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d107      	bne.n	80083ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f838 	bl	800841e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d10e      	bne.n	80083da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d107      	bne.n	80083da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f06f 0220 	mvn.w	r2, #32
 80083d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f891 	bl	80084fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a2a      	ldr	r2, [pc, #168]	; (80084f0 <TIM_Base_SetConfig+0xbc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d003      	beq.n	8008454 <TIM_Base_SetConfig+0x20>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008452:	d108      	bne.n	8008466 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a21      	ldr	r2, [pc, #132]	; (80084f0 <TIM_Base_SetConfig+0xbc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_Base_SetConfig+0x52>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008474:	d007      	beq.n	8008486 <TIM_Base_SetConfig+0x52>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <TIM_Base_SetConfig+0xc0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_Base_SetConfig+0x52>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a1d      	ldr	r2, [pc, #116]	; (80084f8 <TIM_Base_SetConfig+0xc4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d108      	bne.n	8008498 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a0c      	ldr	r2, [pc, #48]	; (80084f0 <TIM_Base_SetConfig+0xbc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_Base_SetConfig+0xa0>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0b      	ldr	r2, [pc, #44]	; (80084f4 <TIM_Base_SetConfig+0xc0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_Base_SetConfig+0xa0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a0a      	ldr	r2, [pc, #40]	; (80084f8 <TIM_Base_SetConfig+0xc4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d103      	bne.n	80084dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	615a      	str	r2, [r3, #20]
}
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800

080084fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <LL_RCC_GetUSARTClockSource>:
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008544:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4013      	ands	r3, r2
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <LL_RCC_GetLPUARTClockSource>:
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008564:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4013      	ands	r3, r2
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e042      	b.n	8008610 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7f9 f825 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2224      	movs	r2, #36	; 0x24
 80085a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 0201 	bic.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f82c 	bl	8008618 <UART_SetConfig>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e022      	b.n	8008610 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa26 	bl	8008a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0201 	orr.w	r2, r2, #1
 8008606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 faad 	bl	8008b68 <UART_CheckIdleState>
 800860e:	4603      	mov	r3, r0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008618:	b5b0      	push	{r4, r5, r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	431a      	orrs	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	431a      	orrs	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	4313      	orrs	r3, r2
 800863a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4ba3      	ldr	r3, [pc, #652]	; (80088d0 <UART_SetConfig+0x2b8>)
 8008644:	4013      	ands	r3, r2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	69f9      	ldr	r1, [r7, #28]
 800864c:	430b      	orrs	r3, r1
 800864e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a98      	ldr	r2, [pc, #608]	; (80088d4 <UART_SetConfig+0x2bc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d004      	beq.n	8008680 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	4313      	orrs	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800868a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	69f9      	ldr	r1, [r7, #28]
 8008694:	430b      	orrs	r3, r1
 8008696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f023 010f 	bic.w	r1, r3, #15
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a89      	ldr	r2, [pc, #548]	; (80088d8 <UART_SetConfig+0x2c0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d120      	bne.n	80086fa <UART_SetConfig+0xe2>
 80086b8:	2003      	movs	r0, #3
 80086ba:	f7ff ff3d 	bl	8008538 <LL_RCC_GetUSARTClockSource>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d817      	bhi.n	80086f4 <UART_SetConfig+0xdc>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <UART_SetConfig+0xb4>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086e3 	.word	0x080086e3
 80086d8:	080086ef 	.word	0x080086ef
 80086dc:	2301      	movs	r3, #1
 80086de:	76fb      	strb	r3, [r7, #27]
 80086e0:	e038      	b.n	8008754 <UART_SetConfig+0x13c>
 80086e2:	2302      	movs	r3, #2
 80086e4:	76fb      	strb	r3, [r7, #27]
 80086e6:	e035      	b.n	8008754 <UART_SetConfig+0x13c>
 80086e8:	2304      	movs	r3, #4
 80086ea:	76fb      	strb	r3, [r7, #27]
 80086ec:	e032      	b.n	8008754 <UART_SetConfig+0x13c>
 80086ee:	2308      	movs	r3, #8
 80086f0:	76fb      	strb	r3, [r7, #27]
 80086f2:	e02f      	b.n	8008754 <UART_SetConfig+0x13c>
 80086f4:	2310      	movs	r3, #16
 80086f6:	76fb      	strb	r3, [r7, #27]
 80086f8:	e02c      	b.n	8008754 <UART_SetConfig+0x13c>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a75      	ldr	r2, [pc, #468]	; (80088d4 <UART_SetConfig+0x2bc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d125      	bne.n	8008750 <UART_SetConfig+0x138>
 8008704:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008708:	f7ff ff26 	bl	8008558 <LL_RCC_GetLPUARTClockSource>
 800870c:	4603      	mov	r3, r0
 800870e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008712:	d017      	beq.n	8008744 <UART_SetConfig+0x12c>
 8008714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008718:	d817      	bhi.n	800874a <UART_SetConfig+0x132>
 800871a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871e:	d00b      	beq.n	8008738 <UART_SetConfig+0x120>
 8008720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008724:	d811      	bhi.n	800874a <UART_SetConfig+0x132>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <UART_SetConfig+0x11a>
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872e:	d006      	beq.n	800873e <UART_SetConfig+0x126>
 8008730:	e00b      	b.n	800874a <UART_SetConfig+0x132>
 8008732:	2300      	movs	r3, #0
 8008734:	76fb      	strb	r3, [r7, #27]
 8008736:	e00d      	b.n	8008754 <UART_SetConfig+0x13c>
 8008738:	2302      	movs	r3, #2
 800873a:	76fb      	strb	r3, [r7, #27]
 800873c:	e00a      	b.n	8008754 <UART_SetConfig+0x13c>
 800873e:	2304      	movs	r3, #4
 8008740:	76fb      	strb	r3, [r7, #27]
 8008742:	e007      	b.n	8008754 <UART_SetConfig+0x13c>
 8008744:	2308      	movs	r3, #8
 8008746:	76fb      	strb	r3, [r7, #27]
 8008748:	e004      	b.n	8008754 <UART_SetConfig+0x13c>
 800874a:	2310      	movs	r3, #16
 800874c:	76fb      	strb	r3, [r7, #27]
 800874e:	e001      	b.n	8008754 <UART_SetConfig+0x13c>
 8008750:	2310      	movs	r3, #16
 8008752:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a5e      	ldr	r2, [pc, #376]	; (80088d4 <UART_SetConfig+0x2bc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	f040 808b 	bne.w	8008876 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008760:	7efb      	ldrb	r3, [r7, #27]
 8008762:	2b08      	cmp	r3, #8
 8008764:	d823      	bhi.n	80087ae <UART_SetConfig+0x196>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x154>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008791 	.word	0x08008791
 8008770:	080087af 	.word	0x080087af
 8008774:	08008799 	.word	0x08008799
 8008778:	080087af 	.word	0x080087af
 800877c:	0800879f 	.word	0x0800879f
 8008780:	080087af 	.word	0x080087af
 8008784:	080087af 	.word	0x080087af
 8008788:	080087af 	.word	0x080087af
 800878c:	080087a7 	.word	0x080087a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008790:	f7fe fe66 	bl	8007460 <HAL_RCC_GetPCLK1Freq>
 8008794:	6178      	str	r0, [r7, #20]
        break;
 8008796:	e00f      	b.n	80087b8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008798:	4b50      	ldr	r3, [pc, #320]	; (80088dc <UART_SetConfig+0x2c4>)
 800879a:	617b      	str	r3, [r7, #20]
        break;
 800879c:	e00c      	b.n	80087b8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879e:	f7fe fddf 	bl	8007360 <HAL_RCC_GetSysClockFreq>
 80087a2:	6178      	str	r0, [r7, #20]
        break;
 80087a4:	e008      	b.n	80087b8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087aa:	617b      	str	r3, [r7, #20]
        break;
 80087ac:	e004      	b.n	80087b8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	76bb      	strb	r3, [r7, #26]
        break;
 80087b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 811a 	beq.w	80089f4 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	4a46      	ldr	r2, [pc, #280]	; (80088e0 <UART_SetConfig+0x2c8>)
 80087c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ca:	461a      	mov	r2, r3
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	4413      	add	r3, r2
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d305      	bcc.n	80087f0 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d902      	bls.n	80087f6 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	76bb      	strb	r3, [r7, #26]
 80087f4:	e0fe      	b.n	80089f4 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f04f 0100 	mov.w	r1, #0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	4a37      	ldr	r2, [pc, #220]	; (80088e0 <UART_SetConfig+0x2c8>)
 8008804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008808:	b29a      	uxth	r2, r3
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	f7f7 fd27 	bl	8000260 <__aeabi_uldivmod>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4610      	mov	r0, r2
 8008818:	4619      	mov	r1, r3
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	020b      	lsls	r3, r1, #8
 8008824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008828:	0202      	lsls	r2, r0, #8
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	6849      	ldr	r1, [r1, #4]
 800882e:	0849      	lsrs	r1, r1, #1
 8008830:	4608      	mov	r0, r1
 8008832:	f04f 0100 	mov.w	r1, #0
 8008836:	1814      	adds	r4, r2, r0
 8008838:	eb43 0501 	adc.w	r5, r3, r1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	461a      	mov	r2, r3
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f7 fd09 	bl	8000260 <__aeabi_uldivmod>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4613      	mov	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885c:	d308      	bcc.n	8008870 <UART_SetConfig+0x258>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008864:	d204      	bcs.n	8008870 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	60da      	str	r2, [r3, #12]
 800886e:	e0c1      	b.n	80089f4 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	76bb      	strb	r3, [r7, #26]
 8008874:	e0be      	b.n	80089f4 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800887e:	d16a      	bne.n	8008956 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008880:	7efb      	ldrb	r3, [r7, #27]
 8008882:	3b01      	subs	r3, #1
 8008884:	2b07      	cmp	r3, #7
 8008886:	d82d      	bhi.n	80088e4 <UART_SetConfig+0x2cc>
 8008888:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <UART_SetConfig+0x278>)
 800888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888e:	bf00      	nop
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088e5 	.word	0x080088e5
 800889c:	080088bf 	.word	0x080088bf
 80088a0:	080088e5 	.word	0x080088e5
 80088a4:	080088e5 	.word	0x080088e5
 80088a8:	080088e5 	.word	0x080088e5
 80088ac:	080088c7 	.word	0x080088c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b0:	f7fe fdec 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 80088b4:	6178      	str	r0, [r7, #20]
        break;
 80088b6:	e01a      	b.n	80088ee <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <UART_SetConfig+0x2c4>)
 80088ba:	617b      	str	r3, [r7, #20]
        break;
 80088bc:	e017      	b.n	80088ee <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088be:	f7fe fd4f 	bl	8007360 <HAL_RCC_GetSysClockFreq>
 80088c2:	6178      	str	r0, [r7, #20]
        break;
 80088c4:	e013      	b.n	80088ee <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ca:	617b      	str	r3, [r7, #20]
        break;
 80088cc:	e00f      	b.n	80088ee <UART_SetConfig+0x2d6>
 80088ce:	bf00      	nop
 80088d0:	cfff69f3 	.word	0xcfff69f3
 80088d4:	40008000 	.word	0x40008000
 80088d8:	40013800 	.word	0x40013800
 80088dc:	00f42400 	.word	0x00f42400
 80088e0:	0800dc88 	.word	0x0800dc88
      default:
        pclk = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	76bb      	strb	r3, [r7, #26]
        break;
 80088ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d07f      	beq.n	80089f4 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	4a48      	ldr	r2, [pc, #288]	; (8008a1c <UART_SetConfig+0x404>)
 80088fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088fe:	461a      	mov	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	fbb3 f3f2 	udiv	r3, r3, r2
 8008906:	005a      	lsls	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	441a      	add	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	fbb2 f3f3 	udiv	r3, r2, r3
 8008918:	b29b      	uxth	r3, r3
 800891a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d916      	bls.n	8008950 <UART_SetConfig+0x338>
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d212      	bcs.n	8008950 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f023 030f 	bic.w	r3, r3, #15
 8008932:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	b29a      	uxth	r2, r3
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	4313      	orrs	r3, r2
 8008944:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	89fa      	ldrh	r2, [r7, #14]
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	e051      	b.n	80089f4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	76bb      	strb	r3, [r7, #26]
 8008954:	e04e      	b.n	80089f4 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008956:	7efb      	ldrb	r3, [r7, #27]
 8008958:	3b01      	subs	r3, #1
 800895a:	2b07      	cmp	r3, #7
 800895c:	d821      	bhi.n	80089a2 <UART_SetConfig+0x38a>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <UART_SetConfig+0x34c>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008985 	.word	0x08008985
 8008968:	0800898d 	.word	0x0800898d
 800896c:	080089a3 	.word	0x080089a3
 8008970:	08008993 	.word	0x08008993
 8008974:	080089a3 	.word	0x080089a3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089a3 	.word	0x080089a3
 8008980:	0800899b 	.word	0x0800899b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008984:	f7fe fd82 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8008988:	6178      	str	r0, [r7, #20]
        break;
 800898a:	e00f      	b.n	80089ac <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800898c:	4b24      	ldr	r3, [pc, #144]	; (8008a20 <UART_SetConfig+0x408>)
 800898e:	617b      	str	r3, [r7, #20]
        break;
 8008990:	e00c      	b.n	80089ac <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008992:	f7fe fce5 	bl	8007360 <HAL_RCC_GetSysClockFreq>
 8008996:	6178      	str	r0, [r7, #20]
        break;
 8008998:	e008      	b.n	80089ac <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800899a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800899e:	617b      	str	r3, [r7, #20]
        break;
 80089a0:	e004      	b.n	80089ac <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	76bb      	strb	r3, [r7, #26]
        break;
 80089aa:	bf00      	nop
    }

    if (pclk != 0U)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d020      	beq.n	80089f4 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <UART_SetConfig+0x404>)
 80089b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089bc:	461a      	mov	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	441a      	add	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	d908      	bls.n	80089f0 <UART_SetConfig+0x3d8>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d204      	bcs.n	80089f0 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e001      	b.n	80089f4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a10:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3720      	adds	r7, #32
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bdb0      	pop	{r4, r5, r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	0800dc88 	.word	0x0800dc88
 8008a20:	00f42400 	.word	0x00f42400

08008a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00a      	beq.n	8008a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	f003 0308 	and.w	r3, r3, #8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00a      	beq.n	8008ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	f003 0320 	and.w	r3, r3, #32
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b22:	d10a      	bne.n	8008b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b78:	f7fb f88e 	bl	8003c98 <HAL_GetTick>
 8008b7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0308 	and.w	r3, r3, #8
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d10e      	bne.n	8008baa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f82f 	bl	8008bfe <UART_WaitOnFlagUntilTimeout>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e025      	b.n	8008bf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d10e      	bne.n	8008bd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f819 	bl	8008bfe <UART_WaitOnFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e00f      	b.n	8008bf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	e062      	b.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d05e      	beq.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c18:	f7fb f83e 	bl	8003c98 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11d      	bne.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e045      	b.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02e      	beq.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c86:	d126      	bne.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ca0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e00f      	b.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69da      	ldr	r2, [r3, #28]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d08d      	beq.n	8008c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e027      	b.n	8008d64 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2224      	movs	r2, #36	; 0x24
 8008d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0201 	bic.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e02d      	b.n	8008de4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2224      	movs	r2, #36	; 0x24
 8008d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f84f 	bl	8008e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d101      	bne.n	8008e04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e02d      	b.n	8008e60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2224      	movs	r2, #36	; 0x24
 8008e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0201 	bic.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f811 	bl	8008e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d108      	bne.n	8008e8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e88:	e031      	b.n	8008eee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e8e:	2308      	movs	r3, #8
 8008e90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	0e5b      	lsrs	r3, r3, #25
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	0f5b      	lsrs	r3, r3, #29
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f003 0307 	and.w	r3, r3, #7
 8008eb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	7b3a      	ldrb	r2, [r7, #12]
 8008eb6:	4911      	ldr	r1, [pc, #68]	; (8008efc <UARTEx_SetNbDataToProcess+0x94>)
 8008eb8:	5c8a      	ldrb	r2, [r1, r2]
 8008eba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ebe:	7b3a      	ldrb	r2, [r7, #12]
 8008ec0:	490f      	ldr	r1, [pc, #60]	; (8008f00 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ec4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	7b7a      	ldrb	r2, [r7, #13]
 8008ed4:	4909      	ldr	r1, [pc, #36]	; (8008efc <UARTEx_SetNbDataToProcess+0x94>)
 8008ed6:	5c8a      	ldrb	r2, [r1, r2]
 8008ed8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008edc:	7b7a      	ldrb	r2, [r7, #13]
 8008ede:	4908      	ldr	r1, [pc, #32]	; (8008f00 <UARTEx_SetNbDataToProcess+0x98>)
 8008ee0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	0800dca0 	.word	0x0800dca0
 8008f00:	0800dca8 	.word	0x0800dca8

08008f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4013      	ands	r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	f107 0014 	add.w	r0, r7, #20
 8008f48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	b004      	add	sp, #16
 8008f7a:	4770      	bx	lr

08008f7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f8e:	2b84      	cmp	r3, #132	; 0x84
 8008f90:	d005      	beq.n	8008f9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3303      	adds	r3, #3
 8008f9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fb0:	f001 fab4 	bl	800a51c <vTaskStartScheduler>
  
  return osOK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fbc:	b087      	sub	sp, #28
 8008fbe:	af02      	add	r7, sp, #8
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685c      	ldr	r4, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fd0:	b29e      	uxth	r6, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff ffcf 	bl	8008f7c <makeFreeRtosPriority>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	9200      	str	r2, [sp, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	4632      	mov	r2, r6
 8008fec:	4629      	mov	r1, r5
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 ffb9 	bl	8009f66 <xTaskCreate>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d001      	beq.n	8008ffe <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e000      	b.n	8009000 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009008 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <osDelay+0x16>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	e000      	b.n	8009020 <osDelay+0x18>
 800901e:	2301      	movs	r3, #1
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fa0f 	bl	800a444 <vTaskDelay>
  
  return osOK;
 8009026:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f103 0208 	add.w	r2, r3, #8
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f04f 32ff 	mov.w	r2, #4294967295
 8009048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f103 0208 	add.w	r2, r3, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f103 0208 	add.w	r2, r3, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e8:	d103      	bne.n	80090f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e00c      	b.n	800910c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3308      	adds	r3, #8
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e002      	b.n	8009100 <vListInsert+0x2e>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	429a      	cmp	r2, r3
 800910a:	d2f6      	bcs.n	80090fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
}
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6892      	ldr	r2, [r2, #8]
 800915a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6852      	ldr	r2, [r2, #4]
 8009164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d103      	bne.n	8009178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	1e5a      	subs	r2, r3, #1
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091c2:	f002 fa9f 	bl	800b704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f2:	3b01      	subs	r3, #1
 80091f4:	68f9      	ldr	r1, [r7, #12]
 80091f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	441a      	add	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	22ff      	movs	r2, #255	; 0xff
 8009206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	22ff      	movs	r2, #255	; 0xff
 800920e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d114      	bne.n	8009242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01a      	beq.n	8009256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fc4f 	bl	800aac8 <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d012      	beq.n	8009256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009230:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <xQueueGenericReset+0xcc>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e009      	b.n	8009256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3310      	adds	r3, #16
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff fef2 	bl	8009030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3324      	adds	r3, #36	; 0x24
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff feed 	bl	8009030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009256:	f002 fa85 	bl	800b764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800925a:	2301      	movs	r3, #1
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af02      	add	r7, sp, #8
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueGenericCreate+0x2a>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	613b      	str	r3, [r7, #16]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3350      	adds	r3, #80	; 0x50
 80092a0:	4618      	mov	r0, r3
 80092a2:	f002 fb11 	bl	800b8c8 <pvPortMalloc>
 80092a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	3350      	adds	r3, #80	; 0x50
 80092b6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092b8:	79fa      	ldrb	r2, [r7, #7]
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	4613      	mov	r3, r2
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f821 	bl	800930c <prvInitialiseNewQueue>
 80092ca:	e016      	b.n	80092fa <xQueueGenericCreate+0x92>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80092cc:	f7f8 fbe3 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 80092d0:	4603      	mov	r3, r0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f8 fb5e 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <xQueueGenericCreate+0x9c>)
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	4013      	ands	r3, r2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <xQueueGenericCreate+0x92>
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	4a07      	ldr	r2, [pc, #28]	; (8009308 <xQueueGenericCreate+0xa0>)
 80092ec:	5cd3      	ldrb	r3, [r2, r3]
 80092ee:	3340      	adds	r3, #64	; 0x40
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f9 fccb 	bl	8002c90 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092fa:	69bb      	ldr	r3, [r7, #24]
	}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20002ee4 	.word	0x20002ee4
 8009308:	20000008 	.word	0x20000008

0800930c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800930c:	b5b0      	push	{r4, r5, r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	6a3a      	ldr	r2, [r7, #32]
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e002      	b.n	800932e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800933a:	2101      	movs	r1, #1
 800933c:	6a38      	ldr	r0, [r7, #32]
 800933e:	f7ff ff2b 	bl	8009198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800934a:	6a38      	ldr	r0, [r7, #32]
 800934c:	f7f8 fb09 	bl	8001962 <prvTraceGetQueueType>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	4b34      	ldr	r3, [pc, #208]	; (8009428 <prvInitialiseNewQueue+0x11c>)
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	4618      	mov	r0, r3
 800935a:	f7f9 ff09 	bl	8003170 <prvTraceGetObjectHandle>
 800935e:	4603      	mov	r3, r0
 8009360:	b29b      	uxth	r3, r3
 8009362:	4619      	mov	r1, r3
 8009364:	6a38      	ldr	r0, [r7, #32]
 8009366:	f7f8 fb6a 	bl	8001a3e <prvTraceSetQueueNumberLow16>
 800936a:	4b30      	ldr	r3, [pc, #192]	; (800942c <prvInitialiseNewQueue+0x120>)
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	6a38      	ldr	r0, [r7, #32]
 8009372:	f7f8 fb7a 	bl	8001a6a <prvTraceSetQueueNumberHigh16>
 8009376:	6a38      	ldr	r0, [r7, #32]
 8009378:	f7f8 faf3 	bl	8001962 <prvTraceGetQueueType>
 800937c:	4603      	mov	r3, r0
 800937e:	461a      	mov	r2, r3
 8009380:	4b29      	ldr	r3, [pc, #164]	; (8009428 <prvInitialiseNewQueue+0x11c>)
 8009382:	5c9c      	ldrb	r4, [r3, r2]
 8009384:	6a38      	ldr	r0, [r7, #32]
 8009386:	f7f8 fb3f 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 800938a:	4603      	mov	r3, r0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	4619      	mov	r1, r3
 8009390:	4620      	mov	r0, r4
 8009392:	f7f9 ff9b 	bl	80032cc <prvMarkObjectAsUsed>
 8009396:	f7f8 fb7e 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800939a:	4603      	mov	r3, r0
 800939c:	4618      	mov	r0, r3
 800939e:	f7f8 faf9 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 80093a2:	4603      	mov	r3, r0
 80093a4:	461a      	mov	r2, r3
 80093a6:	4b22      	ldr	r3, [pc, #136]	; (8009430 <prvInitialiseNewQueue+0x124>)
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	4013      	ands	r3, r2
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d025      	beq.n	80093fe <prvInitialiseNewQueue+0xf2>
 80093b2:	6a38      	ldr	r0, [r7, #32]
 80093b4:	f7f8 fb35 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	4b1c      	ldr	r3, [pc, #112]	; (8009430 <prvInitialiseNewQueue+0x124>)
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	4013      	ands	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <prvInitialiseNewQueue+0xf2>
 80093c8:	6a38      	ldr	r0, [r7, #32]
 80093ca:	f7f8 faca 	bl	8001962 <prvTraceGetQueueType>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	4b15      	ldr	r3, [pc, #84]	; (8009428 <prvInitialiseNewQueue+0x11c>)
 80093d4:	5c9b      	ldrb	r3, [r3, r2]
 80093d6:	3318      	adds	r3, #24
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	461d      	mov	r5, r3
 80093dc:	6a38      	ldr	r0, [r7, #32]
 80093de:	f7f8 fac0 	bl	8001962 <prvTraceGetQueueType>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b10      	ldr	r3, [pc, #64]	; (8009428 <prvInitialiseNewQueue+0x11c>)
 80093e8:	5c9c      	ldrb	r4, [r3, r2]
 80093ea:	6a38      	ldr	r0, [r7, #32]
 80093ec:	f7f8 fb0c 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80093f0:	4603      	mov	r3, r0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	4621      	mov	r1, r4
 80093f8:	4628      	mov	r0, r5
 80093fa:	f7f9 fb05 	bl	8002a08 <prvTraceStoreKernelCall>
 80093fe:	6a38      	ldr	r0, [r7, #32]
 8009400:	f7f8 faaf 	bl	8001962 <prvTraceGetQueueType>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	4b07      	ldr	r3, [pc, #28]	; (8009428 <prvInitialiseNewQueue+0x11c>)
 800940a:	5c9c      	ldrb	r4, [r3, r2]
 800940c:	6a38      	ldr	r0, [r7, #32]
 800940e:	f7f8 fafb 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 8009412:	4603      	mov	r3, r0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2200      	movs	r2, #0
 8009418:	4619      	mov	r1, r3
 800941a:	4620      	mov	r0, r4
 800941c:	f7f9 fd8a 	bl	8002f34 <prvTraceSetObjectState>
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bdb0      	pop	{r4, r5, r7, pc}
 8009428:	20000008 	.word	0x20000008
 800942c:	2000b550 	.word	0x2000b550
 8009430:	20002ee4 	.word	0x20002ee4

08009434 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009454:	2300      	movs	r3, #0
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f81c 	bl	8009498 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009472:	2301      	movs	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	2300      	movs	r3, #0
 8009478:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	461a      	mov	r2, r3
 800947e:	6939      	ldr	r1, [r7, #16]
 8009480:	6978      	ldr	r0, [r7, #20]
 8009482:	f7ff fef1 	bl	8009268 <xQueueGenericCreate>
 8009486:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff ffd3 	bl	8009434 <prvInitialiseMutex>

		return xNewQueue;
 800948e:	68fb      	ldr	r3, [r7, #12]
	}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009498:	b5b0      	push	{r4, r5, r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <xQueueGenericSend+0x32>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d103      	bne.n	80094d8 <xQueueGenericSend+0x40>
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <xQueueGenericSend+0x44>
 80094d8:	2301      	movs	r3, #1
 80094da:	e000      	b.n	80094de <xQueueGenericSend+0x46>
 80094dc:	2300      	movs	r3, #0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <xQueueGenericSend+0x60>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d103      	bne.n	8009506 <xQueueGenericSend+0x6e>
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <xQueueGenericSend+0x72>
 8009506:	2301      	movs	r3, #1
 8009508:	e000      	b.n	800950c <xQueueGenericSend+0x74>
 800950a:	2300      	movs	r3, #0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <xQueueGenericSend+0x8e>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	623b      	str	r3, [r7, #32]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009526:	f001 fcc1 	bl	800aeac <xTaskGetSchedulerState>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <xQueueGenericSend+0x9e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <xQueueGenericSend+0xa2>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <xQueueGenericSend+0xa4>
 800953a:	2300      	movs	r3, #0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <xQueueGenericSend+0xbe>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	61fb      	str	r3, [r7, #28]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009556:	f002 f8d5 	bl	800b704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	429a      	cmp	r2, r3
 8009564:	d303      	bcc.n	800956e <xQueueGenericSend+0xd6>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b02      	cmp	r3, #2
 800956a:	f040 8084 	bne.w	8009676 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 800956e:	f7f8 fa92 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009572:	4603      	mov	r3, r0
 8009574:	4618      	mov	r0, r3
 8009576:	f7f8 fa0d 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	4ba6      	ldr	r3, [pc, #664]	; (8009818 <xQueueGenericSend+0x380>)
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	4013      	ands	r3, r2
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d02a      	beq.n	80095e0 <xQueueGenericSend+0x148>
 800958a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958c:	f7f8 fa49 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	4ba0      	ldr	r3, [pc, #640]	; (8009818 <xQueueGenericSend+0x380>)
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	4013      	ands	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01f      	beq.n	80095e0 <xQueueGenericSend+0x148>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <xQueueGenericSend+0x124>
 80095a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a8:	f7f8 f9db 	bl	8001962 <prvTraceGetQueueType>
 80095ac:	4603      	mov	r3, r0
 80095ae:	461a      	mov	r2, r3
 80095b0:	4b9a      	ldr	r3, [pc, #616]	; (800981c <xQueueGenericSend+0x384>)
 80095b2:	5c9b      	ldrb	r3, [r3, r2]
 80095b4:	3320      	adds	r3, #32
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	461d      	mov	r5, r3
 80095ba:	e000      	b.n	80095be <xQueueGenericSend+0x126>
 80095bc:	2525      	movs	r5, #37	; 0x25
 80095be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095c0:	f7f8 f9cf 	bl	8001962 <prvTraceGetQueueType>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	4b94      	ldr	r3, [pc, #592]	; (800981c <xQueueGenericSend+0x384>)
 80095ca:	5c9c      	ldrb	r4, [r3, r2]
 80095cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ce:	f7f8 fa1b 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80095d2:	4603      	mov	r3, r0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	4621      	mov	r1, r4
 80095da:	4628      	mov	r0, r5
 80095dc:	f7f9 fa14 	bl	8002a08 <prvTraceStoreKernelCall>
 80095e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095e2:	f7f8 f9be 	bl	8001962 <prvTraceGetQueueType>
 80095e6:	4603      	mov	r3, r0
 80095e8:	461a      	mov	r2, r3
 80095ea:	4b8c      	ldr	r3, [pc, #560]	; (800981c <xQueueGenericSend+0x384>)
 80095ec:	5c9c      	ldrb	r4, [r3, r2]
 80095ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f0:	f7f8 fa0a 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80095f4:	4603      	mov	r3, r0
 80095f6:	b2dd      	uxtb	r5, r3
 80095f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095fa:	f7f8 f9b2 	bl	8001962 <prvTraceGetQueueType>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	4b86      	ldr	r3, [pc, #536]	; (800981c <xQueueGenericSend+0x384>)
 8009604:	5c9b      	ldrb	r3, [r3, r2]
 8009606:	2b02      	cmp	r3, #2
 8009608:	d005      	beq.n	8009616 <xQueueGenericSend+0x17e>
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	b2db      	uxtb	r3, r3
 8009610:	3301      	adds	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	e000      	b.n	8009618 <xQueueGenericSend+0x180>
 8009616:	2300      	movs	r3, #0
 8009618:	461a      	mov	r2, r3
 800961a:	4629      	mov	r1, r5
 800961c:	4620      	mov	r0, r4
 800961e:	f7f9 fc89 	bl	8002f34 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009628:	f000 fbb3 	bl	8009d92 <prvCopyDataToQueue>
 800962c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d010      	beq.n	8009658 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	3324      	adds	r3, #36	; 0x24
 800963a:	4618      	mov	r0, r3
 800963c:	f001 fa44 	bl	800aac8 <xTaskRemoveFromEventList>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d013      	beq.n	800966e <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009646:	4b76      	ldr	r3, [pc, #472]	; (8009820 <xQueueGenericSend+0x388>)
 8009648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	e00a      	b.n	800966e <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800965e:	4b70      	ldr	r3, [pc, #448]	; (8009820 <xQueueGenericSend+0x388>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800966e:	f002 f879 	bl	800b764 <vPortExitCritical>
				return pdPASS;
 8009672:	2301      	movs	r3, #1
 8009674:	e115      	b.n	80098a2 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d13c      	bne.n	80096f6 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800967c:	f002 f872 	bl	800b764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8009680:	f7f8 fa09 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009684:	4603      	mov	r3, r0
 8009686:	4618      	mov	r0, r3
 8009688:	f7f8 f984 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	4b61      	ldr	r3, [pc, #388]	; (8009818 <xQueueGenericSend+0x380>)
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	4013      	ands	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d02a      	beq.n	80096f2 <xQueueGenericSend+0x25a>
 800969c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969e:	f7f8 f9c0 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 80096a2:	4603      	mov	r3, r0
 80096a4:	461a      	mov	r2, r3
 80096a6:	4b5c      	ldr	r3, [pc, #368]	; (8009818 <xQueueGenericSend+0x380>)
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	4013      	ands	r3, r2
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01f      	beq.n	80096f2 <xQueueGenericSend+0x25a>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <xQueueGenericSend+0x236>
 80096b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ba:	f7f8 f952 	bl	8001962 <prvTraceGetQueueType>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	4b56      	ldr	r3, [pc, #344]	; (800981c <xQueueGenericSend+0x384>)
 80096c4:	5c9b      	ldrb	r3, [r3, r2]
 80096c6:	3348      	adds	r3, #72	; 0x48
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	461d      	mov	r5, r3
 80096cc:	e000      	b.n	80096d0 <xQueueGenericSend+0x238>
 80096ce:	254d      	movs	r5, #77	; 0x4d
 80096d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d2:	f7f8 f946 	bl	8001962 <prvTraceGetQueueType>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	4b50      	ldr	r3, [pc, #320]	; (800981c <xQueueGenericSend+0x384>)
 80096dc:	5c9c      	ldrb	r4, [r3, r2]
 80096de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e0:	f7f8 f992 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80096e4:	4603      	mov	r3, r0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f7f9 f98b 	bl	8002a08 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e0d5      	b.n	80098a2 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096fc:	f107 0314 	add.w	r3, r7, #20
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fa59 	bl	800abb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009706:	2301      	movs	r3, #1
 8009708:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800970a:	f002 f82b 	bl	800b764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800970e:	f000 ff79 	bl	800a604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009712:	f001 fff7 	bl	800b704 <vPortEnterCritical>
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800971c:	b25b      	sxtb	r3, r3
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d103      	bne.n	800972c <xQueueGenericSend+0x294>
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009732:	b25b      	sxtb	r3, r3
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	d103      	bne.n	8009742 <xQueueGenericSend+0x2aa>
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009742:	f002 f80f 	bl	800b764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009746:	1d3a      	adds	r2, r7, #4
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	4611      	mov	r1, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fa48 	bl	800abe4 <xTaskCheckForTimeOut>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d164      	bne.n	8009824 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800975a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800975c:	f000 fbeb 	bl	8009f36 <prvIsQueueFull>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d051      	beq.n	800980a <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8009766:	f7f8 f996 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800976a:	4603      	mov	r3, r0
 800976c:	4618      	mov	r0, r3
 800976e:	f7f8 f911 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	4b28      	ldr	r3, [pc, #160]	; (8009818 <xQueueGenericSend+0x380>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	4013      	ands	r3, r2
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d02a      	beq.n	80097d8 <xQueueGenericSend+0x340>
 8009782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009784:	f7f8 f94d 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009788:	4603      	mov	r3, r0
 800978a:	461a      	mov	r2, r3
 800978c:	4b22      	ldr	r3, [pc, #136]	; (8009818 <xQueueGenericSend+0x380>)
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	4013      	ands	r3, r2
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01f      	beq.n	80097d8 <xQueueGenericSend+0x340>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <xQueueGenericSend+0x31c>
 800979e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a0:	f7f8 f8df 	bl	8001962 <prvTraceGetQueueType>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b1c      	ldr	r3, [pc, #112]	; (800981c <xQueueGenericSend+0x384>)
 80097aa:	5c9b      	ldrb	r3, [r3, r2]
 80097ac:	3370      	adds	r3, #112	; 0x70
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	461d      	mov	r5, r3
 80097b2:	e000      	b.n	80097b6 <xQueueGenericSend+0x31e>
 80097b4:	2575      	movs	r5, #117	; 0x75
 80097b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b8:	f7f8 f8d3 	bl	8001962 <prvTraceGetQueueType>
 80097bc:	4603      	mov	r3, r0
 80097be:	461a      	mov	r2, r3
 80097c0:	4b16      	ldr	r3, [pc, #88]	; (800981c <xQueueGenericSend+0x384>)
 80097c2:	5c9c      	ldrb	r4, [r3, r2]
 80097c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c6:	f7f8 f91f 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80097ca:	4603      	mov	r3, r0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	4621      	mov	r1, r4
 80097d2:	4628      	mov	r0, r5
 80097d4:	f7f9 f918 	bl	8002a08 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	3310      	adds	r3, #16
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 f94d 	bl	800aa80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e8:	f000 fb3d 	bl	8009e66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097ec:	f000 ff18 	bl	800a620 <xTaskResumeAll>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f47f aeaf 	bne.w	8009556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <xQueueGenericSend+0x388>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	e6a5      	b.n	8009556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800980a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800980c:	f000 fb2b 	bl	8009e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009810:	f000 ff06 	bl	800a620 <xTaskResumeAll>
 8009814:	e69f      	b.n	8009556 <xQueueGenericSend+0xbe>
 8009816:	bf00      	nop
 8009818:	20002ee4 	.word	0x20002ee4
 800981c:	20000008 	.word	0x20000008
 8009820:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009826:	f000 fb1e 	bl	8009e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800982a:	f000 fef9 	bl	800a620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800982e:	f7f8 f932 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009832:	4603      	mov	r3, r0
 8009834:	4618      	mov	r0, r3
 8009836:	f7f8 f8ad 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800983a:	4603      	mov	r3, r0
 800983c:	461a      	mov	r2, r3
 800983e:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <xQueueGenericSend+0x414>)
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	4013      	ands	r3, r2
 8009844:	b29b      	uxth	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02a      	beq.n	80098a0 <xQueueGenericSend+0x408>
 800984a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800984c:	f7f8 f8e9 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009850:	4603      	mov	r3, r0
 8009852:	461a      	mov	r2, r3
 8009854:	4b15      	ldr	r3, [pc, #84]	; (80098ac <xQueueGenericSend+0x414>)
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	4013      	ands	r3, r2
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01f      	beq.n	80098a0 <xQueueGenericSend+0x408>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <xQueueGenericSend+0x3e4>
 8009866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009868:	f7f8 f87b 	bl	8001962 <prvTraceGetQueueType>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <xQueueGenericSend+0x418>)
 8009872:	5c9b      	ldrb	r3, [r3, r2]
 8009874:	3348      	adds	r3, #72	; 0x48
 8009876:	b2db      	uxtb	r3, r3
 8009878:	461d      	mov	r5, r3
 800987a:	e000      	b.n	800987e <xQueueGenericSend+0x3e6>
 800987c:	254d      	movs	r5, #77	; 0x4d
 800987e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009880:	f7f8 f86f 	bl	8001962 <prvTraceGetQueueType>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <xQueueGenericSend+0x418>)
 800988a:	5c9c      	ldrb	r4, [r3, r2]
 800988c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988e:	f7f8 f8bb 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 8009892:	4603      	mov	r3, r0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	4621      	mov	r1, r4
 800989a:	4628      	mov	r0, r5
 800989c:	f7f9 f8b4 	bl	8002a08 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80098a0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3738      	adds	r7, #56	; 0x38
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bdb0      	pop	{r4, r5, r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20002ee4 	.word	0x20002ee4
 80098b0:	20000008 	.word	0x20000008

080098b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80098b4:	b5b0      	push	{r4, r5, r7, lr}
 80098b6:	b08e      	sub	sp, #56	; 0x38
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80098be:	2300      	movs	r3, #0
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80098c6:	2300      	movs	r3, #0
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	623b      	str	r3, [r7, #32]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00a      	beq.n	8009904 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	61fb      	str	r3, [r7, #28]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009904:	f001 fad2 	bl	800aeac <xTaskGetSchedulerState>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <xQueueSemaphoreTake+0x60>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <xQueueSemaphoreTake+0x64>
 8009914:	2301      	movs	r3, #1
 8009916:	e000      	b.n	800991a <xQueueSemaphoreTake+0x66>
 8009918:	2300      	movs	r3, #0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	61bb      	str	r3, [r7, #24]
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009934:	f001 fee6 	bl	800b704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	633b      	str	r3, [r7, #48]	; 0x30

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8081 	beq.w	8009a48 <xQueueSemaphoreTake+0x194>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8009946:	f7f8 f8a6 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800994a:	4603      	mov	r3, r0
 800994c:	4618      	mov	r0, r3
 800994e:	f7f8 f821 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	4bbc      	ldr	r3, [pc, #752]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	4013      	ands	r3, r2
 800995c:	b29b      	uxth	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d025      	beq.n	80099ae <xQueueSemaphoreTake+0xfa>
 8009962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009964:	f7f8 f85d 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	4bb6      	ldr	r3, [pc, #728]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	4013      	ands	r3, r2
 8009972:	b29b      	uxth	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01a      	beq.n	80099ae <xQueueSemaphoreTake+0xfa>
 8009978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997a:	f7f7 fff2 	bl	8001962 <prvTraceGetQueueType>
 800997e:	4603      	mov	r3, r0
 8009980:	461a      	mov	r2, r3
 8009982:	4bb2      	ldr	r3, [pc, #712]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009984:	5c9b      	ldrb	r3, [r3, r2]
 8009986:	3328      	adds	r3, #40	; 0x28
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461d      	mov	r5, r3
 800998c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998e:	f7f7 ffe8 	bl	8001962 <prvTraceGetQueueType>
 8009992:	4603      	mov	r3, r0
 8009994:	461a      	mov	r2, r3
 8009996:	4bad      	ldr	r3, [pc, #692]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009998:	5c9c      	ldrb	r4, [r3, r2]
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f7f8 f834 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80099a0:	4603      	mov	r3, r0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	461a      	mov	r2, r3
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f7f9 f82d 	bl	8002a08 <prvTraceStoreKernelCall>
 80099ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b0:	f7f7 ffd7 	bl	8001962 <prvTraceGetQueueType>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	4ba4      	ldr	r3, [pc, #656]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 80099ba:	5c9c      	ldrb	r4, [r3, r2]
 80099bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099be:	f7f8 f823 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 80099c2:	4603      	mov	r3, r0
 80099c4:	b2dd      	uxtb	r5, r3
 80099c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c8:	f7f7 ffcb 	bl	8001962 <prvTraceGetQueueType>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	4b9e      	ldr	r3, [pc, #632]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 80099d2:	5c9b      	ldrb	r3, [r3, r2]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d108      	bne.n	80099ea <xQueueSemaphoreTake+0x136>
 80099d8:	f7f8 f85d 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 80099dc:	4603      	mov	r3, r0
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f7 ffcb 	bl	800197a <prvTraceGetTaskNumberLow16>
 80099e4:	4603      	mov	r3, r0
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	e004      	b.n	80099f4 <xQueueSemaphoreTake+0x140>
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	4629      	mov	r1, r5
 80099f8:	4620      	mov	r0, r4
 80099fa:	f7f9 fa9b 	bl	8002f34 <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	1e5a      	subs	r2, r3, #1
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d104      	bne.n	8009a18 <xQueueSemaphoreTake+0x164>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a0e:	f001 fcbf 	bl	800b390 <pvTaskIncrementMutexHeldCount>
 8009a12:	4602      	mov	r2, r0
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00f      	beq.n	8009a40 <xQueueSemaphoreTake+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	3310      	adds	r3, #16
 8009a24:	4618      	mov	r0, r3
 8009a26:	f001 f84f 	bl	800aac8 <xTaskRemoveFromEventList>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <xQueueSemaphoreTake+0x18c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a30:	4b87      	ldr	r3, [pc, #540]	; (8009c50 <xQueueSemaphoreTake+0x39c>)
 8009a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a40:	f001 fe90 	bl	800b764 <vPortExitCritical>
				return pdPASS;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e15d      	b.n	8009d04 <xQueueSemaphoreTake+0x450>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d145      	bne.n	8009ada <xQueueSemaphoreTake+0x226>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00a      	beq.n	8009a6a <xQueueSemaphoreTake+0x1b6>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	617b      	str	r3, [r7, #20]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xQueueSemaphoreTake+0x1b4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a6a:	f001 fe7b 	bl	800b764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009a6e:	f7f8 f812 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009a72:	4603      	mov	r3, r0
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7f7 ff8d 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b72      	ldr	r3, [pc, #456]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	4013      	ands	r3, r2
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d025      	beq.n	8009ad6 <xQueueSemaphoreTake+0x222>
 8009a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a8c:	f7f7 ffc9 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009a90:	4603      	mov	r3, r0
 8009a92:	461a      	mov	r2, r3
 8009a94:	4b6c      	ldr	r3, [pc, #432]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01a      	beq.n	8009ad6 <xQueueSemaphoreTake+0x222>
 8009aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa2:	f7f7 ff5e 	bl	8001962 <prvTraceGetQueueType>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b68      	ldr	r3, [pc, #416]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009aac:	5c9b      	ldrb	r3, [r3, r2]
 8009aae:	3350      	adds	r3, #80	; 0x50
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	461d      	mov	r5, r3
 8009ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab6:	f7f7 ff54 	bl	8001962 <prvTraceGetQueueType>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b63      	ldr	r3, [pc, #396]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009ac0:	5c9c      	ldrb	r4, [r3, r2]
 8009ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac4:	f7f7 ffa0 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f7f8 ff99 	bl	8002a08 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e114      	b.n	8009d04 <xQueueSemaphoreTake+0x450>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <xQueueSemaphoreTake+0x23a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ae0:	f107 030c 	add.w	r3, r7, #12
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f867 	bl	800abb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009aea:	2301      	movs	r3, #1
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aee:	f001 fe39 	bl	800b764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009af2:	f000 fd87 	bl	800a604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009af6:	f001 fe05 	bl	800b704 <vPortEnterCritical>
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d103      	bne.n	8009b10 <xQueueSemaphoreTake+0x25c>
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b16:	b25b      	sxtb	r3, r3
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1c:	d103      	bne.n	8009b26 <xQueueSemaphoreTake+0x272>
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b26:	f001 fe1d 	bl	800b764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b2a:	463a      	mov	r2, r7
 8009b2c:	f107 030c 	add.w	r3, r7, #12
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 f856 	bl	800abe4 <xTaskCheckForTimeOut>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f040 8090 	bne.w	8009c60 <xQueueSemaphoreTake+0x3ac>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b42:	f000 f9e2 	bl	8009f0a <prvIsQueueEmpty>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 8083 	beq.w	8009c54 <xQueueSemaphoreTake+0x3a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8009b4e:	f7f7 ffa2 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f7 ff1d 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b3a      	ldr	r3, [pc, #232]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	4013      	ands	r3, r2
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d025      	beq.n	8009bb6 <xQueueSemaphoreTake+0x302>
 8009b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6c:	f7f7 ff59 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01a      	beq.n	8009bb6 <xQueueSemaphoreTake+0x302>
 8009b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b82:	f7f7 feee 	bl	8001962 <prvTraceGetQueueType>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4b30      	ldr	r3, [pc, #192]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009b8c:	5c9b      	ldrb	r3, [r3, r2]
 8009b8e:	3368      	adds	r3, #104	; 0x68
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	461d      	mov	r5, r3
 8009b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b96:	f7f7 fee4 	bl	8001962 <prvTraceGetQueueType>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009ba0:	5c9c      	ldrb	r4, [r3, r2]
 8009ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba4:	f7f7 ff30 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	461a      	mov	r2, r3
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7f8 ff29 	bl	8002a08 <prvTraceStoreKernelCall>
 8009bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb8:	f7f7 fed3 	bl	8001962 <prvTraceGetQueueType>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <xQueueSemaphoreTake+0x398>)
 8009bc2:	5c9b      	ldrb	r3, [r3, r2]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d018      	beq.n	8009bfa <xQueueSemaphoreTake+0x346>
 8009bc8:	f7f7 ff65 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f7 fee0 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <xQueueSemaphoreTake+0x394>)
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00a      	beq.n	8009bfa <xQueueSemaphoreTake+0x346>
 8009be4:	f7f7 ff57 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009be8:	4603      	mov	r3, r0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f7 fec5 	bl	800197a <prvTraceGetTaskNumberLow16>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7f9 fa15 	bl	8003024 <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <xQueueSemaphoreTake+0x362>
					{
						taskENTER_CRITICAL();
 8009c02:	f001 fd7f 	bl	800b704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 f96c 	bl	800aee8 <xTaskPriorityInherit>
 8009c10:	6278      	str	r0, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8009c12:	f001 fda7 	bl	800b764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	3324      	adds	r3, #36	; 0x24
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ff2e 	bl	800aa80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c26:	f000 f91e 	bl	8009e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c2a:	f000 fcf9 	bl	800a620 <xTaskResumeAll>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f47f ae7f 	bne.w	8009934 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c36:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <xQueueSemaphoreTake+0x39c>)
 8009c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	e675      	b.n	8009934 <xQueueSemaphoreTake+0x80>
 8009c48:	20002ee4 	.word	0x20002ee4
 8009c4c:	20000008 	.word	0x20000008
 8009c50:	e000ed04 	.word	0xe000ed04
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c56:	f000 f906 	bl	8009e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5a:	f000 fce1 	bl	800a620 <xTaskResumeAll>
 8009c5e:	e669      	b.n	8009934 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c62:	f000 f900 	bl	8009e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c66:	f000 fcdb 	bl	800a620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c6c:	f000 f94d 	bl	8009f0a <prvIsQueueEmpty>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f43f ae5e 	beq.w	8009934 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00d      	beq.n	8009c9a <xQueueSemaphoreTake+0x3e6>
					{
						taskENTER_CRITICAL();
 8009c7e:	f001 fd41 	bl	800b704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c84:	f000 f86d 	bl	8009d62 <prvGetDisinheritPriorityAfterTimeout>
 8009c88:	6378      	str	r0, [r7, #52]	; 0x34
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c90:	4618      	mov	r0, r3
 8009c92:	f001 faab 	bl	800b1ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c96:	f001 fd65 	bl	800b764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009c9a:	f7f7 fefc 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7f7 fe77 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <xQueueSemaphoreTake+0x458>)
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d025      	beq.n	8009d02 <xQueueSemaphoreTake+0x44e>
 8009cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb8:	f7f7 feb3 	bl	8001a22 <prvTraceGetQueueNumberHigh16>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <xQueueSemaphoreTake+0x458>)
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <xQueueSemaphoreTake+0x44e>
 8009ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cce:	f7f7 fe48 	bl	8001962 <prvTraceGetQueueType>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <xQueueSemaphoreTake+0x45c>)
 8009cd8:	5c9b      	ldrb	r3, [r3, r2]
 8009cda:	3350      	adds	r3, #80	; 0x50
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	461d      	mov	r5, r3
 8009ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce2:	f7f7 fe3e 	bl	8001962 <prvTraceGetQueueType>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <xQueueSemaphoreTake+0x45c>)
 8009cec:	5c9c      	ldrb	r4, [r3, r2]
 8009cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf0:	f7f7 fe8a 	bl	8001a08 <prvTraceGetQueueNumberLow16>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f7f8 fe83 	bl	8002a08 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8009d02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3738      	adds	r7, #56	; 0x38
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8009d0c:	20002ee4 	.word	0x20002ee4
 8009d10:	20000008 	.word	0x20000008

08009d14 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d006      	beq.n	8009d80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f1c3 0307 	rsb	r3, r3, #7
 8009d7c:	60fb      	str	r3, [r7, #12]
 8009d7e:	e001      	b.n	8009d84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d84:	68fb      	ldr	r3, [r7, #12]
	}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b086      	sub	sp, #24
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10d      	bne.n	8009dcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d14d      	bne.n	8009e54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f94d 	bl	800b05c <xTaskPriorityDisinherit>
 8009dc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	609a      	str	r2, [r3, #8]
 8009dca:	e043      	b.n	8009e54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d119      	bne.n	8009e06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6858      	ldr	r0, [r3, #4]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	461a      	mov	r2, r3
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	f001 ffa1 	bl	800bd24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	441a      	add	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d32b      	bcc.n	8009e54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	e026      	b.n	8009e54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	68d8      	ldr	r0, [r3, #12]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	f001 ff87 	bl	800bd24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	425b      	negs	r3, r3
 8009e20:	441a      	add	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d207      	bcs.n	8009e42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3a:	425b      	negs	r3, r3
 8009e3c:	441a      	add	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d105      	bne.n	8009e54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e5c:	697b      	ldr	r3, [r7, #20]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e6e:	f001 fc49 	bl	800b704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e7a:	e011      	b.n	8009ea0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d012      	beq.n	8009eaa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3324      	adds	r3, #36	; 0x24
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fe1d 	bl	800aac8 <xTaskRemoveFromEventList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e94:	f000 ff08 	bl	800aca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dce9      	bgt.n	8009e7c <prvUnlockQueue+0x16>
 8009ea8:	e000      	b.n	8009eac <prvUnlockQueue+0x46>
					break;
 8009eaa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	22ff      	movs	r2, #255	; 0xff
 8009eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009eb4:	f001 fc56 	bl	800b764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009eb8:	f001 fc24 	bl	800b704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ec2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ec4:	e011      	b.n	8009eea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d012      	beq.n	8009ef4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3310      	adds	r3, #16
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fdf8 	bl	800aac8 <xTaskRemoveFromEventList>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ede:	f000 fee3 	bl	800aca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	dce9      	bgt.n	8009ec6 <prvUnlockQueue+0x60>
 8009ef2:	e000      	b.n	8009ef6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ef4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	22ff      	movs	r2, #255	; 0xff
 8009efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009efe:	f001 fc31 	bl	800b764 <vPortExitCritical>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f12:	f001 fbf7 	bl	800b704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e001      	b.n	8009f28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f28:	f001 fc1c 	bl	800b764 <vPortExitCritical>

	return xReturn;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f3e:	f001 fbe1 	bl	800b704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d102      	bne.n	8009f54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e001      	b.n	8009f58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f58:	f001 fc04 	bl	800b764 <vPortExitCritical>

	return xReturn;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b08c      	sub	sp, #48	; 0x30
 8009f6a:	af04      	add	r7, sp, #16
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 fca4 	bl	800b8c8 <pvPortMalloc>
 8009f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f88:	20bc      	movs	r0, #188	; 0xbc
 8009f8a:	f001 fc9d 	bl	800b8c8 <pvPortMalloc>
 8009f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8009f9c:	e005      	b.n	8009faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f9e:	6978      	ldr	r0, [r7, #20]
 8009fa0:	f001 fd6e 	bl	800ba80 <vPortFree>
 8009fa4:	e001      	b.n	8009faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d013      	beq.n	8009fd8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fb0:	88fa      	ldrh	r2, [r7, #6]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	9303      	str	r3, [sp, #12]
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	9302      	str	r3, [sp, #8]
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 f80e 	bl	8009fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fcc:	69f8      	ldr	r0, [r7, #28]
 8009fce:	f000 f8b1 	bl	800a134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	61bb      	str	r3, [r7, #24]
 8009fd6:	e002      	b.n	8009fde <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fde:	69bb      	ldr	r3, [r7, #24]
	}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3720      	adds	r7, #32
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	461a      	mov	r2, r3
 800a000:	21a5      	movs	r1, #165	; 0xa5
 800a002:	f001 fe9d 	bl	800bd40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a010:	3b01      	subs	r3, #1
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	f023 0307 	bic.w	r3, r3, #7
 800a01e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	617b      	str	r3, [r7, #20]
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01f      	beq.n	800a086 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a046:	2300      	movs	r3, #0
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	e012      	b.n	800a072 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	7819      	ldrb	r1, [r3, #0]
 800a054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	3334      	adds	r3, #52	; 0x34
 800a05c:	460a      	mov	r2, r1
 800a05e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	3301      	adds	r3, #1
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	2b0f      	cmp	r3, #15
 800a076:	d9e9      	bls.n	800a04c <prvInitialiseNewTask+0x64>
 800a078:	e000      	b.n	800a07c <prvInitialiseNewTask+0x94>
			{
				break;
 800a07a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a084:	e003      	b.n	800a08e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	2b06      	cmp	r3, #6
 800a092:	d901      	bls.n	800a098 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a094:	2306      	movs	r3, #6
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe ffde 	bl	8009070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe ffd9 	bl	8009070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	f1c3 0207 	rsb	r2, r3, #7
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	3354      	adds	r3, #84	; 0x54
 800a0e8:	2260      	movs	r2, #96	; 0x60
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 fe27 	bl	800bd40 <memset>
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	4a0c      	ldr	r2, [pc, #48]	; (800a128 <prvInitialiseNewTask+0x140>)
 800a0f6:	659a      	str	r2, [r3, #88]	; 0x58
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	4a0c      	ldr	r2, [pc, #48]	; (800a12c <prvInitialiseNewTask+0x144>)
 800a0fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	4a0b      	ldr	r2, [pc, #44]	; (800a130 <prvInitialiseNewTask+0x148>)
 800a102:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	69b8      	ldr	r0, [r7, #24]
 800a10a:	f001 f9bb 	bl	800b484 <pxPortInitialiseStack>
 800a10e:	4602      	mov	r2, r0
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a120:	bf00      	nop
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	0800dcd0 	.word	0x0800dcd0
 800a12c:	0800dcf0 	.word	0x0800dcf0
 800a130:	0800dcb0 	.word	0x0800dcb0

0800a134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a13c:	f001 fae2 	bl	800b704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a140:	4b5c      	ldr	r3, [pc, #368]	; (800a2b4 <prvAddNewTaskToReadyList+0x180>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3301      	adds	r3, #1
 800a146:	4a5b      	ldr	r2, [pc, #364]	; (800a2b4 <prvAddNewTaskToReadyList+0x180>)
 800a148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a14a:	4b5b      	ldr	r3, [pc, #364]	; (800a2b8 <prvAddNewTaskToReadyList+0x184>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a152:	4a59      	ldr	r2, [pc, #356]	; (800a2b8 <prvAddNewTaskToReadyList+0x184>)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a158:	4b56      	ldr	r3, [pc, #344]	; (800a2b4 <prvAddNewTaskToReadyList+0x180>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d110      	bne.n	800a182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a160:	f000 fdf0 	bl	800ad44 <prvInitialiseTaskLists>
 800a164:	e00d      	b.n	800a182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a166:	4b55      	ldr	r3, [pc, #340]	; (800a2bc <prvAddNewTaskToReadyList+0x188>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d109      	bne.n	800a182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a16e:	4b52      	ldr	r3, [pc, #328]	; (800a2b8 <prvAddNewTaskToReadyList+0x184>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	429a      	cmp	r2, r3
 800a17a:	d802      	bhi.n	800a182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a17c:	4a4e      	ldr	r2, [pc, #312]	; (800a2b8 <prvAddNewTaskToReadyList+0x184>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a182:	4b4f      	ldr	r3, [pc, #316]	; (800a2c0 <prvAddNewTaskToReadyList+0x18c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3301      	adds	r3, #1
 800a188:	4a4d      	ldr	r2, [pc, #308]	; (800a2c0 <prvAddNewTaskToReadyList+0x18c>)
 800a18a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a18c:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <prvAddNewTaskToReadyList+0x18c>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d048      	beq.n	800a22c <prvAddNewTaskToReadyList+0xf8>
 800a19a:	2003      	movs	r0, #3
 800a19c:	f7f8 ffe8 	bl	8003170 <prvTraceGetObjectHandle>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7f7 fc02 	bl	80019b0 <prvTraceSetTaskNumberLow16>
 800a1ac:	4b45      	ldr	r3, [pc, #276]	; (800a2c4 <prvAddNewTaskToReadyList+0x190>)
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7f7 fc12 	bl	80019dc <prvTraceSetTaskNumberHigh16>
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7f7 fbde 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	b2d9      	uxtb	r1, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3334      	adds	r3, #52	; 0x34
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	2003      	movs	r0, #3
 800a1ca:	f7f9 f8c3 	bl	8003354 <prvTraceSetObjectName>
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f7 fbd3 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	b2d9      	uxtb	r1, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2003      	movs	r0, #3
 800a1e2:	f7f8 fe2d 	bl	8002e40 <prvTraceSetPriorityProperty>
 800a1e6:	f7f7 fc56 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7f7 fbd1 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b34      	ldr	r3, [pc, #208]	; (800a2c8 <prvAddNewTaskToReadyList+0x194>)
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d014      	beq.n	800a22c <prvAddNewTaskToReadyList+0xf8>
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7f7 fbc6 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	4b2e      	ldr	r3, [pc, #184]	; (800a2c8 <prvAddNewTaskToReadyList+0x194>)
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	4013      	ands	r3, r2
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d009      	beq.n	800a22c <prvAddNewTaskToReadyList+0xf8>
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7f7 fbae 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a21e:	4603      	mov	r3, r0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	2103      	movs	r1, #3
 800a226:	201b      	movs	r0, #27
 800a228:	f7f8 fbee 	bl	8002a08 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7f7 fbb1 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a232:	4603      	mov	r3, r0
 800a234:	461a      	mov	r2, r3
 800a236:	4b24      	ldr	r3, [pc, #144]	; (800a2c8 <prvAddNewTaskToReadyList+0x194>)
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	4013      	ands	r3, r2
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <prvAddNewTaskToReadyList+0x11e>
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f7 fb99 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a248:	4603      	mov	r3, r0
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f8 fadf 	bl	8002810 <prvTraceStoreTaskReady>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	2201      	movs	r2, #1
 800a258:	409a      	lsls	r2, r3
 800a25a:	4b1c      	ldr	r3, [pc, #112]	; (800a2cc <prvAddNewTaskToReadyList+0x198>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4313      	orrs	r3, r2
 800a260:	4a1a      	ldr	r2, [pc, #104]	; (800a2cc <prvAddNewTaskToReadyList+0x198>)
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4a17      	ldr	r2, [pc, #92]	; (800a2d0 <prvAddNewTaskToReadyList+0x19c>)
 800a272:	441a      	add	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3304      	adds	r3, #4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7fe ff05 	bl	800908a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a280:	f001 fa70 	bl	800b764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a284:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <prvAddNewTaskToReadyList+0x188>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00e      	beq.n	800a2aa <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <prvAddNewTaskToReadyList+0x184>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	429a      	cmp	r2, r3
 800a298:	d207      	bcs.n	800a2aa <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <prvAddNewTaskToReadyList+0x1a0>)
 800a29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200001e0 	.word	0x200001e0
 800a2b8:	200000e0 	.word	0x200000e0
 800a2bc:	200001ec 	.word	0x200001ec
 800a2c0:	200001fc 	.word	0x200001fc
 800a2c4:	2000b550 	.word	0x2000b550
 800a2c8:	20002ee4 	.word	0x20002ee4
 800a2cc:	200001e8 	.word	0x200001e8
 800a2d0:	200000e4 	.word	0x200000e4
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	617b      	str	r3, [r7, #20]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <vTaskDelayUntil+0x46>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	613b      	str	r3, [r7, #16]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a31e:	4b44      	ldr	r3, [pc, #272]	; (800a430 <vTaskDelayUntil+0x158>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <vTaskDelayUntil+0x64>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60fb      	str	r3, [r7, #12]
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a33c:	f000 f962 	bl	800a604 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a340:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <vTaskDelayUntil+0x15c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	4413      	add	r3, r2
 800a34e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6a3a      	ldr	r2, [r7, #32]
 800a356:	429a      	cmp	r2, r3
 800a358:	d20b      	bcs.n	800a372 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	429a      	cmp	r2, r3
 800a362:	d211      	bcs.n	800a388 <vTaskDelayUntil+0xb0>
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d90d      	bls.n	800a388 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a36c:	2301      	movs	r3, #1
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
 800a370:	e00a      	b.n	800a388 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d303      	bcc.n	800a384 <vTaskDelayUntil+0xac>
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	429a      	cmp	r2, r3
 800a382:	d901      	bls.n	800a388 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	d03a      	beq.n	800a40a <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800a394:	4b28      	ldr	r3, [pc, #160]	; (800a438 <vTaskDelayUntil+0x160>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f7 fafb 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4b26      	ldr	r3, [pc, #152]	; (800a43c <vTaskDelayUntil+0x164>)
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00d      	beq.n	800a3ca <vTaskDelayUntil+0xf2>
 800a3ae:	69f9      	ldr	r1, [r7, #28]
 800a3b0:	2088      	movs	r0, #136	; 0x88
 800a3b2:	f7f8 fc6d 	bl	8002c90 <prvTraceStoreKernelCallWithNumericParamOnly>
 800a3b6:	4b20      	ldr	r3, [pc, #128]	; (800a438 <vTaskDelayUntil+0x160>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f7 fadd 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f8 fe2d 	bl	8003024 <prvTraceSetTaskInstanceFinished>
 800a3ca:	f7f7 fb64 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f7 fadf 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4b18      	ldr	r3, [pc, #96]	; (800a43c <vTaskDelayUntil+0x164>)
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <vTaskDelayUntil+0x124>
 800a3e6:	f7f7 fb56 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f7 fac4 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f8 fe14 	bl	8003024 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a3fc:	69fa      	ldr	r2, [r7, #28]
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	2100      	movs	r1, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f000 ffd7 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a40a:	f000 f909 	bl	800a620 <xTaskResumeAll>
 800a40e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 800a416:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <vTaskDelayUntil+0x168>)
 800a418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a426:	bf00      	nop
 800a428:	3728      	adds	r7, #40	; 0x28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000208 	.word	0x20000208
 800a434:	200001e4 	.word	0x200001e4
 800a438:	200000e0 	.word	0x200000e0
 800a43c:	20002ee4 	.word	0x20002ee4
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d04b      	beq.n	800a4ee <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a456:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <vTaskDelay+0xc8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <vTaskDelay+0x30>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	60bb      	str	r3, [r7, #8]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a474:	f000 f8c6 	bl	800a604 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <vTaskDelay+0xcc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7f7 fa89 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	4b23      	ldr	r3, [pc, #140]	; (800a514 <vTaskDelay+0xd0>)
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	4013      	ands	r3, r2
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00d      	beq.n	800a4ae <vTaskDelay+0x6a>
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	2089      	movs	r0, #137	; 0x89
 800a496:	f7f8 fbfb 	bl	8002c90 <prvTraceStoreKernelCallWithNumericParamOnly>
 800a49a:	4b1d      	ldr	r3, [pc, #116]	; (800a510 <vTaskDelay+0xcc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f7 fa6b 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7f8 fdbb 	bl	8003024 <prvTraceSetTaskInstanceFinished>
 800a4ae:	f7f7 faf2 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f7 fa6d 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4b15      	ldr	r3, [pc, #84]	; (800a514 <vTaskDelay+0xd0>)
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <vTaskDelay+0x9c>
 800a4ca:	f7f7 fae4 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f7 fa52 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f8 fda2 	bl	8003024 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 ff68 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4e8:	f000 f89a 	bl	800a620 <xTaskResumeAll>
 800a4ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d107      	bne.n	800a504 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 800a4f4:	4b08      	ldr	r3, [pc, #32]	; (800a518 <vTaskDelay+0xd4>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20000208 	.word	0x20000208
 800a510:	200000e0 	.word	0x200000e0
 800a514:	20002ee4 	.word	0x20002ee4
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a522:	4b2e      	ldr	r3, [pc, #184]	; (800a5dc <vTaskStartScheduler+0xc0>)
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	2300      	movs	r3, #0
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	2300      	movs	r3, #0
 800a52c:	2280      	movs	r2, #128	; 0x80
 800a52e:	492c      	ldr	r1, [pc, #176]	; (800a5e0 <vTaskStartScheduler+0xc4>)
 800a530:	482c      	ldr	r0, [pc, #176]	; (800a5e4 <vTaskStartScheduler+0xc8>)
 800a532:	f7ff fd18 	bl	8009f66 <xTaskCreate>
 800a536:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d13a      	bne.n	800a5b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	60bb      	str	r3, [r7, #8]
}
 800a550:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a552:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <vTaskStartScheduler+0xcc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3354      	adds	r3, #84	; 0x54
 800a558:	4a24      	ldr	r2, [pc, #144]	; (800a5ec <vTaskStartScheduler+0xd0>)
 800a55a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a55c:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <vTaskStartScheduler+0xd4>)
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295
 800a562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a564:	4b23      	ldr	r3, [pc, #140]	; (800a5f4 <vTaskStartScheduler+0xd8>)
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a56a:	4b23      	ldr	r3, [pc, #140]	; (800a5f8 <vTaskStartScheduler+0xdc>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800a570:	4b22      	ldr	r3, [pc, #136]	; (800a5fc <vTaskStartScheduler+0xe0>)
 800a572:	2201      	movs	r2, #1
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	f7f7 fa8e 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7f7 fa09 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a582:	4603      	mov	r3, r0
 800a584:	461a      	mov	r2, r3
 800a586:	4b1e      	ldr	r3, [pc, #120]	; (800a600 <vTaskStartScheduler+0xe4>)
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	4013      	ands	r3, r2
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <vTaskStartScheduler+0x8c>
 800a592:	f7f7 fa80 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800a596:	4603      	mov	r3, r0
 800a598:	4618      	mov	r0, r3
 800a59a:	f7f7 f9ee 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f8 fbda 	bl	8002d5c <prvTraceStoreTaskswitch>
 800a5a8:	4b14      	ldr	r3, [pc, #80]	; (800a5fc <vTaskStartScheduler+0xe0>)
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5ae:	f000 fff7 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5b2:	e00e      	b.n	800a5d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ba:	d10a      	bne.n	800a5d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	607b      	str	r3, [r7, #4]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <vTaskStartScheduler+0xb4>
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000204 	.word	0x20000204
 800a5e0:	0800dbe0 	.word	0x0800dbe0
 800a5e4:	0800ad15 	.word	0x0800ad15
 800a5e8:	200000e0 	.word	0x200000e0
 800a5ec:	20000020 	.word	0x20000020
 800a5f0:	20000200 	.word	0x20000200
 800a5f4:	200001ec 	.word	0x200001ec
 800a5f8:	200001e4 	.word	0x200001e4
 800a5fc:	200000b4 	.word	0x200000b4
 800a600:	20002ee4 	.word	0x20002ee4

0800a604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a608:	4b04      	ldr	r3, [pc, #16]	; (800a61c <vTaskSuspendAll+0x18>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	4a03      	ldr	r2, [pc, #12]	; (800a61c <vTaskSuspendAll+0x18>)
 800a610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a612:	bf00      	nop
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	20000208 	.word	0x20000208

0800a620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a62e:	4b4b      	ldr	r3, [pc, #300]	; (800a75c <xTaskResumeAll+0x13c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <xTaskResumeAll+0x2c>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	603b      	str	r3, [r7, #0]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a64c:	f001 f85a 	bl	800b704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a650:	4b42      	ldr	r3, [pc, #264]	; (800a75c <xTaskResumeAll+0x13c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3b01      	subs	r3, #1
 800a656:	4a41      	ldr	r2, [pc, #260]	; (800a75c <xTaskResumeAll+0x13c>)
 800a658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a65a:	4b40      	ldr	r3, [pc, #256]	; (800a75c <xTaskResumeAll+0x13c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d174      	bne.n	800a74c <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a662:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <xTaskResumeAll+0x140>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d070      	beq.n	800a74c <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a66a:	e041      	b.n	800a6f0 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a66c:	4b3d      	ldr	r3, [pc, #244]	; (800a764 <xTaskResumeAll+0x144>)
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3318      	adds	r3, #24
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fd63 	bl	8009144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fd5e 	bl	8009144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7f7 f983 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a68e:	4603      	mov	r3, r0
 800a690:	461a      	mov	r2, r3
 800a692:	4b35      	ldr	r3, [pc, #212]	; (800a768 <xTaskResumeAll+0x148>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	4013      	ands	r3, r2
 800a698:	b29b      	uxth	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d007      	beq.n	800a6ae <xTaskResumeAll+0x8e>
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7f7 f96b 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f8 f8b1 	bl	8002810 <prvTraceStoreTaskReady>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	409a      	lsls	r2, r3
 800a6b6:	4b2d      	ldr	r3, [pc, #180]	; (800a76c <xTaskResumeAll+0x14c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	4a2b      	ldr	r2, [pc, #172]	; (800a76c <xTaskResumeAll+0x14c>)
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4a28      	ldr	r2, [pc, #160]	; (800a770 <xTaskResumeAll+0x150>)
 800a6ce:	441a      	add	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fe fcd7 	bl	800908a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e0:	4b24      	ldr	r3, [pc, #144]	; (800a774 <xTaskResumeAll+0x154>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d302      	bcc.n	800a6f0 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 800a6ea:	4b23      	ldr	r3, [pc, #140]	; (800a778 <xTaskResumeAll+0x158>)
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f0:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <xTaskResumeAll+0x144>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1b9      	bne.n	800a66c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6fe:	f000 fba5 	bl	800ae4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a702:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <xTaskResumeAll+0x15c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d010      	beq.n	800a730 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a70e:	f000 f849 	bl	800a7a4 <xTaskIncrementTick>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <xTaskResumeAll+0x158>)
 800a71a:	2201      	movs	r2, #1
 800a71c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3b01      	subs	r3, #1
 800a722:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1f1      	bne.n	800a70e <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 800a72a:	4b14      	ldr	r3, [pc, #80]	; (800a77c <xTaskResumeAll+0x15c>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <xTaskResumeAll+0x158>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <xTaskResumeAll+0x160>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a74c:	f001 f80a 	bl	800b764 <vPortExitCritical>

	return xAlreadyYielded;
 800a750:	68bb      	ldr	r3, [r7, #8]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000208 	.word	0x20000208
 800a760:	200001e0 	.word	0x200001e0
 800a764:	200001a0 	.word	0x200001a0
 800a768:	20002ee4 	.word	0x20002ee4
 800a76c:	200001e8 	.word	0x200001e8
 800a770:	200000e4 	.word	0x200000e4
 800a774:	200000e0 	.word	0x200000e0
 800a778:	200001f4 	.word	0x200001f4
 800a77c:	200001f0 	.word	0x200001f0
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a78a:	4b05      	ldr	r3, [pc, #20]	; (800a7a0 <xTaskGetTickCount+0x1c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a790:	687b      	ldr	r3, [r7, #4]
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	200001e4 	.word	0x200001e4

0800a7a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800a7ae:	4b65      	ldr	r3, [pc, #404]	; (800a944 <xTaskIncrementTick+0x1a0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d003      	beq.n	800a7be <xTaskIncrementTick+0x1a>
 800a7b6:	4b64      	ldr	r3, [pc, #400]	; (800a948 <xTaskIncrementTick+0x1a4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d107      	bne.n	800a7ce <xTaskIncrementTick+0x2a>
 800a7be:	4b63      	ldr	r3, [pc, #396]	; (800a94c <xTaskIncrementTick+0x1a8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a61      	ldr	r2, [pc, #388]	; (800a94c <xTaskIncrementTick+0x1a8>)
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	f7f9 f9e7 	bl	8003b9c <prvTracePortGetTimeStamp>
 800a7ce:	4b5d      	ldr	r3, [pc, #372]	; (800a944 <xTaskIncrementTick+0x1a0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <xTaskIncrementTick+0x40>
 800a7d6:	4b5e      	ldr	r3, [pc, #376]	; (800a950 <xTaskIncrementTick+0x1ac>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4619      	mov	r1, r3
 800a7de:	2003      	movs	r0, #3
 800a7e0:	f7f8 fa56 	bl	8002c90 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e4:	4b57      	ldr	r3, [pc, #348]	; (800a944 <xTaskIncrementTick+0x1a0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f040 80a1 	bne.w	800a930 <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7ee:	4b58      	ldr	r3, [pc, #352]	; (800a950 <xTaskIncrementTick+0x1ac>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7f6:	4a56      	ldr	r2, [pc, #344]	; (800a950 <xTaskIncrementTick+0x1ac>)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d120      	bne.n	800a844 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 800a802:	4b54      	ldr	r3, [pc, #336]	; (800a954 <xTaskIncrementTick+0x1b0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <xTaskIncrementTick+0x7e>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	603b      	str	r3, [r7, #0]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xTaskIncrementTick+0x7c>
 800a822:	4b4c      	ldr	r3, [pc, #304]	; (800a954 <xTaskIncrementTick+0x1b0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	4b4b      	ldr	r3, [pc, #300]	; (800a958 <xTaskIncrementTick+0x1b4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a49      	ldr	r2, [pc, #292]	; (800a954 <xTaskIncrementTick+0x1b0>)
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	4a49      	ldr	r2, [pc, #292]	; (800a958 <xTaskIncrementTick+0x1b4>)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	4b49      	ldr	r3, [pc, #292]	; (800a95c <xTaskIncrementTick+0x1b8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	4a47      	ldr	r2, [pc, #284]	; (800a95c <xTaskIncrementTick+0x1b8>)
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	f000 fb04 	bl	800ae4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a844:	4b46      	ldr	r3, [pc, #280]	; (800a960 <xTaskIncrementTick+0x1bc>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d35b      	bcc.n	800a906 <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84e:	4b41      	ldr	r3, [pc, #260]	; (800a954 <xTaskIncrementTick+0x1b0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d104      	bne.n	800a862 <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a858:	4b41      	ldr	r3, [pc, #260]	; (800a960 <xTaskIncrementTick+0x1bc>)
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	601a      	str	r2, [r3, #0]
					break;
 800a860:	e051      	b.n	800a906 <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a862:	4b3c      	ldr	r3, [pc, #240]	; (800a954 <xTaskIncrementTick+0x1b0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	429a      	cmp	r2, r3
 800a878:	d203      	bcs.n	800a882 <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a87a:	4a39      	ldr	r2, [pc, #228]	; (800a960 <xTaskIncrementTick+0x1bc>)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a880:	e041      	b.n	800a906 <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3304      	adds	r3, #4
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fc5c 	bl	8009144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	3318      	adds	r3, #24
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fc53 	bl	8009144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f7f7 f878 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b2e      	ldr	r3, [pc, #184]	; (800a964 <xTaskIncrementTick+0x1c0>)
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <xTaskIncrementTick+0x120>
 800a8b4:	68b8      	ldr	r0, [r7, #8]
 800a8b6:	f7f7 f860 	bl	800197a <prvTraceGetTaskNumberLow16>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f7 ffa6 	bl	8002810 <prvTraceStoreTaskReady>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	409a      	lsls	r2, r3
 800a8cc:	4b26      	ldr	r3, [pc, #152]	; (800a968 <xTaskIncrementTick+0x1c4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	4a25      	ldr	r2, [pc, #148]	; (800a968 <xTaskIncrementTick+0x1c4>)
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4a22      	ldr	r2, [pc, #136]	; (800a96c <xTaskIncrementTick+0x1c8>)
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fe fbcc 	bl	800908a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f6:	4b1e      	ldr	r3, [pc, #120]	; (800a970 <xTaskIncrementTick+0x1cc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3a6      	bcc.n	800a84e <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a904:	e7a3      	b.n	800a84e <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a906:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <xTaskIncrementTick+0x1cc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	4917      	ldr	r1, [pc, #92]	; (800a96c <xTaskIncrementTick+0x1c8>)
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d901      	bls.n	800a922 <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 800a91e:	2301      	movs	r3, #1
 800a920:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a922:	4b14      	ldr	r3, [pc, #80]	; (800a974 <xTaskIncrementTick+0x1d0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 800a92a:	2301      	movs	r3, #1
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	e004      	b.n	800a93a <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <xTaskIncrementTick+0x1a4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	4a04      	ldr	r2, [pc, #16]	; (800a948 <xTaskIncrementTick+0x1a4>)
 800a938:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a93a:	697b      	ldr	r3, [r7, #20]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000208 	.word	0x20000208
 800a948:	200001f0 	.word	0x200001f0
 800a94c:	200000a8 	.word	0x200000a8
 800a950:	200001e4 	.word	0x200001e4
 800a954:	20000198 	.word	0x20000198
 800a958:	2000019c 	.word	0x2000019c
 800a95c:	200001f8 	.word	0x200001f8
 800a960:	20000200 	.word	0x20000200
 800a964:	20002ee4 	.word	0x20002ee4
 800a968:	200001e8 	.word	0x200001e8
 800a96c:	200000e4 	.word	0x200000e4
 800a970:	200000e0 	.word	0x200000e0
 800a974:	200001f4 	.word	0x200001f4

0800a978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a97e:	4b38      	ldr	r3, [pc, #224]	; (800aa60 <vTaskSwitchContext+0xe8>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a986:	4b37      	ldr	r3, [pc, #220]	; (800aa64 <vTaskSwitchContext+0xec>)
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a98c:	e063      	b.n	800aa56 <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 800a98e:	4b35      	ldr	r3, [pc, #212]	; (800aa64 <vTaskSwitchContext+0xec>)
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	4b34      	ldr	r3, [pc, #208]	; (800aa68 <vTaskSwitchContext+0xf0>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	fab3 f383 	clz	r3, r3
 800a9a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	f1c3 031f 	rsb	r3, r3, #31
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	4930      	ldr	r1, [pc, #192]	; (800aa6c <vTaskSwitchContext+0xf4>)
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <vTaskSwitchContext+0x5a>
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4a23      	ldr	r2, [pc, #140]	; (800aa6c <vTaskSwitchContext+0xf4>)
 800a9e0:	4413      	add	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	605a      	str	r2, [r3, #4]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d104      	bne.n	800aa04 <vTaskSwitchContext+0x8c>
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	605a      	str	r2, [r3, #4]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	4a19      	ldr	r2, [pc, #100]	; (800aa70 <vTaskSwitchContext+0xf8>)
 800aa0c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <vTaskSwitchContext+0xfc>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f7f7 f83f 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f6 ffba 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800aa20:	4603      	mov	r3, r0
 800aa22:	461a      	mov	r2, r3
 800aa24:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <vTaskSwitchContext+0x100>)
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00a      	beq.n	800aa46 <vTaskSwitchContext+0xce>
 800aa30:	f7f7 f831 	bl	8001a96 <prvTraceGetCurrentTaskHandle>
 800aa34:	4603      	mov	r3, r0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f6 ff9f 	bl	800197a <prvTraceGetTaskNumberLow16>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7f8 f98b 	bl	8002d5c <prvTraceStoreTaskswitch>
 800aa46:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <vTaskSwitchContext+0xfc>)
 800aa48:	2202      	movs	r2, #2
 800aa4a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <vTaskSwitchContext+0xf8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3354      	adds	r3, #84	; 0x54
 800aa52:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <vTaskSwitchContext+0x104>)
 800aa54:	6013      	str	r3, [r2, #0]
}
 800aa56:	bf00      	nop
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000208 	.word	0x20000208
 800aa64:	200001f4 	.word	0x200001f4
 800aa68:	200001e8 	.word	0x200001e8
 800aa6c:	200000e4 	.word	0x200000e4
 800aa70:	200000e0 	.word	0x200000e0
 800aa74:	200000b4 	.word	0x200000b4
 800aa78:	20002ee4 	.word	0x20002ee4
 800aa7c:	20000020 	.word	0x20000020

0800aa80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <vTaskPlaceOnEventList+0x44>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3318      	adds	r3, #24
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fe fb0f 	bl	80090d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aab4:	2101      	movs	r1, #1
 800aab6:	6838      	ldr	r0, [r7, #0]
 800aab8:	f000 fc7e 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	200000e0 	.word	0x200000e0

0800aac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3318      	adds	r3, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fb23 	bl	8009144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aafe:	4b27      	ldr	r3, [pc, #156]	; (800ab9c <xTaskRemoveFromEventList+0xd4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d12f      	bne.n	800ab66 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fb1a 	bl	8009144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab10:	6938      	ldr	r0, [r7, #16]
 800ab12:	f7f6 ff3f 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800ab16:	4603      	mov	r3, r0
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4b21      	ldr	r3, [pc, #132]	; (800aba0 <xTaskRemoveFromEventList+0xd8>)
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	4013      	ands	r3, r2
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <xTaskRemoveFromEventList+0x6e>
 800ab26:	6938      	ldr	r0, [r7, #16]
 800ab28:	f7f6 ff27 	bl	800197a <prvTraceGetTaskNumberLow16>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f7 fe6d 	bl	8002810 <prvTraceStoreTaskReady>
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	409a      	lsls	r2, r3
 800ab3e:	4b19      	ldr	r3, [pc, #100]	; (800aba4 <xTaskRemoveFromEventList+0xdc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <xTaskRemoveFromEventList+0xdc>)
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <xTaskRemoveFromEventList+0xe0>)
 800ab56:	441a      	add	r2, r3
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	f7fe fa93 	bl	800908a <vListInsertEnd>
 800ab64:	e005      	b.n	800ab72 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	3318      	adds	r3, #24
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	480f      	ldr	r0, [pc, #60]	; (800abac <xTaskRemoveFromEventList+0xe4>)
 800ab6e:	f7fe fa8c 	bl	800908a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab76:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <xTaskRemoveFromEventList+0xe8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d905      	bls.n	800ab8c <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab80:	2301      	movs	r3, #1
 800ab82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab84:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <xTaskRemoveFromEventList+0xec>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	601a      	str	r2, [r3, #0]
 800ab8a:	e001      	b.n	800ab90 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab90:	697b      	ldr	r3, [r7, #20]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000208 	.word	0x20000208
 800aba0:	20002ee4 	.word	0x20002ee4
 800aba4:	200001e8 	.word	0x200001e8
 800aba8:	200000e4 	.word	0x200000e4
 800abac:	200001a0 	.word	0x200001a0
 800abb0:	200000e0 	.word	0x200000e0
 800abb4:	200001f4 	.word	0x200001f4

0800abb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <vTaskInternalSetTimeOutState+0x24>)
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abc8:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <vTaskInternalSetTimeOutState+0x28>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	605a      	str	r2, [r3, #4]
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	200001f8 	.word	0x200001f8
 800abe0:	200001e4 	.word	0x200001e4

0800abe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	613b      	str	r3, [r7, #16]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac26:	f000 fd6d 	bl	800b704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac2a:	4b1d      	ldr	r3, [pc, #116]	; (800aca0 <xTaskCheckForTimeOut+0xbc>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac42:	d102      	bne.n	800ac4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61fb      	str	r3, [r7, #28]
 800ac48:	e023      	b.n	800ac92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4b15      	ldr	r3, [pc, #84]	; (800aca4 <xTaskCheckForTimeOut+0xc0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d007      	beq.n	800ac66 <xTaskCheckForTimeOut+0x82>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	69ba      	ldr	r2, [r7, #24]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d302      	bcc.n	800ac66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac60:	2301      	movs	r3, #1
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	e015      	b.n	800ac92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d20b      	bcs.n	800ac88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff ff9b 	bl	800abb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
 800ac86:	e004      	b.n	800ac92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac92:	f000 fd67 	bl	800b764 <vPortExitCritical>

	return xReturn;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3720      	adds	r7, #32
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200001e4 	.word	0x200001e4
 800aca4:	200001f8 	.word	0x200001f8

0800aca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800acac:	4b03      	ldr	r3, [pc, #12]	; (800acbc <vTaskMissedYield+0x14>)
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
}
 800acb2:	bf00      	nop
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	200001f4 	.word	0x200001f4

0800acc0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	e001      	b.n	800acde <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800acde:	68fb      	ldr	r3, [r7, #12]
	}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800ad06:	bf00      	nop
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
	...

0800ad14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad1c:	f000 f852 	bl	800adc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad20:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <prvIdleTask+0x28>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d9f9      	bls.n	800ad1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad28:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <prvIdleTask+0x2c>)
 800ad2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad38:	e7f0      	b.n	800ad1c <prvIdleTask+0x8>
 800ad3a:	bf00      	nop
 800ad3c:	200000e4 	.word	0x200000e4
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	e00c      	b.n	800ad6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4a12      	ldr	r2, [pc, #72]	; (800ada4 <prvInitialiseTaskLists+0x60>)
 800ad5c:	4413      	add	r3, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe f966 	bl	8009030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3301      	adds	r3, #1
 800ad68:	607b      	str	r3, [r7, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b06      	cmp	r3, #6
 800ad6e:	d9ef      	bls.n	800ad50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad70:	480d      	ldr	r0, [pc, #52]	; (800ada8 <prvInitialiseTaskLists+0x64>)
 800ad72:	f7fe f95d 	bl	8009030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad76:	480d      	ldr	r0, [pc, #52]	; (800adac <prvInitialiseTaskLists+0x68>)
 800ad78:	f7fe f95a 	bl	8009030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad7c:	480c      	ldr	r0, [pc, #48]	; (800adb0 <prvInitialiseTaskLists+0x6c>)
 800ad7e:	f7fe f957 	bl	8009030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad82:	480c      	ldr	r0, [pc, #48]	; (800adb4 <prvInitialiseTaskLists+0x70>)
 800ad84:	f7fe f954 	bl	8009030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad88:	480b      	ldr	r0, [pc, #44]	; (800adb8 <prvInitialiseTaskLists+0x74>)
 800ad8a:	f7fe f951 	bl	8009030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <prvInitialiseTaskLists+0x78>)
 800ad90:	4a05      	ldr	r2, [pc, #20]	; (800ada8 <prvInitialiseTaskLists+0x64>)
 800ad92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <prvInitialiseTaskLists+0x7c>)
 800ad96:	4a05      	ldr	r2, [pc, #20]	; (800adac <prvInitialiseTaskLists+0x68>)
 800ad98:	601a      	str	r2, [r3, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200000e4 	.word	0x200000e4
 800ada8:	20000170 	.word	0x20000170
 800adac:	20000184 	.word	0x20000184
 800adb0:	200001a0 	.word	0x200001a0
 800adb4:	200001b4 	.word	0x200001b4
 800adb8:	200001cc 	.word	0x200001cc
 800adbc:	20000198 	.word	0x20000198
 800adc0:	2000019c 	.word	0x2000019c

0800adc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adca:	e019      	b.n	800ae00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adcc:	f000 fc9a 	bl	800b704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add0:	4b10      	ldr	r3, [pc, #64]	; (800ae14 <prvCheckTasksWaitingTermination+0x50>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	4618      	mov	r0, r3
 800adde:	f7fe f9b1 	bl	8009144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <prvCheckTasksWaitingTermination+0x54>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	4a0b      	ldr	r2, [pc, #44]	; (800ae18 <prvCheckTasksWaitingTermination+0x54>)
 800adea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800adec:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <prvCheckTasksWaitingTermination+0x58>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <prvCheckTasksWaitingTermination+0x58>)
 800adf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800adf6:	f000 fcb5 	bl	800b764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f810 	bl	800ae20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <prvCheckTasksWaitingTermination+0x58>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e1      	bne.n	800adcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	200001b4 	.word	0x200001b4
 800ae18:	200001e0 	.word	0x200001e0
 800ae1c:	200001c8 	.word	0x200001c8

0800ae20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3354      	adds	r3, #84	; 0x54
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fff7 	bl	800be20 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fe22 	bl	800ba80 <vPortFree>
			vPortFree( pxTCB );
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fe1f 	bl	800ba80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae52:	4b0c      	ldr	r3, [pc, #48]	; (800ae84 <prvResetNextTaskUnblockTime+0x38>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d104      	bne.n	800ae66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae5c:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <prvResetNextTaskUnblockTime+0x3c>)
 800ae5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae64:	e008      	b.n	800ae78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae66:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <prvResetNextTaskUnblockTime+0x38>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <prvResetNextTaskUnblockTime+0x3c>)
 800ae76:	6013      	str	r3, [r2, #0]
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	20000198 	.word	0x20000198
 800ae88:	20000200 	.word	0x20000200

0800ae8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <xTaskGetCurrentTaskHandle+0x1c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ae98:	687b      	ldr	r3, [r7, #4]
	}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	200000e0 	.word	0x200000e0

0800aeac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <xTaskGetSchedulerState+0x34>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeba:	2301      	movs	r3, #1
 800aebc:	607b      	str	r3, [r7, #4]
 800aebe:	e008      	b.n	800aed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec0:	4b08      	ldr	r3, [pc, #32]	; (800aee4 <xTaskGetSchedulerState+0x38>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aec8:	2302      	movs	r3, #2
 800aeca:	607b      	str	r3, [r7, #4]
 800aecc:	e001      	b.n	800aed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aece:	2300      	movs	r3, #0
 800aed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aed2:	687b      	ldr	r3, [r7, #4]
	}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	200001ec 	.word	0x200001ec
 800aee4:	20000208 	.word	0x20000208

0800aee8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 80a0 	beq.w	800b040 <xTaskPriorityInherit+0x158>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b51      	ldr	r3, [pc, #324]	; (800b04c <xTaskPriorityInherit+0x164>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	f080 808f 	bcs.w	800b02e <xTaskPriorityInherit+0x146>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	db06      	blt.n	800af26 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af18:	4b4c      	ldr	r3, [pc, #304]	; (800b04c <xTaskPriorityInherit+0x164>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	f1c3 0207 	rsb	r2, r3, #7
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	6959      	ldr	r1, [r3, #20]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4a46      	ldr	r2, [pc, #280]	; (800b050 <xTaskPriorityInherit+0x168>)
 800af38:	4413      	add	r3, r2
 800af3a:	4299      	cmp	r1, r3
 800af3c:	d142      	bne.n	800afc4 <xTaskPriorityInherit+0xdc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	3304      	adds	r3, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe f8fe 	bl	8009144 <uxListRemove>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <xTaskPriorityInherit+0x7c>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	2201      	movs	r2, #1
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	43da      	mvns	r2, r3
 800af5a:	4b3e      	ldr	r3, [pc, #248]	; (800b054 <xTaskPriorityInherit+0x16c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4013      	ands	r3, r2
 800af60:	4a3c      	ldr	r2, [pc, #240]	; (800b054 <xTaskPriorityInherit+0x16c>)
 800af62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af64:	4b39      	ldr	r3, [pc, #228]	; (800b04c <xTaskPriorityInherit+0x164>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af6e:	68b8      	ldr	r0, [r7, #8]
 800af70:	f7f6 fd10 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	4b37      	ldr	r3, [pc, #220]	; (800b058 <xTaskPriorityInherit+0x170>)
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	4013      	ands	r3, r2
 800af7e:	b29b      	uxth	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <xTaskPriorityInherit+0xac>
 800af84:	68b8      	ldr	r0, [r7, #8]
 800af86:	f7f6 fcf8 	bl	800197a <prvTraceGetTaskNumberLow16>
 800af8a:	4603      	mov	r3, r0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	4618      	mov	r0, r3
 800af90:	f7f7 fc3e 	bl	8002810 <prvTraceStoreTaskReady>
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	2201      	movs	r2, #1
 800af9a:	409a      	lsls	r2, r3
 800af9c:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <xTaskPriorityInherit+0x16c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	4a2c      	ldr	r2, [pc, #176]	; (800b054 <xTaskPriorityInherit+0x16c>)
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4a27      	ldr	r2, [pc, #156]	; (800b050 <xTaskPriorityInherit+0x168>)
 800afb4:	441a      	add	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7fe f864 	bl	800908a <vListInsertEnd>
 800afc2:	e004      	b.n	800afce <xTaskPriorityInherit+0xe6>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afc4:	4b21      	ldr	r3, [pc, #132]	; (800b04c <xTaskPriorityInherit+0x164>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800afce:	68b8      	ldr	r0, [r7, #8]
 800afd0:	f7f6 fce0 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	4b1f      	ldr	r3, [pc, #124]	; (800b058 <xTaskPriorityInherit+0x170>)
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	4013      	ands	r3, r2
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d021      	beq.n	800b028 <xTaskPriorityInherit+0x140>
 800afe4:	68b8      	ldr	r0, [r7, #8]
 800afe6:	f7f6 fcc8 	bl	800197a <prvTraceGetTaskNumberLow16>
 800afea:	4603      	mov	r3, r0
 800afec:	b2db      	uxtb	r3, r3
 800afee:	461c      	mov	r4, r3
 800aff0:	68b8      	ldr	r0, [r7, #8]
 800aff2:	f7f6 fcc2 	bl	800197a <prvTraceGetTaskNumberLow16>
 800aff6:	4603      	mov	r3, r0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	4619      	mov	r1, r3
 800affc:	2003      	movs	r0, #3
 800affe:	f7f7 ff5b 	bl	8002eb8 <prvTraceGetPriorityProperty>
 800b002:	4603      	mov	r3, r0
 800b004:	4622      	mov	r2, r4
 800b006:	2103      	movs	r1, #3
 800b008:	208e      	movs	r0, #142	; 0x8e
 800b00a:	f7f7 fd7b 	bl	8002b04 <prvTraceStoreKernelCallWithParam>
 800b00e:	68b8      	ldr	r0, [r7, #8]
 800b010:	f7f6 fcb3 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b014:	4603      	mov	r3, r0
 800b016:	b2d9      	uxtb	r1, r3
 800b018:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <xTaskPriorityInherit+0x164>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	461a      	mov	r2, r3
 800b022:	2003      	movs	r0, #3
 800b024:	f7f7 ff0c 	bl	8002e40 <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b028:	2301      	movs	r3, #1
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	e008      	b.n	800b040 <xTaskPriorityInherit+0x158>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b032:	4b06      	ldr	r3, [pc, #24]	; (800b04c <xTaskPriorityInherit+0x164>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	429a      	cmp	r2, r3
 800b03a:	d201      	bcs.n	800b040 <xTaskPriorityInherit+0x158>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b03c:	2301      	movs	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b040:	68fb      	ldr	r3, [r7, #12]
	}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bd90      	pop	{r4, r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200000e0 	.word	0x200000e0
 800b050:	200000e4 	.word	0x200000e4
 800b054:	200001e8 	.word	0x200001e8
 800b058:	20002ee4 	.word	0x20002ee4

0800b05c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80af 	beq.w	800b1d2 <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b074:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <xTaskPriorityDisinherit+0x180>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d00a      	beq.n	800b094 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60fb      	str	r3, [r7, #12]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	60bb      	str	r3, [r7, #8]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0b6:	1e5a      	subs	r2, r3, #1
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f000 8084 	beq.w	800b1d2 <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d17f      	bne.n	800b1d2 <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe f834 	bl	8009144 <uxListRemove>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d115      	bne.n	800b10e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	493e      	ldr	r1, [pc, #248]	; (800b1e0 <xTaskPriorityDisinherit+0x184>)
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	440b      	add	r3, r1
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <xTaskPriorityDisinherit+0xb2>
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b102:	43da      	mvns	r2, r3
 800b104:	4b37      	ldr	r3, [pc, #220]	; (800b1e4 <xTaskPriorityDisinherit+0x188>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4013      	ands	r3, r2
 800b10a:	4a36      	ldr	r2, [pc, #216]	; (800b1e4 <xTaskPriorityDisinherit+0x188>)
 800b10c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b10e:	6938      	ldr	r0, [r7, #16]
 800b110:	f7f6 fc40 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800b114:	4603      	mov	r3, r0
 800b116:	461a      	mov	r2, r3
 800b118:	4b33      	ldr	r3, [pc, #204]	; (800b1e8 <xTaskPriorityDisinherit+0x18c>)
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	4013      	ands	r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	d020      	beq.n	800b166 <xTaskPriorityDisinherit+0x10a>
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f7f6 fc28 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b12a:	4603      	mov	r3, r0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	461c      	mov	r4, r3
 800b130:	6938      	ldr	r0, [r7, #16]
 800b132:	f7f6 fc22 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b136:	4603      	mov	r3, r0
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	4619      	mov	r1, r3
 800b13c:	2003      	movs	r0, #3
 800b13e:	f7f7 febb 	bl	8002eb8 <prvTraceGetPriorityProperty>
 800b142:	4603      	mov	r3, r0
 800b144:	4622      	mov	r2, r4
 800b146:	2103      	movs	r1, #3
 800b148:	208f      	movs	r0, #143	; 0x8f
 800b14a:	f7f7 fcdb 	bl	8002b04 <prvTraceStoreKernelCallWithParam>
 800b14e:	6938      	ldr	r0, [r7, #16]
 800b150:	f7f6 fc13 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b154:	4603      	mov	r3, r0
 800b156:	b2d9      	uxtb	r1, r3
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	461a      	mov	r2, r3
 800b160:	2003      	movs	r0, #3
 800b162:	f7f7 fe6d 	bl	8002e40 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	f1c3 0207 	rsb	r2, r3, #7
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b17a:	6938      	ldr	r0, [r7, #16]
 800b17c:	f7f6 fc0a 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800b180:	4603      	mov	r3, r0
 800b182:	461a      	mov	r2, r3
 800b184:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <xTaskPriorityDisinherit+0x18c>)
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	4013      	ands	r3, r2
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d007      	beq.n	800b1a0 <xTaskPriorityDisinherit+0x144>
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f7f6 fbf2 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b196:	4603      	mov	r3, r0
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7f7 fb38 	bl	8002810 <prvTraceStoreTaskReady>
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	409a      	lsls	r2, r3
 800b1a8:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <xTaskPriorityDisinherit+0x188>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	4a0d      	ldr	r2, [pc, #52]	; (800b1e4 <xTaskPriorityDisinherit+0x188>)
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <xTaskPriorityDisinherit+0x184>)
 800b1c0:	441a      	add	r2, r3
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7fd ff5e 	bl	800908a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1d2:	697b      	ldr	r3, [r7, #20]
	}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd90      	pop	{r4, r7, pc}
 800b1dc:	200000e0 	.word	0x200000e0
 800b1e0:	200000e4 	.word	0x200000e4
 800b1e4:	200001e8 	.word	0x200001e8
 800b1e8:	20002ee4 	.word	0x20002ee4

0800b1ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b089      	sub	sp, #36	; 0x24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	f000 80b9 	beq.w	800b378 <vTaskPriorityDisinheritAfterTimeout+0x18c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10a      	bne.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	60fb      	str	r3, [r7, #12]
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d902      	bls.n	800b234 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	e002      	b.n	800b23a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b238:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	429a      	cmp	r2, r3
 800b242:	f000 8099 	beq.w	800b378 <vTaskPriorityDisinheritAfterTimeout+0x18c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	f040 8093 	bne.w	800b378 <vTaskPriorityDisinheritAfterTimeout+0x18c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b252:	4b4b      	ldr	r3, [pc, #300]	; (800b380 <vTaskPriorityDisinheritAfterTimeout+0x194>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d10a      	bne.n	800b272 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60bb      	str	r3, [r7, #8]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b272:	69b8      	ldr	r0, [r7, #24]
 800b274:	f7f6 fb8e 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	4b41      	ldr	r3, [pc, #260]	; (800b384 <vTaskPriorityDisinheritAfterTimeout+0x198>)
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	4013      	ands	r3, r2
 800b282:	b29b      	uxth	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d020      	beq.n	800b2ca <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b288:	69b8      	ldr	r0, [r7, #24]
 800b28a:	f7f6 fb76 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b28e:	4603      	mov	r3, r0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	461c      	mov	r4, r3
 800b294:	69b8      	ldr	r0, [r7, #24]
 800b296:	f7f6 fb70 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b29a:	4603      	mov	r3, r0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	4619      	mov	r1, r3
 800b2a0:	2003      	movs	r0, #3
 800b2a2:	f7f7 fe09 	bl	8002eb8 <prvTraceGetPriorityProperty>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	2103      	movs	r1, #3
 800b2ac:	208f      	movs	r0, #143	; 0x8f
 800b2ae:	f7f7 fc29 	bl	8002b04 <prvTraceStoreKernelCallWithParam>
 800b2b2:	69b8      	ldr	r0, [r7, #24]
 800b2b4:	f7f6 fb61 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	b2d9      	uxtb	r1, r3
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	2003      	movs	r0, #3
 800b2c6:	f7f7 fdbb 	bl	8002e40 <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	db04      	blt.n	800b2e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	f1c3 0207 	rsb	r2, r3, #7
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	6959      	ldr	r1, [r3, #20]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4a24      	ldr	r2, [pc, #144]	; (800b388 <vTaskPriorityDisinheritAfterTimeout+0x19c>)
 800b2f8:	4413      	add	r3, r2
 800b2fa:	4299      	cmp	r1, r3
 800b2fc:	d13c      	bne.n	800b378 <vTaskPriorityDisinheritAfterTimeout+0x18c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	3304      	adds	r3, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f7fd ff1e 	bl	8009144 <uxListRemove>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <vTaskPriorityDisinheritAfterTimeout+0x138>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	2201      	movs	r2, #1
 800b314:	fa02 f303 	lsl.w	r3, r2, r3
 800b318:	43da      	mvns	r2, r3
 800b31a:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4013      	ands	r3, r2
 800b320:	4a1a      	ldr	r2, [pc, #104]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800b322:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b324:	69b8      	ldr	r0, [r7, #24]
 800b326:	f7f6 fb35 	bl	8001994 <prvTraceGetTaskNumberHigh16>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	4b15      	ldr	r3, [pc, #84]	; (800b384 <vTaskPriorityDisinheritAfterTimeout+0x198>)
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	4013      	ands	r3, r2
 800b334:	b29b      	uxth	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d007      	beq.n	800b34a <vTaskPriorityDisinheritAfterTimeout+0x15e>
 800b33a:	69b8      	ldr	r0, [r7, #24]
 800b33c:	f7f6 fb1d 	bl	800197a <prvTraceGetTaskNumberLow16>
 800b340:	4603      	mov	r3, r0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	4618      	mov	r0, r3
 800b346:	f7f7 fa63 	bl	8002810 <prvTraceStoreTaskReady>
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	2201      	movs	r2, #1
 800b350:	409a      	lsls	r2, r3
 800b352:	4b0e      	ldr	r3, [pc, #56]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4313      	orrs	r3, r2
 800b358:	4a0c      	ldr	r2, [pc, #48]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b360:	4613      	mov	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4a07      	ldr	r2, [pc, #28]	; (800b388 <vTaskPriorityDisinheritAfterTimeout+0x19c>)
 800b36a:	441a      	add	r2, r3
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	3304      	adds	r3, #4
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f7fd fe89 	bl	800908a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b378:	bf00      	nop
 800b37a:	3724      	adds	r7, #36	; 0x24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd90      	pop	{r4, r7, pc}
 800b380:	200000e0 	.word	0x200000e0
 800b384:	20002ee4 	.word	0x20002ee4
 800b388:	200000e4 	.word	0x200000e4
 800b38c:	200001e8 	.word	0x200001e8

0800b390 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b394:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b39c:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3a2:	3201      	adds	r2, #1
 800b3a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
	}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	200000e0 	.word	0x200000e0

0800b3b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3c2:	4b29      	ldr	r3, [pc, #164]	; (800b468 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3c8:	4b28      	ldr	r3, [pc, #160]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fd feb8 	bl	8009144 <uxListRemove>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b3da:	4b24      	ldr	r3, [pc, #144]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e6:	43da      	mvns	r2, r3
 800b3e8:	4b21      	ldr	r3, [pc, #132]	; (800b470 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	4a20      	ldr	r2, [pc, #128]	; (800b470 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f8:	d10a      	bne.n	800b410 <prvAddCurrentTaskToDelayedList+0x58>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b400:	4b1a      	ldr	r3, [pc, #104]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3304      	adds	r3, #4
 800b406:	4619      	mov	r1, r3
 800b408:	481a      	ldr	r0, [pc, #104]	; (800b474 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b40a:	f7fd fe3e 	bl	800908a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b40e:	e026      	b.n	800b45e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b418:	4b14      	ldr	r3, [pc, #80]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	429a      	cmp	r2, r3
 800b426:	d209      	bcs.n	800b43c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b428:	4b13      	ldr	r3, [pc, #76]	; (800b478 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3304      	adds	r3, #4
 800b432:	4619      	mov	r1, r3
 800b434:	4610      	mov	r0, r2
 800b436:	f7fd fe4c 	bl	80090d2 <vListInsert>
}
 800b43a:	e010      	b.n	800b45e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b43c:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	4b0a      	ldr	r3, [pc, #40]	; (800b46c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3304      	adds	r3, #4
 800b446:	4619      	mov	r1, r3
 800b448:	4610      	mov	r0, r2
 800b44a:	f7fd fe42 	bl	80090d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b44e:	4b0c      	ldr	r3, [pc, #48]	; (800b480 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	429a      	cmp	r2, r3
 800b456:	d202      	bcs.n	800b45e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b458:	4a09      	ldr	r2, [pc, #36]	; (800b480 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6013      	str	r3, [r2, #0]
}
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	200001e4 	.word	0x200001e4
 800b46c:	200000e0 	.word	0x200000e0
 800b470:	200001e8 	.word	0x200001e8
 800b474:	200001cc 	.word	0x200001cc
 800b478:	2000019c 	.word	0x2000019c
 800b47c:	20000198 	.word	0x20000198
 800b480:	20000200 	.word	0x20000200

0800b484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3b04      	subs	r3, #4
 800b494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3b04      	subs	r3, #4
 800b4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f023 0201 	bic.w	r2, r3, #1
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4b4:	4a0c      	ldr	r2, [pc, #48]	; (800b4e8 <pxPortInitialiseStack+0x64>)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b14      	subs	r3, #20
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b04      	subs	r3, #4
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f06f 0202 	mvn.w	r2, #2
 800b4d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3b20      	subs	r3, #32
 800b4d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	0800b4ed 	.word	0x0800b4ed

0800b4ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4f6:	4b12      	ldr	r3, [pc, #72]	; (800b540 <prvTaskExitError+0x54>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d00a      	beq.n	800b516 <prvTaskExitError+0x2a>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <prvTaskExitError+0x28>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60bb      	str	r3, [r7, #8]
}
 800b528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b52a:	bf00      	nop
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0fc      	beq.n	800b52c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	2000001c 	.word	0x2000001c
	...

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	200000e0 	.word	0x200000e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	; (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b4e      	ldr	r3, [pc, #312]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a4e      	ldr	r2, [pc, #312]	; (800b6e4 <xPortStartScheduler+0x144>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	61bb      	str	r3, [r7, #24]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c6:	4b46      	ldr	r3, [pc, #280]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a47      	ldr	r2, [pc, #284]	; (800b6e8 <xPortStartScheduler+0x148>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	617b      	str	r3, [r7, #20]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5e6:	4b41      	ldr	r3, [pc, #260]	; (800b6ec <xPortStartScheduler+0x14c>)
 800b5e8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b39      	ldr	r3, [pc, #228]	; (800b6f0 <xPortStartScheduler+0x150>)
 800b60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b60e:	4b39      	ldr	r3, [pc, #228]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b614:	e009      	b.n	800b62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b616:	4b37      	ldr	r3, [pc, #220]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a35      	ldr	r2, [pc, #212]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d0ef      	beq.n	800b616 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800b636:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1c3 0307 	rsb	r3, r3, #7
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d00a      	beq.n	800b658 <xPortStartScheduler+0xb8>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	613b      	str	r3, [r7, #16]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b658:	4b26      	ldr	r3, [pc, #152]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f1c3 0307 	rsb	r3, r3, #7
 800b660:	2b04      	cmp	r3, #4
 800b662:	d00a      	beq.n	800b67a <xPortStartScheduler+0xda>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	60fb      	str	r3, [r7, #12]
}
 800b676:	bf00      	nop
 800b678:	e7fe      	b.n	800b678 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b67a:	4b1e      	ldr	r3, [pc, #120]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	4a1c      	ldr	r2, [pc, #112]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b682:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b684:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b68c:	4a19      	ldr	r2, [pc, #100]	; (800b6f4 <xPortStartScheduler+0x154>)
 800b68e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	b2da      	uxtb	r2, r3
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b698:	4b17      	ldr	r3, [pc, #92]	; (800b6f8 <xPortStartScheduler+0x158>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a16      	ldr	r2, [pc, #88]	; (800b6f8 <xPortStartScheduler+0x158>)
 800b69e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6a4:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <xPortStartScheduler+0x158>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a13      	ldr	r2, [pc, #76]	; (800b6f8 <xPortStartScheduler+0x158>)
 800b6aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6b0:	f000 f8dc 	bl	800b86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <xPortStartScheduler+0x15c>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6ba:	f000 f8fb 	bl	800b8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6be:	4b10      	ldr	r3, [pc, #64]	; (800b700 <xPortStartScheduler+0x160>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a0f      	ldr	r2, [pc, #60]	; (800b700 <xPortStartScheduler+0x160>)
 800b6c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6ca:	f7ff ff55 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6ce:	f7ff f953 	bl	800a978 <vTaskSwitchContext>
	prvTaskExitError();
 800b6d2:	f7ff ff0b 	bl	800b4ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	e000ed00 	.word	0xe000ed00
 800b6e4:	410fc271 	.word	0x410fc271
 800b6e8:	410fc270 	.word	0x410fc270
 800b6ec:	e000e400 	.word	0xe000e400
 800b6f0:	2000020c 	.word	0x2000020c
 800b6f4:	20000210 	.word	0x20000210
 800b6f8:	e000ed20 	.word	0xe000ed20
 800b6fc:	2000001c 	.word	0x2000001c
 800b700:	e000ef34 	.word	0xe000ef34

0800b704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	607b      	str	r3, [r7, #4]
}
 800b71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b71e:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <vPortEnterCritical+0x58>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	4a0d      	ldr	r2, [pc, #52]	; (800b75c <vPortEnterCritical+0x58>)
 800b726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b728:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <vPortEnterCritical+0x58>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d10f      	bne.n	800b750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b730:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <vPortEnterCritical+0x5c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <vPortEnterCritical+0x4c>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	603b      	str	r3, [r7, #0]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <vPortEnterCritical+0x4a>
	}
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	2000001c 	.word	0x2000001c
 800b760:	e000ed04 	.word	0xe000ed04

0800b764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b76a:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <vPortExitCritical+0x50>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <vPortExitCritical+0x24>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	607b      	str	r3, [r7, #4]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <vPortExitCritical+0x50>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <vPortExitCritical+0x50>)
 800b790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <vPortExitCritical+0x50>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <vPortExitCritical+0x42>
 800b79a:	2300      	movs	r3, #0
 800b79c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	2000001c 	.word	0x2000001c
	...

0800b7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7c0:	f3ef 8009 	mrs	r0, PSP
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4b15      	ldr	r3, [pc, #84]	; (800b820 <pxCurrentTCBConst>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	f01e 0f10 	tst.w	lr, #16
 800b7d0:	bf08      	it	eq
 800b7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	6010      	str	r0, [r2, #0]
 800b7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7e4:	f380 8811 	msr	BASEPRI, r0
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f7ff f8c2 	bl	800a978 <vTaskSwitchContext>
 800b7f4:	f04f 0000 	mov.w	r0, #0
 800b7f8:	f380 8811 	msr	BASEPRI, r0
 800b7fc:	bc09      	pop	{r0, r3}
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	6808      	ldr	r0, [r1, #0]
 800b802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b806:	f01e 0f10 	tst.w	lr, #16
 800b80a:	bf08      	it	eq
 800b80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b810:	f380 8809 	msr	PSP, r0
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w

0800b820 <pxCurrentTCBConst>:
 800b820:	200000e0 	.word	0x200000e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop

0800b828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	607b      	str	r3, [r7, #4]
}
 800b840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b842:	f7fe ffaf 	bl	800a7a4 <xTaskIncrementTick>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <SysTick_Handler+0x40>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	f383 8811 	msr	BASEPRI, r3
}
 800b85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b870:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <vPortSetupTimerInterrupt+0x38>)
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <vPortSetupTimerInterrupt+0x3c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a0a      	ldr	r2, [pc, #40]	; (800b8ac <vPortSetupTimerInterrupt+0x40>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	099b      	lsrs	r3, r3, #6
 800b888:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <vPortSetupTimerInterrupt+0x44>)
 800b88a:	3b01      	subs	r3, #1
 800b88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b88e:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b890:	2207      	movs	r2, #7
 800b892:	601a      	str	r2, [r3, #0]
}
 800b894:	bf00      	nop
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	e000e010 	.word	0xe000e010
 800b8a4:	e000e018 	.word	0xe000e018
 800b8a8:	20000004 	.word	0x20000004
 800b8ac:	10624dd3 	.word	0x10624dd3
 800b8b0:	e000e014 	.word	0xe000e014

0800b8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8c4 <vPortEnableVFP+0x10>
 800b8b8:	6801      	ldr	r1, [r0, #0]
 800b8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8be:	6001      	str	r1, [r0, #0]
 800b8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8c2:	bf00      	nop
 800b8c4:	e000ed88 	.word	0xe000ed88

0800b8c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08a      	sub	sp, #40	; 0x28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8d4:	f7fe fe96 	bl	800a604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8d8:	4b63      	ldr	r3, [pc, #396]	; (800ba68 <pvPortMalloc+0x1a0>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8e0:	f000 f938 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8e4:	4b61      	ldr	r3, [pc, #388]	; (800ba6c <pvPortMalloc+0x1a4>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 8093 	bne.w	800ba18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01d      	beq.n	800b934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8f8:	2208      	movs	r2, #8
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	2b00      	cmp	r3, #0
 800b908:	d014      	beq.n	800b934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f023 0307 	bic.w	r3, r3, #7
 800b910:	3308      	adds	r3, #8
 800b912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <pvPortMalloc+0x6c>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	617b      	str	r3, [r7, #20]
}
 800b930:	bf00      	nop
 800b932:	e7fe      	b.n	800b932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d06e      	beq.n	800ba18 <pvPortMalloc+0x150>
 800b93a:	4b4d      	ldr	r3, [pc, #308]	; (800ba70 <pvPortMalloc+0x1a8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d869      	bhi.n	800ba18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b944:	4b4b      	ldr	r3, [pc, #300]	; (800ba74 <pvPortMalloc+0x1ac>)
 800b946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b948:	4b4a      	ldr	r3, [pc, #296]	; (800ba74 <pvPortMalloc+0x1ac>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b94e:	e004      	b.n	800b95a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d903      	bls.n	800b96c <pvPortMalloc+0xa4>
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f1      	bne.n	800b950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b96c:	4b3e      	ldr	r3, [pc, #248]	; (800ba68 <pvPortMalloc+0x1a0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	429a      	cmp	r2, r3
 800b974:	d050      	beq.n	800ba18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2208      	movs	r2, #8
 800b97c:	4413      	add	r3, r2
 800b97e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	1ad2      	subs	r2, r2, r3
 800b990:	2308      	movs	r3, #8
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	429a      	cmp	r2, r3
 800b996:	d91f      	bls.n	800b9d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4413      	add	r3, r2
 800b99e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	613b      	str	r3, [r7, #16]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	1ad2      	subs	r2, r2, r3
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9d2:	69b8      	ldr	r0, [r7, #24]
 800b9d4:	f000 f920 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9d8:	4b25      	ldr	r3, [pc, #148]	; (800ba70 <pvPortMalloc+0x1a8>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	4a23      	ldr	r2, [pc, #140]	; (800ba70 <pvPortMalloc+0x1a8>)
 800b9e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9e6:	4b22      	ldr	r3, [pc, #136]	; (800ba70 <pvPortMalloc+0x1a8>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4b23      	ldr	r3, [pc, #140]	; (800ba78 <pvPortMalloc+0x1b0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d203      	bcs.n	800b9fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9f2:	4b1f      	ldr	r3, [pc, #124]	; (800ba70 <pvPortMalloc+0x1a8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a20      	ldr	r2, [pc, #128]	; (800ba78 <pvPortMalloc+0x1b0>)
 800b9f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	4b1b      	ldr	r3, [pc, #108]	; (800ba6c <pvPortMalloc+0x1a4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	431a      	orrs	r2, r3
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba0e:	4b1b      	ldr	r3, [pc, #108]	; (800ba7c <pvPortMalloc+0x1b4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3301      	adds	r3, #1
 800ba14:	4a19      	ldr	r2, [pc, #100]	; (800ba7c <pvPortMalloc+0x1b4>)
 800ba16:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d006      	beq.n	800ba2c <pvPortMalloc+0x164>
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4619      	mov	r1, r3
 800ba24:	2094      	movs	r0, #148	; 0x94
 800ba26:	f7f6 ff57 	bl	80028d8 <vTraceStoreMemMangEvent>
 800ba2a:	e005      	b.n	800ba38 <pvPortMalloc+0x170>
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	4619      	mov	r1, r3
 800ba32:	20e8      	movs	r0, #232	; 0xe8
 800ba34:	f7f6 ff50 	bl	80028d8 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800ba38:	f7fe fdf2 	bl	800a620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00a      	beq.n	800ba5c <pvPortMalloc+0x194>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60fb      	str	r3, [r7, #12]
}
 800ba58:	bf00      	nop
 800ba5a:	e7fe      	b.n	800ba5a <pvPortMalloc+0x192>
	return pvReturn;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3728      	adds	r7, #40	; 0x28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	2000292c 	.word	0x2000292c
 800ba6c:	20002940 	.word	0x20002940
 800ba70:	20002930 	.word	0x20002930
 800ba74:	20002924 	.word	0x20002924
 800ba78:	20002934 	.word	0x20002934
 800ba7c:	20002938 	.word	0x20002938

0800ba80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d055      	beq.n	800bb3e <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba92:	2308      	movs	r3, #8
 800ba94:	425b      	negs	r3, r3
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4413      	add	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	4b28      	ldr	r3, [pc, #160]	; (800bb48 <vPortFree+0xc8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4013      	ands	r3, r2
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <vPortFree+0x44>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	60fb      	str	r3, [r7, #12]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00a      	beq.n	800bae2 <vPortFree+0x62>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	60bb      	str	r3, [r7, #8]
}
 800bade:	bf00      	nop
 800bae0:	e7fe      	b.n	800bae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	4b18      	ldr	r3, [pc, #96]	; (800bb48 <vPortFree+0xc8>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4013      	ands	r3, r2
 800baec:	2b00      	cmp	r3, #0
 800baee:	d026      	beq.n	800bb3e <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d122      	bne.n	800bb3e <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <vPortFree+0xc8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	43db      	mvns	r3, r3
 800bb02:	401a      	ands	r2, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb08:	f7fe fd7c 	bl	800a604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	685a      	ldr	r2, [r3, #4]
 800bb10:	4b0e      	ldr	r3, [pc, #56]	; (800bb4c <vPortFree+0xcc>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4413      	add	r3, r2
 800bb16:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <vPortFree+0xcc>)
 800bb18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	425b      	negs	r3, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	2096      	movs	r0, #150	; 0x96
 800bb26:	f7f6 fed7 	bl	80028d8 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb2a:	6938      	ldr	r0, [r7, #16]
 800bb2c:	f000 f874 	bl	800bc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xd0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xd0>)
 800bb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb3a:	f7fe fd71 	bl	800a620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20002940 	.word	0x20002940
 800bb4c:	20002930 	.word	0x20002930
 800bb50:	2000293c 	.word	0x2000293c

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f242 7310 	movw	r3, #10000	; 0x2710
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20000214 	.word	0x20000214
 800bc04:	20002924 	.word	0x20002924
 800bc08:	2000292c 	.word	0x2000292c
 800bc0c:	20002934 	.word	0x20002934
 800bc10:	20002930 	.word	0x20002930
 800bc14:	20002940 	.word	0x20002940

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20002924 	.word	0x20002924
 800bcc8:	2000292c 	.word	0x2000292c

0800bccc <__errno>:
 800bccc:	4b01      	ldr	r3, [pc, #4]	; (800bcd4 <__errno+0x8>)
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000020 	.word	0x20000020

0800bcd8 <__libc_init_array>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	4d0d      	ldr	r5, [pc, #52]	; (800bd10 <__libc_init_array+0x38>)
 800bcdc:	4c0d      	ldr	r4, [pc, #52]	; (800bd14 <__libc_init_array+0x3c>)
 800bcde:	1b64      	subs	r4, r4, r5
 800bce0:	10a4      	asrs	r4, r4, #2
 800bce2:	2600      	movs	r6, #0
 800bce4:	42a6      	cmp	r6, r4
 800bce6:	d109      	bne.n	800bcfc <__libc_init_array+0x24>
 800bce8:	4d0b      	ldr	r5, [pc, #44]	; (800bd18 <__libc_init_array+0x40>)
 800bcea:	4c0c      	ldr	r4, [pc, #48]	; (800bd1c <__libc_init_array+0x44>)
 800bcec:	f000 fcca 	bl	800c684 <_init>
 800bcf0:	1b64      	subs	r4, r4, r5
 800bcf2:	10a4      	asrs	r4, r4, #2
 800bcf4:	2600      	movs	r6, #0
 800bcf6:	42a6      	cmp	r6, r4
 800bcf8:	d105      	bne.n	800bd06 <__libc_init_array+0x2e>
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd00:	4798      	blx	r3
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7ee      	b.n	800bce4 <__libc_init_array+0xc>
 800bd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0a:	4798      	blx	r3
 800bd0c:	3601      	adds	r6, #1
 800bd0e:	e7f2      	b.n	800bcf6 <__libc_init_array+0x1e>
 800bd10:	0800dd4c 	.word	0x0800dd4c
 800bd14:	0800dd4c 	.word	0x0800dd4c
 800bd18:	0800dd4c 	.word	0x0800dd4c
 800bd1c:	0800dd50 	.word	0x0800dd50

0800bd20 <__retarget_lock_acquire_recursive>:
 800bd20:	4770      	bx	lr

0800bd22 <__retarget_lock_release_recursive>:
 800bd22:	4770      	bx	lr

0800bd24 <memcpy>:
 800bd24:	440a      	add	r2, r1
 800bd26:	4291      	cmp	r1, r2
 800bd28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd2c:	d100      	bne.n	800bd30 <memcpy+0xc>
 800bd2e:	4770      	bx	lr
 800bd30:	b510      	push	{r4, lr}
 800bd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd3a:	4291      	cmp	r1, r2
 800bd3c:	d1f9      	bne.n	800bd32 <memcpy+0xe>
 800bd3e:	bd10      	pop	{r4, pc}

0800bd40 <memset>:
 800bd40:	4402      	add	r2, r0
 800bd42:	4603      	mov	r3, r0
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d100      	bne.n	800bd4a <memset+0xa>
 800bd48:	4770      	bx	lr
 800bd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd4e:	e7f9      	b.n	800bd44 <memset+0x4>

0800bd50 <_malloc_r>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	1ccd      	adds	r5, r1, #3
 800bd54:	f025 0503 	bic.w	r5, r5, #3
 800bd58:	3508      	adds	r5, #8
 800bd5a:	2d0c      	cmp	r5, #12
 800bd5c:	bf38      	it	cc
 800bd5e:	250c      	movcc	r5, #12
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	4606      	mov	r6, r0
 800bd64:	db01      	blt.n	800bd6a <_malloc_r+0x1a>
 800bd66:	42a9      	cmp	r1, r5
 800bd68:	d903      	bls.n	800bd72 <_malloc_r+0x22>
 800bd6a:	230c      	movs	r3, #12
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	2000      	movs	r0, #0
 800bd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd72:	f000 f8f3 	bl	800bf5c <__malloc_lock>
 800bd76:	4921      	ldr	r1, [pc, #132]	; (800bdfc <_malloc_r+0xac>)
 800bd78:	680a      	ldr	r2, [r1, #0]
 800bd7a:	4614      	mov	r4, r2
 800bd7c:	b99c      	cbnz	r4, 800bda6 <_malloc_r+0x56>
 800bd7e:	4f20      	ldr	r7, [pc, #128]	; (800be00 <_malloc_r+0xb0>)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	b923      	cbnz	r3, 800bd8e <_malloc_r+0x3e>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4630      	mov	r0, r6
 800bd88:	f000 f8a6 	bl	800bed8 <_sbrk_r>
 800bd8c:	6038      	str	r0, [r7, #0]
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4630      	mov	r0, r6
 800bd92:	f000 f8a1 	bl	800bed8 <_sbrk_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d123      	bne.n	800bde2 <_malloc_r+0x92>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	6033      	str	r3, [r6, #0]
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f000 f8e2 	bl	800bf68 <__malloc_unlock>
 800bda4:	e7e3      	b.n	800bd6e <_malloc_r+0x1e>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	1b5b      	subs	r3, r3, r5
 800bdaa:	d417      	bmi.n	800bddc <_malloc_r+0x8c>
 800bdac:	2b0b      	cmp	r3, #11
 800bdae:	d903      	bls.n	800bdb8 <_malloc_r+0x68>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	441c      	add	r4, r3
 800bdb4:	6025      	str	r5, [r4, #0]
 800bdb6:	e004      	b.n	800bdc2 <_malloc_r+0x72>
 800bdb8:	6863      	ldr	r3, [r4, #4]
 800bdba:	42a2      	cmp	r2, r4
 800bdbc:	bf0c      	ite	eq
 800bdbe:	600b      	streq	r3, [r1, #0]
 800bdc0:	6053      	strne	r3, [r2, #4]
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f000 f8d0 	bl	800bf68 <__malloc_unlock>
 800bdc8:	f104 000b 	add.w	r0, r4, #11
 800bdcc:	1d23      	adds	r3, r4, #4
 800bdce:	f020 0007 	bic.w	r0, r0, #7
 800bdd2:	1ac2      	subs	r2, r0, r3
 800bdd4:	d0cc      	beq.n	800bd70 <_malloc_r+0x20>
 800bdd6:	1a1b      	subs	r3, r3, r0
 800bdd8:	50a3      	str	r3, [r4, r2]
 800bdda:	e7c9      	b.n	800bd70 <_malloc_r+0x20>
 800bddc:	4622      	mov	r2, r4
 800bdde:	6864      	ldr	r4, [r4, #4]
 800bde0:	e7cc      	b.n	800bd7c <_malloc_r+0x2c>
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d0e3      	beq.n	800bdb4 <_malloc_r+0x64>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f000 f872 	bl	800bed8 <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1dd      	bne.n	800bdb4 <_malloc_r+0x64>
 800bdf8:	e7cf      	b.n	800bd9a <_malloc_r+0x4a>
 800bdfa:	bf00      	nop
 800bdfc:	20002944 	.word	0x20002944
 800be00:	20002948 	.word	0x20002948

0800be04 <cleanup_glue>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	460c      	mov	r4, r1
 800be08:	6809      	ldr	r1, [r1, #0]
 800be0a:	4605      	mov	r5, r0
 800be0c:	b109      	cbz	r1, 800be12 <cleanup_glue+0xe>
 800be0e:	f7ff fff9 	bl	800be04 <cleanup_glue>
 800be12:	4621      	mov	r1, r4
 800be14:	4628      	mov	r0, r5
 800be16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be1a:	f000 b8ab 	b.w	800bf74 <_free_r>
	...

0800be20 <_reclaim_reent>:
 800be20:	4b2c      	ldr	r3, [pc, #176]	; (800bed4 <_reclaim_reent+0xb4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4283      	cmp	r3, r0
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	4604      	mov	r4, r0
 800be2a:	d051      	beq.n	800bed0 <_reclaim_reent+0xb0>
 800be2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be2e:	b143      	cbz	r3, 800be42 <_reclaim_reent+0x22>
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d14a      	bne.n	800becc <_reclaim_reent+0xac>
 800be36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	b111      	cbz	r1, 800be42 <_reclaim_reent+0x22>
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f899 	bl	800bf74 <_free_r>
 800be42:	6961      	ldr	r1, [r4, #20]
 800be44:	b111      	cbz	r1, 800be4c <_reclaim_reent+0x2c>
 800be46:	4620      	mov	r0, r4
 800be48:	f000 f894 	bl	800bf74 <_free_r>
 800be4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be4e:	b111      	cbz	r1, 800be56 <_reclaim_reent+0x36>
 800be50:	4620      	mov	r0, r4
 800be52:	f000 f88f 	bl	800bf74 <_free_r>
 800be56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be58:	b111      	cbz	r1, 800be60 <_reclaim_reent+0x40>
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 f88a 	bl	800bf74 <_free_r>
 800be60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be62:	b111      	cbz	r1, 800be6a <_reclaim_reent+0x4a>
 800be64:	4620      	mov	r0, r4
 800be66:	f000 f885 	bl	800bf74 <_free_r>
 800be6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be6c:	b111      	cbz	r1, 800be74 <_reclaim_reent+0x54>
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 f880 	bl	800bf74 <_free_r>
 800be74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be76:	b111      	cbz	r1, 800be7e <_reclaim_reent+0x5e>
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 f87b 	bl	800bf74 <_free_r>
 800be7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be80:	b111      	cbz	r1, 800be88 <_reclaim_reent+0x68>
 800be82:	4620      	mov	r0, r4
 800be84:	f000 f876 	bl	800bf74 <_free_r>
 800be88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be8a:	b111      	cbz	r1, 800be92 <_reclaim_reent+0x72>
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 f871 	bl	800bf74 <_free_r>
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	b1e3      	cbz	r3, 800bed0 <_reclaim_reent+0xb0>
 800be96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be98:	4620      	mov	r0, r4
 800be9a:	4798      	blx	r3
 800be9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be9e:	b1b9      	cbz	r1, 800bed0 <_reclaim_reent+0xb0>
 800bea0:	4620      	mov	r0, r4
 800bea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea6:	f7ff bfad 	b.w	800be04 <cleanup_glue>
 800beaa:	5949      	ldr	r1, [r1, r5]
 800beac:	b941      	cbnz	r1, 800bec0 <_reclaim_reent+0xa0>
 800beae:	3504      	adds	r5, #4
 800beb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb2:	2d80      	cmp	r5, #128	; 0x80
 800beb4:	68d9      	ldr	r1, [r3, #12]
 800beb6:	d1f8      	bne.n	800beaa <_reclaim_reent+0x8a>
 800beb8:	4620      	mov	r0, r4
 800beba:	f000 f85b 	bl	800bf74 <_free_r>
 800bebe:	e7ba      	b.n	800be36 <_reclaim_reent+0x16>
 800bec0:	680e      	ldr	r6, [r1, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 f856 	bl	800bf74 <_free_r>
 800bec8:	4631      	mov	r1, r6
 800beca:	e7ef      	b.n	800beac <_reclaim_reent+0x8c>
 800becc:	2500      	movs	r5, #0
 800bece:	e7ef      	b.n	800beb0 <_reclaim_reent+0x90>
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	bf00      	nop
 800bed4:	20000020 	.word	0x20000020

0800bed8 <_sbrk_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d06      	ldr	r5, [pc, #24]	; (800bef4 <_sbrk_r+0x1c>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	f7f5 fc72 	bl	80017cc <_sbrk>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_sbrk_r+0x1a>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_sbrk_r+0x1a>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	2000b5fc 	.word	0x2000b5fc

0800bef8 <siprintf>:
 800bef8:	b40e      	push	{r1, r2, r3}
 800befa:	b500      	push	{lr}
 800befc:	b09c      	sub	sp, #112	; 0x70
 800befe:	ab1d      	add	r3, sp, #116	; 0x74
 800bf00:	9002      	str	r0, [sp, #8]
 800bf02:	9006      	str	r0, [sp, #24]
 800bf04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf08:	4809      	ldr	r0, [pc, #36]	; (800bf30 <siprintf+0x38>)
 800bf0a:	9107      	str	r1, [sp, #28]
 800bf0c:	9104      	str	r1, [sp, #16]
 800bf0e:	4909      	ldr	r1, [pc, #36]	; (800bf34 <siprintf+0x3c>)
 800bf10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf14:	9105      	str	r1, [sp, #20]
 800bf16:	6800      	ldr	r0, [r0, #0]
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	a902      	add	r1, sp, #8
 800bf1c:	f000 f8d6 	bl	800c0cc <_svfiprintf_r>
 800bf20:	9b02      	ldr	r3, [sp, #8]
 800bf22:	2200      	movs	r2, #0
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	b01c      	add	sp, #112	; 0x70
 800bf28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf2c:	b003      	add	sp, #12
 800bf2e:	4770      	bx	lr
 800bf30:	20000020 	.word	0x20000020
 800bf34:	ffff0208 	.word	0xffff0208

0800bf38 <strncmp>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	b16a      	cbz	r2, 800bf58 <strncmp+0x20>
 800bf3c:	3901      	subs	r1, #1
 800bf3e:	1884      	adds	r4, r0, r2
 800bf40:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d103      	bne.n	800bf54 <strncmp+0x1c>
 800bf4c:	42a0      	cmp	r0, r4
 800bf4e:	d001      	beq.n	800bf54 <strncmp+0x1c>
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1f5      	bne.n	800bf40 <strncmp+0x8>
 800bf54:	1a98      	subs	r0, r3, r2
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	4610      	mov	r0, r2
 800bf5a:	e7fc      	b.n	800bf56 <strncmp+0x1e>

0800bf5c <__malloc_lock>:
 800bf5c:	4801      	ldr	r0, [pc, #4]	; (800bf64 <__malloc_lock+0x8>)
 800bf5e:	f7ff bedf 	b.w	800bd20 <__retarget_lock_acquire_recursive>
 800bf62:	bf00      	nop
 800bf64:	2000b5f4 	.word	0x2000b5f4

0800bf68 <__malloc_unlock>:
 800bf68:	4801      	ldr	r0, [pc, #4]	; (800bf70 <__malloc_unlock+0x8>)
 800bf6a:	f7ff beda 	b.w	800bd22 <__retarget_lock_release_recursive>
 800bf6e:	bf00      	nop
 800bf70:	2000b5f4 	.word	0x2000b5f4

0800bf74 <_free_r>:
 800bf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf76:	2900      	cmp	r1, #0
 800bf78:	d048      	beq.n	800c00c <_free_r+0x98>
 800bf7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7e:	9001      	str	r0, [sp, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f1a1 0404 	sub.w	r4, r1, #4
 800bf86:	bfb8      	it	lt
 800bf88:	18e4      	addlt	r4, r4, r3
 800bf8a:	f7ff ffe7 	bl	800bf5c <__malloc_lock>
 800bf8e:	4a20      	ldr	r2, [pc, #128]	; (800c010 <_free_r+0x9c>)
 800bf90:	9801      	ldr	r0, [sp, #4]
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	4615      	mov	r5, r2
 800bf96:	b933      	cbnz	r3, 800bfa6 <_free_r+0x32>
 800bf98:	6063      	str	r3, [r4, #4]
 800bf9a:	6014      	str	r4, [r2, #0]
 800bf9c:	b003      	add	sp, #12
 800bf9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfa2:	f7ff bfe1 	b.w	800bf68 <__malloc_unlock>
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d90b      	bls.n	800bfc2 <_free_r+0x4e>
 800bfaa:	6821      	ldr	r1, [r4, #0]
 800bfac:	1862      	adds	r2, r4, r1
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	bf04      	itt	eq
 800bfb2:	681a      	ldreq	r2, [r3, #0]
 800bfb4:	685b      	ldreq	r3, [r3, #4]
 800bfb6:	6063      	str	r3, [r4, #4]
 800bfb8:	bf04      	itt	eq
 800bfba:	1852      	addeq	r2, r2, r1
 800bfbc:	6022      	streq	r2, [r4, #0]
 800bfbe:	602c      	str	r4, [r5, #0]
 800bfc0:	e7ec      	b.n	800bf9c <_free_r+0x28>
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b10b      	cbz	r3, 800bfcc <_free_r+0x58>
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	d9fa      	bls.n	800bfc2 <_free_r+0x4e>
 800bfcc:	6811      	ldr	r1, [r2, #0]
 800bfce:	1855      	adds	r5, r2, r1
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	d10b      	bne.n	800bfec <_free_r+0x78>
 800bfd4:	6824      	ldr	r4, [r4, #0]
 800bfd6:	4421      	add	r1, r4
 800bfd8:	1854      	adds	r4, r2, r1
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	6011      	str	r1, [r2, #0]
 800bfde:	d1dd      	bne.n	800bf9c <_free_r+0x28>
 800bfe0:	681c      	ldr	r4, [r3, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	6053      	str	r3, [r2, #4]
 800bfe6:	4421      	add	r1, r4
 800bfe8:	6011      	str	r1, [r2, #0]
 800bfea:	e7d7      	b.n	800bf9c <_free_r+0x28>
 800bfec:	d902      	bls.n	800bff4 <_free_r+0x80>
 800bfee:	230c      	movs	r3, #12
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	e7d3      	b.n	800bf9c <_free_r+0x28>
 800bff4:	6825      	ldr	r5, [r4, #0]
 800bff6:	1961      	adds	r1, r4, r5
 800bff8:	428b      	cmp	r3, r1
 800bffa:	bf04      	itt	eq
 800bffc:	6819      	ldreq	r1, [r3, #0]
 800bffe:	685b      	ldreq	r3, [r3, #4]
 800c000:	6063      	str	r3, [r4, #4]
 800c002:	bf04      	itt	eq
 800c004:	1949      	addeq	r1, r1, r5
 800c006:	6021      	streq	r1, [r4, #0]
 800c008:	6054      	str	r4, [r2, #4]
 800c00a:	e7c7      	b.n	800bf9c <_free_r+0x28>
 800c00c:	b003      	add	sp, #12
 800c00e:	bd30      	pop	{r4, r5, pc}
 800c010:	20002944 	.word	0x20002944

0800c014 <__ssputs_r>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	688e      	ldr	r6, [r1, #8]
 800c01a:	429e      	cmp	r6, r3
 800c01c:	4682      	mov	sl, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	4690      	mov	r8, r2
 800c022:	461f      	mov	r7, r3
 800c024:	d838      	bhi.n	800c098 <__ssputs_r+0x84>
 800c026:	898a      	ldrh	r2, [r1, #12]
 800c028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02c:	d032      	beq.n	800c094 <__ssputs_r+0x80>
 800c02e:	6825      	ldr	r5, [r4, #0]
 800c030:	6909      	ldr	r1, [r1, #16]
 800c032:	eba5 0901 	sub.w	r9, r5, r1
 800c036:	6965      	ldr	r5, [r4, #20]
 800c038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c040:	3301      	adds	r3, #1
 800c042:	444b      	add	r3, r9
 800c044:	106d      	asrs	r5, r5, #1
 800c046:	429d      	cmp	r5, r3
 800c048:	bf38      	it	cc
 800c04a:	461d      	movcc	r5, r3
 800c04c:	0553      	lsls	r3, r2, #21
 800c04e:	d531      	bpl.n	800c0b4 <__ssputs_r+0xa0>
 800c050:	4629      	mov	r1, r5
 800c052:	f7ff fe7d 	bl	800bd50 <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b950      	cbnz	r0, 800c070 <__ssputs_r+0x5c>
 800c05a:	230c      	movs	r3, #12
 800c05c:	f8ca 3000 	str.w	r3, [sl]
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	f04f 30ff 	mov.w	r0, #4294967295
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	6921      	ldr	r1, [r4, #16]
 800c072:	464a      	mov	r2, r9
 800c074:	f7ff fe56 	bl	800bd24 <memcpy>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	6126      	str	r6, [r4, #16]
 800c086:	6165      	str	r5, [r4, #20]
 800c088:	444e      	add	r6, r9
 800c08a:	eba5 0509 	sub.w	r5, r5, r9
 800c08e:	6026      	str	r6, [r4, #0]
 800c090:	60a5      	str	r5, [r4, #8]
 800c092:	463e      	mov	r6, r7
 800c094:	42be      	cmp	r6, r7
 800c096:	d900      	bls.n	800c09a <__ssputs_r+0x86>
 800c098:	463e      	mov	r6, r7
 800c09a:	4632      	mov	r2, r6
 800c09c:	6820      	ldr	r0, [r4, #0]
 800c09e:	4641      	mov	r1, r8
 800c0a0:	f000 faa8 	bl	800c5f4 <memmove>
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	6822      	ldr	r2, [r4, #0]
 800c0a8:	1b9b      	subs	r3, r3, r6
 800c0aa:	4432      	add	r2, r6
 800c0ac:	60a3      	str	r3, [r4, #8]
 800c0ae:	6022      	str	r2, [r4, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e7db      	b.n	800c06c <__ssputs_r+0x58>
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	f000 fab7 	bl	800c628 <_realloc_r>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e1      	bne.n	800c084 <__ssputs_r+0x70>
 800c0c0:	6921      	ldr	r1, [r4, #16]
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7ff ff56 	bl	800bf74 <_free_r>
 800c0c8:	e7c7      	b.n	800c05a <__ssputs_r+0x46>
	...

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d50e      	bpl.n	800c0fe <_svfiprintf_r+0x32>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b963      	cbnz	r3, 800c0fe <_svfiprintf_r+0x32>
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	f7ff fe33 	bl	800bd50 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b920      	cbnz	r0, 800c0fa <_svfiprintf_r+0x2e>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e0d1      	b.n	800c29e <_svfiprintf_r+0x1d2>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	; 0x30
 800c10e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b8 <_svfiprintf_r+0x1ec>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x5c>
 800c124:	2a25      	cmp	r2, #37	; 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x50>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7a>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6d 	bl	800c014 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80aa 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80a2 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c166:	931a      	str	r3, [sp, #104]	; 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	4851      	ldr	r0, [pc, #324]	; (800c2b8 <_svfiprintf_r+0x1ec>)
 800c172:	f7f4 f805 	bl	8000180 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xe6>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	; 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	; 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xf6>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	; 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94e      	bls.n	800c24a <_svfiprintf_r+0x17e>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x110>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x110>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0x9c>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d10c      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e6:	d135      	bne.n	800c254 <_svfiprintf_r+0x188>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfb8      	it	lt
 800c1f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c8 <_svfiprintf_r+0x1fc>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f3 ffbb 	bl	8000180 <memchr>
 800c20a:	b140      	cbz	r0, 800c21e <_svfiprintf_r+0x152>
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	fa03 f000 	lsl.w	r0, r3, r0
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	4303      	orrs	r3, r0
 800c21a:	3401      	adds	r4, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <_svfiprintf_r+0x1f0>)
 800c224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c228:	2206      	movs	r2, #6
 800c22a:	f7f3 ffa9 	bl	8000180 <memchr>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d038      	beq.n	800c2a4 <_svfiprintf_r+0x1d8>
 800c232:	4b23      	ldr	r3, [pc, #140]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c234:	bb1b      	cbnz	r3, 800c27e <_svfiprintf_r+0x1b2>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	3307      	adds	r3, #7
 800c23a:	f023 0307 	bic.w	r3, r3, #7
 800c23e:	3308      	adds	r3, #8
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	4433      	add	r3, r6
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	e767      	b.n	800c11a <_svfiprintf_r+0x4e>
 800c24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24e:	460c      	mov	r4, r1
 800c250:	2001      	movs	r0, #1
 800c252:	e7a5      	b.n	800c1a0 <_svfiprintf_r+0xd4>
 800c254:	2300      	movs	r3, #0
 800c256:	3401      	adds	r4, #1
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	4619      	mov	r1, r3
 800c25c:	f04f 0c0a 	mov.w	ip, #10
 800c260:	4620      	mov	r0, r4
 800c262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c266:	3a30      	subs	r2, #48	; 0x30
 800c268:	2a09      	cmp	r2, #9
 800c26a:	d903      	bls.n	800c274 <_svfiprintf_r+0x1a8>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0c5      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c270:	9105      	str	r1, [sp, #20]
 800c272:	e7c3      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c274:	fb0c 2101 	mla	r1, ip, r1, r2
 800c278:	4604      	mov	r4, r0
 800c27a:	2301      	movs	r3, #1
 800c27c:	e7f0      	b.n	800c260 <_svfiprintf_r+0x194>
 800c27e:	ab03      	add	r3, sp, #12
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	462a      	mov	r2, r5
 800c284:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	4638      	mov	r0, r7
 800c28a:	f3af 8000 	nop.w
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	4606      	mov	r6, r0
 800c292:	d1d6      	bne.n	800c242 <_svfiprintf_r+0x176>
 800c294:	89ab      	ldrh	r3, [r5, #12]
 800c296:	065b      	lsls	r3, r3, #25
 800c298:	f53f af2c 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29e:	b01d      	add	sp, #116	; 0x74
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f000 f87a 	bl	800c3a8 <_printf_i>
 800c2b4:	e7eb      	b.n	800c28e <_svfiprintf_r+0x1c2>
 800c2b6:	bf00      	nop
 800c2b8:	0800dd10 	.word	0x0800dd10
 800c2bc:	0800dd1a 	.word	0x0800dd1a
 800c2c0:	00000000 	.word	0x00000000
 800c2c4:	0800c015 	.word	0x0800c015
 800c2c8:	0800dd16 	.word	0x0800dd16

0800c2cc <_printf_common>:
 800c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	4616      	mov	r6, r2
 800c2d2:	4699      	mov	r9, r3
 800c2d4:	688a      	ldr	r2, [r1, #8]
 800c2d6:	690b      	ldr	r3, [r1, #16]
 800c2d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	bfb8      	it	lt
 800c2e0:	4613      	movlt	r3, r2
 800c2e2:	6033      	str	r3, [r6, #0]
 800c2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	b10a      	cbz	r2, 800c2f2 <_printf_common+0x26>
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	6033      	str	r3, [r6, #0]
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	0699      	lsls	r1, r3, #26
 800c2f6:	bf42      	ittt	mi
 800c2f8:	6833      	ldrmi	r3, [r6, #0]
 800c2fa:	3302      	addmi	r3, #2
 800c2fc:	6033      	strmi	r3, [r6, #0]
 800c2fe:	6825      	ldr	r5, [r4, #0]
 800c300:	f015 0506 	ands.w	r5, r5, #6
 800c304:	d106      	bne.n	800c314 <_printf_common+0x48>
 800c306:	f104 0a19 	add.w	sl, r4, #25
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	6832      	ldr	r2, [r6, #0]
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	42ab      	cmp	r3, r5
 800c312:	dc26      	bgt.n	800c362 <_printf_common+0x96>
 800c314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c318:	1e13      	subs	r3, r2, #0
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	bf18      	it	ne
 800c31e:	2301      	movne	r3, #1
 800c320:	0692      	lsls	r2, r2, #26
 800c322:	d42b      	bmi.n	800c37c <_printf_common+0xb0>
 800c324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c328:	4649      	mov	r1, r9
 800c32a:	4638      	mov	r0, r7
 800c32c:	47c0      	blx	r8
 800c32e:	3001      	adds	r0, #1
 800c330:	d01e      	beq.n	800c370 <_printf_common+0xa4>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	68e5      	ldr	r5, [r4, #12]
 800c336:	6832      	ldr	r2, [r6, #0]
 800c338:	f003 0306 	and.w	r3, r3, #6
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	bf08      	it	eq
 800c340:	1aad      	subeq	r5, r5, r2
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	6922      	ldr	r2, [r4, #16]
 800c346:	bf0c      	ite	eq
 800c348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c34c:	2500      	movne	r5, #0
 800c34e:	4293      	cmp	r3, r2
 800c350:	bfc4      	itt	gt
 800c352:	1a9b      	subgt	r3, r3, r2
 800c354:	18ed      	addgt	r5, r5, r3
 800c356:	2600      	movs	r6, #0
 800c358:	341a      	adds	r4, #26
 800c35a:	42b5      	cmp	r5, r6
 800c35c:	d11a      	bne.n	800c394 <_printf_common+0xc8>
 800c35e:	2000      	movs	r0, #0
 800c360:	e008      	b.n	800c374 <_printf_common+0xa8>
 800c362:	2301      	movs	r3, #1
 800c364:	4652      	mov	r2, sl
 800c366:	4649      	mov	r1, r9
 800c368:	4638      	mov	r0, r7
 800c36a:	47c0      	blx	r8
 800c36c:	3001      	adds	r0, #1
 800c36e:	d103      	bne.n	800c378 <_printf_common+0xac>
 800c370:	f04f 30ff 	mov.w	r0, #4294967295
 800c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c378:	3501      	adds	r5, #1
 800c37a:	e7c6      	b.n	800c30a <_printf_common+0x3e>
 800c37c:	18e1      	adds	r1, r4, r3
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	2030      	movs	r0, #48	; 0x30
 800c382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c386:	4422      	add	r2, r4
 800c388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c38c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c390:	3302      	adds	r3, #2
 800c392:	e7c7      	b.n	800c324 <_printf_common+0x58>
 800c394:	2301      	movs	r3, #1
 800c396:	4622      	mov	r2, r4
 800c398:	4649      	mov	r1, r9
 800c39a:	4638      	mov	r0, r7
 800c39c:	47c0      	blx	r8
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d0e6      	beq.n	800c370 <_printf_common+0xa4>
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7d9      	b.n	800c35a <_printf_common+0x8e>
	...

0800c3a8 <_printf_i>:
 800c3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	4691      	mov	r9, r2
 800c3b0:	7e27      	ldrb	r7, [r4, #24]
 800c3b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3b4:	2f78      	cmp	r7, #120	; 0x78
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	469a      	mov	sl, r3
 800c3ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3be:	d807      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3c0:	2f62      	cmp	r7, #98	; 0x62
 800c3c2:	d80a      	bhi.n	800c3da <_printf_i+0x32>
 800c3c4:	2f00      	cmp	r7, #0
 800c3c6:	f000 80d8 	beq.w	800c57a <_printf_i+0x1d2>
 800c3ca:	2f58      	cmp	r7, #88	; 0x58
 800c3cc:	f000 80a3 	beq.w	800c516 <_printf_i+0x16e>
 800c3d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3d8:	e03a      	b.n	800c450 <_printf_i+0xa8>
 800c3da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3de:	2b15      	cmp	r3, #21
 800c3e0:	d8f6      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3e2:	a001      	add	r0, pc, #4	; (adr r0, 800c3e8 <_printf_i+0x40>)
 800c3e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c3e8:	0800c441 	.word	0x0800c441
 800c3ec:	0800c455 	.word	0x0800c455
 800c3f0:	0800c3d1 	.word	0x0800c3d1
 800c3f4:	0800c3d1 	.word	0x0800c3d1
 800c3f8:	0800c3d1 	.word	0x0800c3d1
 800c3fc:	0800c3d1 	.word	0x0800c3d1
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c3d1 	.word	0x0800c3d1
 800c408:	0800c3d1 	.word	0x0800c3d1
 800c40c:	0800c3d1 	.word	0x0800c3d1
 800c410:	0800c3d1 	.word	0x0800c3d1
 800c414:	0800c561 	.word	0x0800c561
 800c418:	0800c485 	.word	0x0800c485
 800c41c:	0800c543 	.word	0x0800c543
 800c420:	0800c3d1 	.word	0x0800c3d1
 800c424:	0800c3d1 	.word	0x0800c3d1
 800c428:	0800c583 	.word	0x0800c583
 800c42c:	0800c3d1 	.word	0x0800c3d1
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c3d1 	.word	0x0800c3d1
 800c438:	0800c3d1 	.word	0x0800c3d1
 800c43c:	0800c54b 	.word	0x0800c54b
 800c440:	680b      	ldr	r3, [r1, #0]
 800c442:	1d1a      	adds	r2, r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	600a      	str	r2, [r1, #0]
 800c448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c450:	2301      	movs	r3, #1
 800c452:	e0a3      	b.n	800c59c <_printf_i+0x1f4>
 800c454:	6825      	ldr	r5, [r4, #0]
 800c456:	6808      	ldr	r0, [r1, #0]
 800c458:	062e      	lsls	r6, r5, #24
 800c45a:	f100 0304 	add.w	r3, r0, #4
 800c45e:	d50a      	bpl.n	800c476 <_printf_i+0xce>
 800c460:	6805      	ldr	r5, [r0, #0]
 800c462:	600b      	str	r3, [r1, #0]
 800c464:	2d00      	cmp	r5, #0
 800c466:	da03      	bge.n	800c470 <_printf_i+0xc8>
 800c468:	232d      	movs	r3, #45	; 0x2d
 800c46a:	426d      	negs	r5, r5
 800c46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c470:	485e      	ldr	r0, [pc, #376]	; (800c5ec <_printf_i+0x244>)
 800c472:	230a      	movs	r3, #10
 800c474:	e019      	b.n	800c4aa <_printf_i+0x102>
 800c476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c47a:	6805      	ldr	r5, [r0, #0]
 800c47c:	600b      	str	r3, [r1, #0]
 800c47e:	bf18      	it	ne
 800c480:	b22d      	sxthne	r5, r5
 800c482:	e7ef      	b.n	800c464 <_printf_i+0xbc>
 800c484:	680b      	ldr	r3, [r1, #0]
 800c486:	6825      	ldr	r5, [r4, #0]
 800c488:	1d18      	adds	r0, r3, #4
 800c48a:	6008      	str	r0, [r1, #0]
 800c48c:	0628      	lsls	r0, r5, #24
 800c48e:	d501      	bpl.n	800c494 <_printf_i+0xec>
 800c490:	681d      	ldr	r5, [r3, #0]
 800c492:	e002      	b.n	800c49a <_printf_i+0xf2>
 800c494:	0669      	lsls	r1, r5, #25
 800c496:	d5fb      	bpl.n	800c490 <_printf_i+0xe8>
 800c498:	881d      	ldrh	r5, [r3, #0]
 800c49a:	4854      	ldr	r0, [pc, #336]	; (800c5ec <_printf_i+0x244>)
 800c49c:	2f6f      	cmp	r7, #111	; 0x6f
 800c49e:	bf0c      	ite	eq
 800c4a0:	2308      	moveq	r3, #8
 800c4a2:	230a      	movne	r3, #10
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4aa:	6866      	ldr	r6, [r4, #4]
 800c4ac:	60a6      	str	r6, [r4, #8]
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	bfa2      	ittt	ge
 800c4b2:	6821      	ldrge	r1, [r4, #0]
 800c4b4:	f021 0104 	bicge.w	r1, r1, #4
 800c4b8:	6021      	strge	r1, [r4, #0]
 800c4ba:	b90d      	cbnz	r5, 800c4c0 <_printf_i+0x118>
 800c4bc:	2e00      	cmp	r6, #0
 800c4be:	d04d      	beq.n	800c55c <_printf_i+0x1b4>
 800c4c0:	4616      	mov	r6, r2
 800c4c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c4ca:	5dc7      	ldrb	r7, [r0, r7]
 800c4cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4d0:	462f      	mov	r7, r5
 800c4d2:	42bb      	cmp	r3, r7
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	d9f4      	bls.n	800c4c2 <_printf_i+0x11a>
 800c4d8:	2b08      	cmp	r3, #8
 800c4da:	d10b      	bne.n	800c4f4 <_printf_i+0x14c>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	07df      	lsls	r7, r3, #31
 800c4e0:	d508      	bpl.n	800c4f4 <_printf_i+0x14c>
 800c4e2:	6923      	ldr	r3, [r4, #16]
 800c4e4:	6861      	ldr	r1, [r4, #4]
 800c4e6:	4299      	cmp	r1, r3
 800c4e8:	bfde      	ittt	le
 800c4ea:	2330      	movle	r3, #48	; 0x30
 800c4ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4f4:	1b92      	subs	r2, r2, r6
 800c4f6:	6122      	str	r2, [r4, #16]
 800c4f8:	f8cd a000 	str.w	sl, [sp]
 800c4fc:	464b      	mov	r3, r9
 800c4fe:	aa03      	add	r2, sp, #12
 800c500:	4621      	mov	r1, r4
 800c502:	4640      	mov	r0, r8
 800c504:	f7ff fee2 	bl	800c2cc <_printf_common>
 800c508:	3001      	adds	r0, #1
 800c50a:	d14c      	bne.n	800c5a6 <_printf_i+0x1fe>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	b004      	add	sp, #16
 800c512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c516:	4835      	ldr	r0, [pc, #212]	; (800c5ec <_printf_i+0x244>)
 800c518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	680e      	ldr	r6, [r1, #0]
 800c520:	061f      	lsls	r7, r3, #24
 800c522:	f856 5b04 	ldr.w	r5, [r6], #4
 800c526:	600e      	str	r6, [r1, #0]
 800c528:	d514      	bpl.n	800c554 <_printf_i+0x1ac>
 800c52a:	07d9      	lsls	r1, r3, #31
 800c52c:	bf44      	itt	mi
 800c52e:	f043 0320 	orrmi.w	r3, r3, #32
 800c532:	6023      	strmi	r3, [r4, #0]
 800c534:	b91d      	cbnz	r5, 800c53e <_printf_i+0x196>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	f023 0320 	bic.w	r3, r3, #32
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	2310      	movs	r3, #16
 800c540:	e7b0      	b.n	800c4a4 <_printf_i+0xfc>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f043 0320 	orr.w	r3, r3, #32
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2378      	movs	r3, #120	; 0x78
 800c54c:	4828      	ldr	r0, [pc, #160]	; (800c5f0 <_printf_i+0x248>)
 800c54e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c552:	e7e3      	b.n	800c51c <_printf_i+0x174>
 800c554:	065e      	lsls	r6, r3, #25
 800c556:	bf48      	it	mi
 800c558:	b2ad      	uxthmi	r5, r5
 800c55a:	e7e6      	b.n	800c52a <_printf_i+0x182>
 800c55c:	4616      	mov	r6, r2
 800c55e:	e7bb      	b.n	800c4d8 <_printf_i+0x130>
 800c560:	680b      	ldr	r3, [r1, #0]
 800c562:	6826      	ldr	r6, [r4, #0]
 800c564:	6960      	ldr	r0, [r4, #20]
 800c566:	1d1d      	adds	r5, r3, #4
 800c568:	600d      	str	r5, [r1, #0]
 800c56a:	0635      	lsls	r5, r6, #24
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	d501      	bpl.n	800c574 <_printf_i+0x1cc>
 800c570:	6018      	str	r0, [r3, #0]
 800c572:	e002      	b.n	800c57a <_printf_i+0x1d2>
 800c574:	0671      	lsls	r1, r6, #25
 800c576:	d5fb      	bpl.n	800c570 <_printf_i+0x1c8>
 800c578:	8018      	strh	r0, [r3, #0]
 800c57a:	2300      	movs	r3, #0
 800c57c:	6123      	str	r3, [r4, #16]
 800c57e:	4616      	mov	r6, r2
 800c580:	e7ba      	b.n	800c4f8 <_printf_i+0x150>
 800c582:	680b      	ldr	r3, [r1, #0]
 800c584:	1d1a      	adds	r2, r3, #4
 800c586:	600a      	str	r2, [r1, #0]
 800c588:	681e      	ldr	r6, [r3, #0]
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	2100      	movs	r1, #0
 800c58e:	4630      	mov	r0, r6
 800c590:	f7f3 fdf6 	bl	8000180 <memchr>
 800c594:	b108      	cbz	r0, 800c59a <_printf_i+0x1f2>
 800c596:	1b80      	subs	r0, r0, r6
 800c598:	6060      	str	r0, [r4, #4]
 800c59a:	6863      	ldr	r3, [r4, #4]
 800c59c:	6123      	str	r3, [r4, #16]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a4:	e7a8      	b.n	800c4f8 <_printf_i+0x150>
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4649      	mov	r1, r9
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	47d0      	blx	sl
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d0ab      	beq.n	800c50c <_printf_i+0x164>
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	079b      	lsls	r3, r3, #30
 800c5b8:	d413      	bmi.n	800c5e2 <_printf_i+0x23a>
 800c5ba:	68e0      	ldr	r0, [r4, #12]
 800c5bc:	9b03      	ldr	r3, [sp, #12]
 800c5be:	4298      	cmp	r0, r3
 800c5c0:	bfb8      	it	lt
 800c5c2:	4618      	movlt	r0, r3
 800c5c4:	e7a4      	b.n	800c510 <_printf_i+0x168>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	47d0      	blx	sl
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d09b      	beq.n	800c50c <_printf_i+0x164>
 800c5d4:	3501      	adds	r5, #1
 800c5d6:	68e3      	ldr	r3, [r4, #12]
 800c5d8:	9903      	ldr	r1, [sp, #12]
 800c5da:	1a5b      	subs	r3, r3, r1
 800c5dc:	42ab      	cmp	r3, r5
 800c5de:	dcf2      	bgt.n	800c5c6 <_printf_i+0x21e>
 800c5e0:	e7eb      	b.n	800c5ba <_printf_i+0x212>
 800c5e2:	2500      	movs	r5, #0
 800c5e4:	f104 0619 	add.w	r6, r4, #25
 800c5e8:	e7f5      	b.n	800c5d6 <_printf_i+0x22e>
 800c5ea:	bf00      	nop
 800c5ec:	0800dd21 	.word	0x0800dd21
 800c5f0:	0800dd32 	.word	0x0800dd32

0800c5f4 <memmove>:
 800c5f4:	4288      	cmp	r0, r1
 800c5f6:	b510      	push	{r4, lr}
 800c5f8:	eb01 0402 	add.w	r4, r1, r2
 800c5fc:	d902      	bls.n	800c604 <memmove+0x10>
 800c5fe:	4284      	cmp	r4, r0
 800c600:	4623      	mov	r3, r4
 800c602:	d807      	bhi.n	800c614 <memmove+0x20>
 800c604:	1e43      	subs	r3, r0, #1
 800c606:	42a1      	cmp	r1, r4
 800c608:	d008      	beq.n	800c61c <memmove+0x28>
 800c60a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c60e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c612:	e7f8      	b.n	800c606 <memmove+0x12>
 800c614:	4402      	add	r2, r0
 800c616:	4601      	mov	r1, r0
 800c618:	428a      	cmp	r2, r1
 800c61a:	d100      	bne.n	800c61e <memmove+0x2a>
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c626:	e7f7      	b.n	800c618 <memmove+0x24>

0800c628 <_realloc_r>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	4607      	mov	r7, r0
 800c62c:	4614      	mov	r4, r2
 800c62e:	460e      	mov	r6, r1
 800c630:	b921      	cbnz	r1, 800c63c <_realloc_r+0x14>
 800c632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c636:	4611      	mov	r1, r2
 800c638:	f7ff bb8a 	b.w	800bd50 <_malloc_r>
 800c63c:	b922      	cbnz	r2, 800c648 <_realloc_r+0x20>
 800c63e:	f7ff fc99 	bl	800bf74 <_free_r>
 800c642:	4625      	mov	r5, r4
 800c644:	4628      	mov	r0, r5
 800c646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c648:	f000 f814 	bl	800c674 <_malloc_usable_size_r>
 800c64c:	42a0      	cmp	r0, r4
 800c64e:	d20f      	bcs.n	800c670 <_realloc_r+0x48>
 800c650:	4621      	mov	r1, r4
 800c652:	4638      	mov	r0, r7
 800c654:	f7ff fb7c 	bl	800bd50 <_malloc_r>
 800c658:	4605      	mov	r5, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d0f2      	beq.n	800c644 <_realloc_r+0x1c>
 800c65e:	4631      	mov	r1, r6
 800c660:	4622      	mov	r2, r4
 800c662:	f7ff fb5f 	bl	800bd24 <memcpy>
 800c666:	4631      	mov	r1, r6
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff fc83 	bl	800bf74 <_free_r>
 800c66e:	e7e9      	b.n	800c644 <_realloc_r+0x1c>
 800c670:	4635      	mov	r5, r6
 800c672:	e7e7      	b.n	800c644 <_realloc_r+0x1c>

0800c674 <_malloc_usable_size_r>:
 800c674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c678:	1f18      	subs	r0, r3, #4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfbc      	itt	lt
 800c67e:	580b      	ldrlt	r3, [r1, r0]
 800c680:	18c0      	addlt	r0, r0, r3
 800c682:	4770      	bx	lr

0800c684 <_init>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr

0800c690 <_fini>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	bf00      	nop
 800c694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c696:	bc08      	pop	{r3}
 800c698:	469e      	mov	lr, r3
 800c69a:	4770      	bx	lr
